<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=utf-8">
<meta name=Generator content="Microsoft Word 10 (filtered)">
<title> </title>

<link rel=Stylesheet type="text/css" media=all href="1.css">
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Tahoma;
	panose-1:2 11 6 4 3 5 4 4 2 4;}
@font-face
	{font-family:Verdana;
	panose-1:2 11 6 4 3 5 4 4 2 4;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;}
h1
	{margin-top:1.0in;
	margin-right:0in;
	margin-bottom:.5in;
	margin-left:0in;
	text-align:center;
	page-break-before:always;
	font-size:24.0pt;
	font-weight:bold;}
h2
	{page-break-before:always;
	font-size:18.0pt;
	font-weight:bold;}
h3
	{font-size:13.5pt;
	font-weight:bold;}
h4
	{font-size:12.0pt;
	font-weight:bold;}
h5
	{font-size:10.0pt;
	font-weight:bold;}
p.MsoFootnoteText, li.MsoFootnoteText, div.MsoFootnoteText
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;}
p.MsoTitle, li.MsoTitle, div.MsoTitle
	{font-size:12.0pt;
	font-weight:bold;}
p.MsoBodyText3, li.MsoBodyText3, div.MsoBodyText3
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:0in;
	font-size:8.0pt;}
p.MsoDocumentMap, li.MsoDocumentMap, div.MsoDocumentMap
	{margin:0in;
	margin-bottom:.0001pt;
	background:navy;
	font-size:12.0pt;}
p
	{font-size:12.0pt;}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;}
p.footnote, li.footnote, div.footnote
	{font-size:12.0pt;}
p.monofont, li.monofont, div.monofont
	{font-size:12.0pt;}
p.romanfont, li.romanfont, div.romanfont
	{font-size:12.0pt;}
p.atitle, li.atitle, div.atitle
	{font-size:9.0pt;
	font-weight:bold;}
p.chaptertitle, li.chaptertitle, div.chaptertitle
	{margin-top:0in;
	margin-right:7.5pt;
	margin-bottom:0in;
	margin-left:7.5pt;
	margin-bottom:.0001pt;
	font-size:12.0pt;}
p.sectiontitle, li.sectiontitle, div.sectiontitle
	{margin-top:0in;
	margin-right:15.0pt;
	margin-bottom:0in;
	margin-left:15.0pt;
	margin-bottom:.0001pt;
	font-size:12.0pt;}
p.itable, li.itable, div.itable
	{font-size:12.0pt;}
p.tiny, li.tiny, div.tiny
	{font-size:7.0pt;}
p.multiselect, li.multiselect, div.multiselect
	{font-size:7.5pt;}
p.safnavoff, li.safnavoff, div.safnavoff
	{font-size:8.5pt;}
p.safnavon, li.safnavon, div.safnavon
	{font-size:8.5pt;
	font-weight:bold;}
p.navtopbg, li.navtopbg, div.navtopbg
	{background:#990000;
	font-size:12.0pt;}
p.navleftbg, li.navleftbg, div.navleftbg
	{background:#666666;
	font-size:12.0pt;}
p.navleftbgalt, li.navleftbgalt, div.navleftbgalt
	{background:#666666;
	font-size:12.0pt;}
p.navtitle, li.navtitle, div.navtitle
	{font-size:9.0pt;
	font-weight:bold;}
p.nonavtitle, li.nonavtitle, div.nonavtitle
	{font-size:9.0pt;
	font-weight:bold;}
p.bimodoff, li.bimodoff, div.bimodoff
	{font-size:12.0pt;}
p.bimodon, li.bimodon, div.bimodon
	{font-size:12.0pt;}
p.btblinks, li.btblinks, div.btblinks
	{font-size:8.5pt;}
p.btlinksactive, li.btlinksactive, div.btlinksactive
	{font-size:12.0pt;
	font-weight:bold;}
p.inputtext, li.inputtext, div.inputtext
	{font-size:12.0pt;}
p.inputbutton, li.inputbutton, div.inputbutton
	{font-size:12.0pt;
	font-weight:bold;}
p.endsearch, li.endsearch, div.endsearch
	{font-size:12.0pt;
	font-weight:bold;}
p.dropdown, li.dropdown, div.dropdown
	{font-size:12.0pt;}
p.navtoptoolbg, li.navtoptoolbg, div.navtoptoolbg
	{background:black;
	font-size:12.0pt;}
p.headingbarbg, li.headingbarbg, div.headingbarbg
	{background:#333333;
	font-size:12.0pt;}
p.headingsubbarbg, li.headingsubbarbg, div.headingsubbarbg
	{background:#CCCCCC;
	font-size:12.0pt;}
p.headingbartitle, li.headingbartitle, div.headingbartitle
	{font-size:10.5pt;
	font-weight:bold;}
p.headingsubbartitle, li.headingsubbartitle, div.headingsubbartitle
	{font-size:9.0pt;
	font-weight:bold;}
p.tablestripe, li.tablestripe, div.tablestripe
	{background:#EEEEEE;
	font-size:12.0pt;}
p.pgtitle, li.pgtitle, div.pgtitle
	{font-size:12.0pt;
	font-weight:bold;}
p.buyprint, li.buyprint, div.buyprint
	{font-size:7.5pt;}
p.resulthighlight, li.resulthighlight, div.resulthighlight
	{background:lightblue;
	font-size:12.0pt;}
p.pgsubtitle, li.pgsubtitle, div.pgsubtitle
	{font-size:12.0pt;
	font-weight:bold;}
p.helphead, li.helphead, div.helphead
	{font-size:12.0pt;
	font-weight:bold;}
p.helpsubhead, li.helpsubhead, div.helpsubhead
	{font-size:10.0pt;}
p.helpcaption, li.helpcaption, div.helpcaption
	{font-size:10.0pt;}
p.helptab, li.helptab, div.helptab
	{font-size:10.0pt;}
p.sm, li.sm, div.sm
	{font-size:6.0pt;}
p.gowild, li.gowild, div.gowild
	{font-size:13.5pt;
	font-weight:bold;
	font-style:italic;}
p.getstarted, li.getstarted, div.getstarted
	{font-size:10.0pt;
	font-weight:bold;
	font-style:italic;}
@page Section1
	{size:8.5in 11.0in;
	margin:1.0in 1.25in 1.0in 1.25in;}
div.Section1
	{page:Section1;}
-->
</style>

</head>

<body lang=EN-US link="#990000" vlink=purple>

<div class=Section1>

<div align=center>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 width="90%"
 style='width:90.0%;background:#ECECD9;border-collapse:collapse;border:none'>
 <tr>
  <td width="33%" style='width:33.0%;border:inset #111111 1.0pt;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><a href="24.htm"><span style='text-decoration:none'><img
  border=0 width=37 height=34 src="leftarrw.gif"></span></a></p>
  </td>
  <td width="33%" style='width:33.0%;border:inset #111111 1.0pt;border-left:
  none;padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><a href="0.htm"><span
  style='font-size:13.5pt'>Table of Contents</span></a></p>
  </td>
  <td width="34%" style='width:34.0%;border:inset #111111 1.0pt;border-left:
  none;padding:.75pt .75pt .75pt .75pt'>
  <p align=right style='text-align:right'><a href="26.htm"><span
  style='text-decoration:none'><img border=0 width=37 height=34
  src="rightarrw.gif"></span></a></p>
  </td>
 </tr>
</table>

</div>

<h2><a name="_Chapter_21._Active_Scripting"></a>Chapter 21. Active Scripting</h2>

<p>Active Scripting is a COM-based technology from Microsoft that allows
applications to plug in different languages for macros or scripting. Rather
than force the application to choose a single scripting language, end users of
the application can pick the language they’re most comfortable with. The
application need not know anything specific about the scripting language;
indeed, the language may have been written (or support for Active Scripting
added) after the application was written.</p>

<p>The best examples of this technology are Microsoft’s Internet Explorer (IE)
and Internet Information Server (IIS). IE supports client-side scripting; an
HTML file can have script code embedded in it in any language, and when the
browser displays the page, it executes the code. Hence the term client-side
scripting: the script code is actually executed on the client PC, the PC with
the browser. IIS includes a component called Active Server Pages (ASP) that
supports active scripting. Similar to IE, the code is embedded inside HTML
files, but ASP executes the code at the server before it’s converted to the
final HTML sent to the client.</p>

<p>Many Microsoft applications are starting to support Active Scripting. These
applications typically come standard with VBScript and JScript<a
name="_ftnref20"></a><a href="#_ftn20"><span class=atitlechar><sup><span
style='font-size:9.0pt'>[1]</span></sup></span></a> language implementations,
and all documentation and sample code use one of these languages. In fact, many
users of these applications (IE and IIS users included) aren’t aware you can
use additional languages as well as the standard ones. Using a language such as
Python and its extensive library can help you take full advantage of these
applications.</p>

<p>Each application that supports Active Scripting exposes an object model to
the script code. Regardless of the language the script is using, the object
model available is identical. Although this is the key strength of Active
Scripting, it’s also a problem when attempting to document how to use it. If we
discuss how to use Active Scripting within IE, it really doesn’t help you use
Active Scripting within IIS. Each application supports its own object model, so
the code you write is completely different. Therefore, we start this chapter
with a cursory look at some of the popular Active Scripting applications from
Microsoft, showing sample VBScript alongside Python code. We won’t discuss any
of these applications in detail, just enough for you to understand how to use
Python in their environments. We then focus on how Active Scripting works and
Python’s implementation of Active Scripting. These will give you enough
grounding so you can use Python inside any Active Scripting application armed
with only the documentation for the application and its VBScript or JScript
samples.</p>

<p>Finally, we take a look at adding Active Scripting support to your Python
application. This lets your application’s customers use any language they
choose. You will be amazed at how simple it is to do from Python.</p>

<p>Further information on Active Scripting, including a number of Active
Scripting-related tools can be found at <a
href="http://msdn.microsoft.com/scripting/" target="_blank">http://msdn.microsoft.com/scripting/</a>.</p>

<h3><a name="_21.1_Registering_the_Python_Active_"></a>21.1 Registering the
Python Active Script Support</h3>

<p>When you install the Python Win32 extensions, the Python Active Scripting
implementation is automatically registered. If for some reason you need to
install it manually, you should run the Python script <i>python\win32comext\axscript\client\pyscript.py</i>.
You can run this script from Windows Explorer, PythonWin, or a command prompt.</p>

<h3><a name="_21.2_Python_and_Popular_Microsoft_A"></a>21.2 Python and Popular
Microsoft Applications</h3>

<p>The most popular and visible Active Scripting applications come from
Microsoft; This isn’t surprising, since Microsoft developed the Active
Scripting implementation.</p>

<p>Here we discuss Internet Explorer, Internet Information Server, and the
Windows Scripting Host (WSH). Of these, IE is probably the most fun to play
with, but has the least practical use. Using Active Scripting implies that the
particular language is installed along with the browser, and for the vast
majority of Internet Explorer users, this will not be true of Python. IIS and
WSH are more practical, as they usually run on a machine over which you have
more control; for example, it’s often not a problem to install Python on the
same machine that runs IIS. Similarly, WSH is often used for Windows NT
administration, so installing Python on the servers you are administering also
shouldn’t present a problem.</p>

<h4>21.2.1 Internet Explorer</h4>

<p>Internet Explorer, Version 4 and above, supports Active Scripting by
embedding script code inside the HTML. As the HTML is parsed and rendered by
IE, the code is detected, the particular language loaded, and the code
executed. The script code is embedded in the HTML inside blocks delimited by <tt><span
style='font-size:10.0pt'>&lt;SCRIPT&gt;</span></tt> and <tt><span
style='font-size:10.0pt'>&lt;/SCRIPT&gt;</span></tt> tags. The following is an
example script that displays a message box:</p>

<pre>&lt;SCRIPT&gt;</pre><pre>alert(&quot;Hello there&quot;)</pre><pre>&lt;/SCRIPT&gt;</pre>

<p>The default language for IE is VBScript, so this code is executed using
VBScript. Because the script is so simple, the only change needed to make it
use Python is to specify the language, as shown:</p>

<pre>&lt;SCRIPT Language=Python&gt;</pre><pre>alert(&quot;Hello there&quot;)</pre><pre>&lt;/SCRIPT&gt;</pre>

<p>If you wish to experiment, you can save these three lines as a HTML file and
open it in Internet Explorer. You should see a message box, followed by a blank
web page.</p>

<p>You may be wondering where the <tt><span style='font-size:10.0pt'>alert()</span></tt>
function came from, since it’s not a standard Python built-in function. This is
the key to how Active Scripting works. As the application (in this case IE)
loads the particular language, it notifies the language of global functions and
objects the language should make available; <tt><span style='font-size:10.0pt'>alert()</span></tt>
is one of the functions made available by Internet Explorer. This is how the
application exposes its object model to the language; the programmer uses these
functions and objects to manipulate the application.</p>

<p>The object model exposed by Internet Explorer is similar to the Dynamic HTML
object model. There is a window object, a document object, and so forth, all of
which allow you to get information from the browser (for example, the current
URL) or to direct the browser to perform some action (for example, open a new
URL or reposition the window).</p>

<p>As mentioned previously, the fact that Python must be installed on each
client PC is likely to be a barrier to using Python in the IE environment. It
may be tempting to believe you could use Python to overcome some limitations in
VBScript or JScript: for example, access the registry, open files, or create
socket connections. Unfortunately, Python also restricts the capabilities
available to the programmer when used with Internet Explorer. The whole concept
of client-side scripting is dangerous, as you are downloading arbitrary code
from a web page and running it on your computer. To avoid the potential
problems with people writing malicious code, IE explicitly tells Python that it
should operate in an untrusted mode, and Python complies by seriously
restricting the operations the script can perform. For example, when running in
Internet Explorer, it’s impossible to import Python extension modules (such as <tt><span
style='font-size:10.0pt'>win32api</span></tt>), open local files, create
sockets, and so forth.</p>

<p>For this reason, we won’t spend any time discussing the object model for
Internet Explorer. Instead, we present a few examples and discuss the
differences between VBScript and Python.</p>

<p>The following code presents an HTML file containing a form with one edit
control and three buttons. A VBScript handler is added for one of the buttons and
Python handlers to the remaining two. All the buttons perform the same
operation: update one of the text controls with the current URL.</p>

<p>To keep the size of the example down, we avoided all HTML elements not
absolutely necessary to demonstrate the scripts. For your own HTML, you should
make all efforts to ensure your files conform to valid HTML (e.g., are enclosed
in <tt><span style='font-size:10.0pt'>&lt;HTML&gt;</span></tt> and <tt><span
style='font-size:10.0pt'>&lt;BODY&gt;</span></tt> tags):</p>

<pre>&lt;FORM NAME=&quot;TestForm&quot; &gt;</pre><pre>&nbsp;&nbsp; &lt;!-- A single text control all the buttons will use --&gt;</pre><pre>&nbsp;&nbsp; &lt;INPUT TYPE=&quot;Text&quot; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NAME=&quot;txtControl&quot;</pre><pre>&nbsp;&nbsp; &gt;</pre><pre>&nbsp;&nbsp; &lt;!-- VBScript using inline event handling --&gt;</pre><pre>&nbsp;&nbsp; &lt;INPUT NAME=&quot;butVB&quot; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TYPE=&quot;Button&quot; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VALUE=&quot;VB Script&quot;</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OnClick=&quot;txtControl.value=document.location&quot;</pre><pre>&nbsp;&nbsp; &gt;</pre><pre>&nbsp;&nbsp; &lt;!-- Python using inline event handling --&gt;</pre><pre>&nbsp;&nbsp; &lt;INPUT NAME=&quot;butPy1&quot;</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TYPE=&quot;Button&quot;</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; VALUE=&quot;Python inline&quot;</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OnClick=&quot;TestForm.txtControl.value=document.location&quot;</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LANGUAGE=Python</pre><pre>&nbsp;&nbsp; &gt;</pre><pre>&nbsp;&nbsp; &lt;!-- Python using an implicit event handler --&gt;</pre><pre>&nbsp;&nbsp; &lt;INPUT NAME=&quot;butPy2&quot;</pre><pre> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TYPE=&quot;Button&quot;</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; VALUE=&quot;Python implicit&quot;</pre><pre>&nbsp;&nbsp; &gt;</pre><pre>&nbsp;&nbsp; &lt;!-- Now the code for the implicit handler --&gt;</pre><pre>&nbsp;&nbsp; &lt;SCRIPT LANGUAGE=Python&gt;</pre><pre># Note we can not indent this block,</pre><pre># as the leading whitespace will upset Python</pre><pre>def butPy2_onClick():</pre><pre>&nbsp; TestForm.txtControl.value=document.location</pre><pre>&nbsp;&nbsp; &lt;/SCRIPT&gt;</pre><pre>&lt;/FORM&gt;</pre>

<p>This code demonstrates a few key points relating to the Python
implementation of Active Scripting. If you examine the VBScript handler for the
first button, notice that it can refer to the <tt><span style='font-size:10.0pt'>txtControl</span></tt>
object without any special prefixes or annotations; because both the script and
the control are part of the same form, a concept similar to scoping is applied.
Python doesn’t support this degree of scoping, so the Python handlers all must
name each object explicitly.</p>

<p>Another important point is that in all Active Scripting applications, you
must be careful regarding whitespace. Although HTML is generally insensitive to
whitespace, any Python code embedded still is.</p>

<p>The event handling in Python attempts to conform to the conventions VBScript
and JScript programmers would be familiar with. Event handling can be inline,
where the script code is specified directly in the definition of the object as
we demonstrated in the previous example. Alternatively, you can write a
function with the name <tt><span style='font-size:10.0pt'>object_event()</span></tt>,
where <tt><span style='font-size:10.0pt'>object</span></tt> is the name of the
object, and <tt><span style='font-size:10.0pt'>event</span></tt> is the name of
an event this object fires. Nothing is needed to explicitly attach the event to
this function: the name of the function is all that is needed to get this
behavior. This is demonstrated using <tt><span style='font-size:10.0pt'>PyBut2_onClick()</span></tt>,
which responds to the <tt><span style='font-size:10.0pt'>onClick</span></tt>
event for the <tt><span style='font-size:10.0pt'>PyBut2</span></tt> object.</p>

<p>For more examples using Python within Internet Explorer, please see the
Active Scripting samples, available from the PythonCOM <i>README</i>, installed
with the Python for Windows extensions. For more information on the Internet
Explorer object model, please see <a href="http://www.microsoft.com/windows/ie/"
target="_blank">http://www.microsoft.com/windows/ie/</a>. </p>

<h4>21.2.2 Internet Information Server</h4>

<p>The Microsoft Internet Information Server is a web server that supports the
standard Unix web-server scripting technique called the Common Gateway
Interface (CGI). In addition to CGI, IIS also supports Active Server Pages
(ASP), which use Active Scripting to implement a richer scripting model than
offered by CGI.</p>

<p>Active Server Pages uses a scheme to embed the script code that is similar
to Internet Explorer. Code is still delimited with <tt><span style='font-size:
10.0pt'>&lt;SCRIPT&gt;</span></tt> tags, but the tag has a <tt><span
style='font-size:10.0pt'>RunAt=Server</span></tt> attribute added. For example:</p>

<pre>&lt;SCRIPT RunAt=Server Language=Python&gt;</pre><pre># This code will run at the server</pre><pre>&lt;/SCRIPT&gt;</pre><pre>&lt;SCRIPT Language=Python&gt;</pre><pre># This code will run at the client</pre><pre>&lt;/SCRIPT&gt;</pre>

<p>Although this sounds simple, the complication again is that the object model
exposed by ASP is quite different to that exposed by IE. If you attempt to call
the <tt><span style='font-size:10.0pt'>alert()</span></tt> function, your code
fails as <tt><span style='font-size:10.0pt'>alert()</span></tt> doesn’t exist
in the ASP object model.</p>

<p>In addition to using <tt><span style='font-size:10.0pt'>&lt;SCRIPT&gt;</span></tt>
tags, ASP allows alternative forms delimited by <tt><span style='font-size:
10.0pt'>&lt;% %&gt;</span></tt> and <tt><span style='font-size:10.0pt'>&lt;%=
%&gt;</span></tt> tags. Script code delimited by <tt><span style='font-size:
10.0pt'>&lt;%</span></tt> and <tt><span style='font-size:10.0pt'>%&gt;</span></tt>
tags are almost identical to those delimited by <tt><span style='font-size:
10.0pt'>&lt;SCRIPT&gt;</span></tt> tags. The <tt><span style='font-size:10.0pt'>&lt;%=
%&gt;</span></tt> tag allows you to specify arbitrary Python expressions, and
the result of the expression is replaced in the output. For example, if ASP
encounters HTML of the form:</p>

<pre>Hello &lt;%= name %&gt;</pre>

<p>The value of the <tt><span style='font-size:10.0pt'>name</span></tt>
variable is printed in the output sent to the client.</p>

<p>The source files for Active Server Pages are stored as <i>.asp</i> files,
although for all intents and purposes they are HTML files. The <i>.asp</i>
extension allows IIS to determine if the page could potentially contain
scripting code and hence should be executed under the control of ASP.</p>

<p>ASP also allows Python to run completely unrestricted. There are no
limitations on the files that can be opened or the operations that can be
performed. As the script code is maintained on the server, it’s assumed the
scripts are trusted. For a final feature that makes Python and ASP a great
match, you can specify the default language for an ASP script. If an ASP page
begins with the code <tt><span style='font-size:10.0pt'>&lt;%@ LANGUAGE=Python</span></tt>
<tt><span style='font-size:10.0pt'>%&gt;</span></tt>, Python is used as the
default language for all <tt><span style='font-size:10.0pt'>&lt;SCRIPT&gt;</span></tt>,
<tt><span style='font-size:10.0pt'>&lt;%</span></tt>, and <tt><span
style='font-size:10.0pt'>&lt;%=</span></tt> tags.</p>

<p>ASP exposes seven key objects, as detailed in <a
href="#_Table_21.1._Key_ASP_Objects">Table 21.1</a>. For details on the attributes
and methods available on these objects, refer to the ASP documentation.</p>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 width="100%"
 style='width:100.0%'>
 <tr>
  <td colspan=2 style='border:none;padding:.75pt .75pt .75pt .75pt'>
  <h5 align=center style='text-align:center'><a
  name="_Table_21.1._Key_ASP_Objects"></a>Table&nbsp;21.1. Key ASP Objects</h5>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><b><span style='font-size:10.0pt'>Object</span></b></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><b><span style='font-size:10.0pt'>Description</span></b></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>Application</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>The ASP application under which the script is
  running. An ASP application is a collection of ASP files that share certain
  state and other information.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>ObjectContext</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Exposes the transaction mechanisms behind
  ASP.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>Request</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Represents the values the client browser
  passed to the server when establishing the connection.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>ASPError</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Contains information about an error
  condition in ASP.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>Response</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Sends output to the client.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>Server</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Represents the ASP server, allowing you to
  query information and carry out commands.</span></p>
  </td>
 </tr>
</table>

<p>The following example uses the <tt><span style='font-size:10.0pt'>Server</span></tt>,
<tt><span style='font-size:10.0pt'>Reponse</span></tt>, and <tt><span
style='font-size:10.0pt'>Request</span></tt> objects. It’s simple and again
skips the <tt><span style='font-size:10.0pt'>&lt;HTML&gt;</span></tt> and other
tags your file normally has. It begins by nominating Python as the default language
for the page. This means all other code in the file uses Python without
explicitly specifying it for each script block. The first script block uses the
<tt><span style='font-size:10.0pt'>Request</span></tt> object to look up the
URL of the current page and save it to a local variable. You then use <tt><span
style='font-size:10.0pt'>&lt;%=</span></tt> tags to print the variable value
and call the <tt><span style='font-size:10.0pt'>Server.MapPath()</span></tt>
method to translate this to a local filesystem reference. The final script
block loops over all variables in the <tt><span style='font-size:10.0pt'>Request.Server-Variables</span></tt>
collection, printing the variable name and value using the <tt><span
style='font-size:10.0pt'>Response.Write()</span></tt> method:</p>

<pre>&lt;!--</pre><pre>ServerSample.asp - an example of Python</pre><pre>and Active Scripting</pre><pre>--&gt;</pre><pre>&nbsp;</pre><pre>&lt;%@ Language=Python %&gt;</pre><pre>&nbsp;</pre><pre>&lt;%</pre><pre># Save the URL into a local variable</pre><pre>url = Request.ServerVariables(&quot;PATH_INFO&quot;)</pre><pre>%&gt;</pre><pre>&nbsp;</pre><pre>&lt;H2&gt;Current Document&lt;/H2&gt;</pre><pre>The URL to this file is &lt;pre&gt;&lt;%= url %&gt;&lt;/pre&gt;&lt;p&gt;</pre><pre>The local path to this URL is &lt;pre&gt;&lt;%= Server.mappath(url) %&gt;&lt;/pre&gt;</pre><pre>&nbsp;</pre><pre>&lt;H2&gt;Client Request Headers&lt;/H2&gt;</pre><pre>&lt;% </pre><pre>for key in Request.ServerVariables:</pre><pre>&nbsp;&nbsp;&nbsp; Response.Write(&quot;%s=%s&lt;br&gt;&quot; % (key, Request.ServerVariables(key)))</pre><pre>%&gt;</pre>

<p>The <tt><span style='font-size:10.0pt'>Response.Write()</span></tt> method
sends output to the client. The string can contain any valid HTML, including
tags. It’s worth noting that the Python <tt><span style='font-size:10.0pt'>print</span></tt>
statement is never redirected by the scripting engine. For example, it could be
argued that when used with ASP, the <tt><span style='font-size:10.0pt'>print</span></tt>
statement should send the output to the <tt><span style='font-size:10.0pt'>Response.Write()</span></tt>
method, but this doesn’t happen.</p>

<p>We are now ready to run the script, but how do we do this? At this point, we
better take a slight diversion into how you configure IIS to run scripts.</p>

<h4>21.2.3 Configuring IIS</h4>

<p>The process of configuring IIS is simple. Before you do anything, you must
ensure that Python is installed on the IIS server, and the Active Scripting
engine is registered, as we discuss previously in this chapter. There is
nothing Python-specific that needs to be configured within IIS; all you need to
do is tell IIS where to find your scripts. Do this with the following process:</p>

<p style='margin-left:.5in;text-indent:-.25in'>1.<span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Start the Internet Service Manager on the machine where IIS is
installed.</p>

<p style='margin-left:.5in;text-indent:-.25in'>2.<span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Locate and select the default web server entry under your ASP server.</p>

<p style='margin-left:.5in;text-indent:-.25in'>3.<span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Select Action <img border=0 width=20 height=16
src="images\image008.gif" alt="figs/U2192.gif">New <img
border=0 width=20 height=16 src="images\image008.gif"
alt="figs/U2192.gif">Virtual Directory. The New Virtual Directory Wizard
begins.</p>

<p style='margin-left:.5in;text-indent:-.25in'>4.<span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Enter <i>PythonTest</i> as the alias that accesses the virtual directory
and select Next.</p>

<p style='margin-left:.5in;text-indent:-.25in'>5.<span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>You are then prompted to enter the physical path of the directory
containing the content. Enter the name of the directory where your test or
sample <i>.asp</i> files are located and select Next.</p>

<p style='margin-left:.5in;text-indent:-.25in'>6.<span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>You are then prompted for the permissions for the new directory. The
default options are acceptable, so you can select Finish.</p>

<p>The ISM should then look something like <a
href="#_Figure_21.1._Internet_Service_Manag">Figure 21.1</a>.</p>

<h5 align=center style='text-align:center'><a
name="_Figure_21.1._Internet_Service_Manag"></a>Figure 21.1. Internet Service
Manager after creating the new directory</h5>

<p class=MsoNormal align=center style='text-align:center'><span
style='font-family:Arial'><img border=0 width=502 height=339
src="images\image076.gif" alt="figs/ppw.2101.gif"></span></p>

<p>Let’s now execute the sample script. The simplest thing is to test your
script by running Internet Explorer on the same machine as the server. If you
enter a URL, <a href="http://localhost/PythonTest/ServerSample.asp"
target="_blank">http://localhost/PythonTest/ServerSample.asp</a>, it executes
the <i>ServerSample.asp</i> file from the physical path you specified for the <i>PythonTest</i>
virtual directory.</p>

<p>Once this is done, the Explorer window should look like <a
href="#_Figure_21.2._The_sample_ASP_file_ru">Figure 21.2</a>.</p>

<h4>21.2.4 Windows Scripting Host</h4>

<p>Another handy Active Scripting tool is the Windows Scripting Host (WSH). WSH
exposes an object model that makes it particularly suitable for tasks that are
normally attempted with Windows batch files. WSH is often used for general Windows
administration and can run the logon scripts as each user logs on to the
network.</p>

<p>The Windows Scripting Host is included with Windows 98 and 2000, or can be
obtained from <a href="http://msdn.microsoft.com/scripting" target="_blank">http://msdn.microsoft.com/scripting</a>
for Windows 95 and NT. It’s packaged as two executables: <i>cscript.exe</i> , a
command-line tool, suitable for running from the Windows command prompt; and <i>wscript.exe</i>
, a GUI application generally run from Windows Explorer.</p>

<h5 align=center style='text-align:center'><a
name="_Figure_21.2._The_sample_ASP_file_ru"></a>Figure 21.2. The sample ASP
file running under IIS</h5>

<p class=MsoNormal align=center style='text-align:center'><span
style='font-family:Arial'><img border=0 width=502 height=478
src="images\image077.gif" alt="figs/ppw.2102.gif"></span></p>

<p>WSH uses simple text files to hold the script code; Python files run under
the Windows Scripting Host using the extension <i>.pys</i>. There are no tags
or any other special characters needed, so WSH files that use Python are
syntactically identical to a Python source file. The only difference is that if
the code were executed directly by Python, the object model exposed by WSH is
not available.</p>

<p>Version 5 of the Windows Scripting Host supports the objects described in <a
href="#_Table_21.2._Windows_Scripting_Host_">Table 21.2</a>.</p>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 width="100%"
 style='width:100.0%'>
 <tr>
  <td colspan=2 style='border:none;padding:.75pt .75pt .75pt .75pt'>
  <h5 align=center style='text-align:center'><a
  name="_Table_21.2._Windows_Scripting_Host_"></a>Table&nbsp;21.2. Windows
  Scripting Host Top-Level Objects</h5>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><b><span style='font-size:10.0pt'>Object</span></b></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><b><span style='font-size:10.0pt'>Description</span></b></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>WScript</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>The top-level object containing information
  about the script being executed or the version of WSH, and methods to take
  specific actions, such as display a message, or create a COM object</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>WshArguments</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>An object exposed via </span><tt><span
  style='font-size:10.0pt'>Wscript.Arguments</span></tt><span style='font-size:
  10.0pt'> that provides access to the script arguments</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>WshShell</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>An object providing access to shortcuts and
  other aspects of the Windows Shell API</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>WshShortcut</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Represents a filesystem shortcut; provided
  by the </span><tt><span style='font-size:10.0pt'>WshShell</span></tt><span
  style='font-size:10.0pt'> object</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>WshUrlShortcut</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Represents a URL shortcut; provided by the </span><tt><span
  style='font-size:10.0pt'>WshShell</span></tt><span style='font-size:10.0pt'>
  object</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>WshCollection</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>A general-purpose collection that provides
  the list of shared drives, printer connections, and so forth</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>WshEnvironment</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>An object that provides access to the
  Windows environment variables</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>WshSpecialFolders</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>An object representing the special Windows
  folders, such as the location of the desktop or favorites</span></p>
  </td>
 </tr>
</table>

<p>The following code is a simple demo of Python used by the WSH. It prints the
name of the script, the first argument passed to the script on the command
line, and the first network connection:</p>

<pre># wsh.pys</pre><pre># A Windows Scripting Host file that uses Python.</pre><pre>&nbsp;</pre><pre>WScript.Echo(&quot;The script name is&quot;, WScript.ScriptName)</pre><pre>if len(WScript.Arguments):</pre><pre>&nbsp;&nbsp;&nbsp; WScript.Echo(&quot;The first argument is&quot;, WScript.Arguments(0))</pre><pre>&nbsp;</pre><pre>net = WScript.CreateObject(&quot;Wscript.Network&quot;)</pre><pre>&nbsp;</pre><pre>netInfo = net.EnumNetworkDrives()</pre><pre>WScript.Echo(netInfo[0], &quot;=&quot;, netInfo[1])</pre>

<p>You can run this script from a command prompt and see the output:</p>

<pre>C:\Scripts&gt;cscript wsh.pys Hello</pre><pre>Microsoft (R) Windows Scripting Host Version 5.0 for Windows</pre><pre>Copyright (C) Microsoft Corporation 1996-1997. All rights reserved.</pre><pre>&nbsp;</pre><pre>The script name is wsh.pys</pre><pre>The first argument is Hello</pre><pre>Z: = \\SKIPPY\d_drive</pre><pre>&nbsp;</pre><pre>C:\Scripts&gt;</pre>

<p>Alternatively, you could use the GUI version of WSH by executing the
command:</p>

<pre>C:\Scripts&gt;wscript C:\Scripts\wsh.pys Hello</pre>

<p>This command can be executed from a command prompt or from the Windows Start
<img border=0 width=20 height=16 src="images\image008.gif"
alt="figs/U2192.gif">Run menu item. It should be possible to execute a <i>.pys</i>
file by double-clicking it in Windows Explorer, but Python currently doesn’t
support this.</p>

<p>When you execute the script under the GUI version, notice that all the <tt><span
style='font-size:10.0pt'>WScript.Echo()</span></tt> calls are displayed as
message boxes rather than printing a console message. This means that the
example generates three message boxes. Depending on the needs of your script,
either or both versions of WSH may be suitable.</p>

<h5 style='page-break-after:avoid'>21.2.4.1 Blurring the edges: WSH or straight
Python</h5>

<p>One of the questions that may come to mind is “Why bother?” Python provides
much of this functionality via the Win32 Extensions, and the native Python code
is often simpler than the WSH version. For example, <tt><span style='font-size:
10.0pt'>sys.argv</span></tt> and <tt><span style='font-size:10.0pt'>os.environ[]</span></tt>
are certainly less to type than <tt><span style='font-size:10.0pt'>WScript.Arguments</span></tt>
and <tt><span style='font-size:10.0pt'>WScript.CreateObject (</span></tt>“<tt><span
style='font-size:10.0pt'>WScript.Shell</span></tt>”<tt><span style='font-size:
10.0pt'>).Environment</span></tt>.</p>

<p>To further blur the distinction, it’s worth noting that much of the
functionality provided by WSH is exposed via the <tt><span style='font-size:
10.0pt'>WScript.CreateObject()</span></tt> function. This function is almost
identical to the Python function <tt><span style='font-size:10.0pt'>win32com.client.Dispatch()</span></tt>;
it creates a COM object by name.</p>

<p>What this means is as long as WSH is installed on a machine, Python can
still make use of most WSH objects, even when not running under WSH. For
example, you can call <tt><span style='font-size:10.0pt'>EnumNetworkDrives()</span></tt>
from a Python prompt as follows:</p>

<pre>&gt;&gt;&gt; from win32com.client import Dispatch</pre><pre>&gt;&gt;&gt; net=Dispatch(&quot;Wscript.Network&quot;)</pre><pre>&gt;&gt;&gt; netInfo=net.EnumNetworkDrives()</pre><pre>&gt;&gt;&gt; print &quot;%s=%s&quot; % (netInfo[0], netInfo[1])</pre><pre>Z:=\\SKIPPY\d_drive</pre><pre>&gt;&gt;&gt;</pre>

<p>You have the best of both worlds: you can make use of all Python’s features
when running under WSH, and also make use of the best WSH features when running
standard Python.</p>

<h3><a name="_21.3_Active_Debugging"></a>21.3 Active Debugging</h3>

<p>A popular extension to Active Scripting is Active Debugging, a technology
that allows you to debug your scripts. Regardless of the language your scripts
are implemented in, you can debug them in a single debugging environment
provided by Microsoft. Interestingly, this allows you to step through multiple
languages; for example, as Python code calls VB code that calls Python code,
you can step through each individual line.</p>

<p>Microsoft provides two Active Debugging environments. The Windows Script
Debugger is a free tool available from <a
href="http://msdn.microsoft.com/scripting/" target="_blank">http://msdn.microsoft.com/scripting/</a>
, and while a nice debugger, the Microsoft Visual Interdev provides a richer
debugging environment. The only drawback with Interdev is that it comes with
Microsoft Visual C++ and is not available for free download.</p>

<p>There is not much to say about Active Debugging when using Python. You
simply use the debugger, and Python is right there, ready to be debugged.</p>

<p>Unfortunately, the Active Debugging specification is new and not everything
works quite as expected. For example, it’s impossible to debug scripts under
Internet Explorer 4, as the Active Desktop enhancements cause the debugger to
complain that you are attempting to debug the desktop. A solution to this
particular problem is to debug your script using a different <tt><span
style='font-size:10.0pt'>EXE</span></tt> that still uses the IE4 control, e.g.,
PythonWin and the <i>webrowser.py</i> sample. A further complication is that
not all Active Scripting hosts support Active Debugging. The Debugging
interfaces are optional, and if the host doesn’t support debugging the utility
of the debugger is severely limited.</p>

<h3><a name="_21.4_How_Active_Scripting_Works"></a>21.4 How Active Scripting
Works</h3>

<p>This section discusses some internals of the Active Scripting mechanism.
Although this information isn’t necessary for you to use Python in an Active
Scripting environment, it may help you understand some of the intricacies of
the Active Scripting implementations. Understanding this section is required
for the next section.</p>

<p>As mentioned previously, Active Scripting is a COM-based technology and
works by providing an object model for the end user. It should come as no
surprise that this object model is provided by COM.</p>

<p>To summarize a complicated specification in a few paragraphs, here’s the general
process an application uses when using Active Scripting:</p>

<p style='margin-left:.5in;text-indent:-.25in'>1.<span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Determines the language to be used for a particular script block and
creates the language engine as a normal COM object. Thus, <tt><span
style='font-size:10.0pt'>VBScript</span></tt>, <tt><span style='font-size:10.0pt'>JScript</span></tt>,
and <tt><span style='font-size:10.0pt'>Python</span></tt> are the COM ProgIDs
used for the languages described here.</p>

<p style='margin-left:.5in;text-indent:-.25in'>2.<span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Passes the language engine a series of named items. Each named item is a
COM object (that is, an <tt><span style='font-size:10.0pt'>IDispatch</span></tt>
pointer) with a name and attributes. The attributes include whether the item is
considered global and whether the item fires events.</p>

<p style='margin-left:.5in;text-indent:-.25in'>3.<span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Each named item is placed in the namespace by the language engine. Any
named items that fire events have the event-handling mechanism put in place. In
addition, any object considered global should have all its methods and properties
made available as global methods and properties.</p>

<p style='margin-left:.5in;text-indent:-.25in'>4.<span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>The application then gives the language engine the script code to
execute. When the code refers to an object previously placed in the namespace,
the language engine makes a standard COM call on the COM <tt><span
style='font-size:10.0pt'>IDispatch</span></tt> pointer passed for the named
item.</p>

<p>Let’s reconsider the original example in the previous section “Internet
Explorer.” When IE loads the Python engine, it passes a number of standard
items (such as <tt><span style='font-size:10.0pt'>Window</span></tt>, <tt><span
style='font-size:10.0pt'>Document</span></tt>, and so forth). In addition to
the standard items, a number of additional items are passed dependent on the
HTML content. In the example, an item named <tt><span style='font-size:10.0pt'>TestForm</span></tt>
and each element in the form are added. Many of these items may source events
(such as the user interface <tt><span style='font-size:10.0pt'>Window</span></tt>
and form element objects), but only a few are considered global. Internet
Explorer designates the <tt><span style='font-size:10.0pt'>Window</span></tt>
items as global, and if you refer to the IE documentation you will note that
the <tt><span style='font-size:10.0pt'>Window</span></tt> item has an <tt><span
style='font-size:10.0pt'>alert()</span></tt> method; hence you can refer to the
<tt><span style='font-size:10.0pt'>alert()</span></tt> method globally, as in
that first example.</p>

<p>Internally, everything is achieved using normal COM concepts; all method
calls and property references are done with <tt><span style='font-size:10.0pt'>IDispatch</span></tt>,
as discussed in <a href="16.htm#_Chapter_12._Advanced_Python_and_COM">Chapter
12</a>. All event handling is done using normal <tt><span style='font-size:
10.0pt'>IConnectionPoint</span></tt> interfaces, and although beyond the scope
of this book, is fully supported by the standard Python COM framework.</p>

<h3><a name="_21.5_Active_Script_Hosting_in_Pytho"></a>21.5 Active Script
Hosting in Python</h3>

<p>As a fitting finale to this section of the book, we will discuss how you can
incorporate Active Scripting in your Python application. If you are working
with Python, you already have a very cool extension language built right-in,
but there may be good reasons for wanting to extend this to include other
languages, marketing being just one!</p>

<p>If there is any end of the Active Scripting specification to work with,
creating an application that supports Active Scripting is the one to choose
over building a language engine. The COM specifications for applications using
Active Scripting are not difficult to understand, and Python has additional
helpers that reduce this to a small amount of code.</p>

<p>The sample application exposes an Active Scripting object model. It loads
script code from a text file and executes it using any Active
Scripting-supported language: two more examples will demonstrate VBScript and
Python. The object model the application exposes is simple; there’s a single <tt><span
style='font-size:10.0pt'>Application</span></tt> object supporting a single
method <tt><span style='font-size:10.0pt'>Echo,</span></tt> which displays a
message box.</p>

<p>These are the steps:</p>

<p style='margin-left:.5in;text-indent:-.25in'>1.<span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Creates a <tt><span style='font-size:10.0pt'>PyIActiveScriptSite</span></tt>
object. The <tt><span style='font-size:10.0pt'>win32com.axscript.server.axsite</span></tt>
module provides an Active Scripting Site base-class that is suitable for our
purposes. All you need to do is add an error handler; it’s simple and prints
the message to the console.</p>

<p style='margin-left:.5in;text-indent:-.25in'>2.<span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Defines the object model. The <tt><span style='font-size:10.0pt'>win32com.axscript.server.axsite</span></tt>
module allows you to specify a dictionary of <tt><span style='font-size:10.0pt'>string</span></tt>-<tt><span
style='font-size:10.0pt'>object</span></tt> pairs, where <tt><span
style='font-size:10.0pt'>string</span></tt> is the name for the object model,
and <tt><span style='font-size:10.0pt'>object</span></tt> is any <tt><span
style='font-size:10.0pt'>PyIDispatch</span></tt> object. The example provides a
simple Python COM object. For more information on implementing COM objects
using Python, see <a href="16.htm#_Chapter_12._Advanced_Python_and_COM">Chapter
12</a>.</p>

<p style='margin-left:.5in;text-indent:-.25in'>3.<span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Loads the code and passes it to the required language engine. This
sample accepts two command-line parameters, the name of the language to use,
and the name of a text file containing the code:</p>

<pre style='margin-left:.5in;text-indent:-.25in'>4.<span style='font-size:7.0pt;
font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span># ActiveApp.py - Demonstration of a Python Active Scripting Application.</pre><pre
style='margin-left:.5in;text-indent:-.25in'>5.<span style='font-size:7.0pt;
font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>import string, sys</pre><pre
style='margin-left:.5in;text-indent:-.25in'>6.<span style='font-size:7.0pt;
font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>from win32com.axscript import axscript</pre><pre
style='margin-left:.5in;text-indent:-.25in'>7.<span style='font-size:7.0pt;
font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>from win32com.axscript.server import axsite</pre><pre
style='margin-left:.5in;text-indent:-.25in'>8.<span style='font-size:7.0pt;
font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>import pythoncom</pre><pre
style='margin-left:.5in;text-indent:-.25in'>9.<span style='font-size:7.0pt;
font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>import win32com.server.util</pre><pre
style='margin-left:.5in;text-indent:-.25in'>10.<span style='font-size:7.0pt;
font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&nbsp;</pre><pre
style='margin-left:.5in;text-indent:-.25in'>11.<span style='font-size:7.0pt;
font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>class MySite(axsite.AXSite):</pre><pre
style='margin-left:.5in;text-indent:-.25in'>12.<span style='font-size:7.0pt;
font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&nbsp;&nbsp;&nbsp;&nbsp;# Our error handler will print to the console.</pre><pre
style='margin-left:.5in;text-indent:-.25in'>13.<span style='font-size:7.0pt;
font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&nbsp;&nbsp;&nbsp;&nbsp;def OnScriptError(self, activeScriptError):</pre><pre
style='margin-left:.5in;text-indent:-.25in'>14.<span style='font-size:7.0pt;
font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exc = activeScriptError.GetExceptionInfo()</pre><pre
style='margin-left:.5in;text-indent:-.25in'>15.<span style='font-size:7.0pt;
font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print &quot;Exception:&quot;, exc[1]</pre><pre
style='margin-left:.5in;text-indent:-.25in'>16.<span style='font-size:7.0pt;
font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try:</pre><pre
style='margin-left:.5in;text-indent:-.25in'>17.<span style='font-size:7.0pt;
font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sourceText = activeScriptError.GetSourceLineText()</pre><pre
style='margin-left:.5in;text-indent:-.25in'>18.<span style='font-size:7.0pt;
font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;except pythoncom.com_error:</pre><pre
style='margin-left:.5in;text-indent:-.25in'>19.<span style='font-size:7.0pt;
font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sourceText = None</pre><pre
style='margin-left:.5in;text-indent:-.25in'>20.<span style='font-size:7.0pt;
font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if sourceText is not None: </pre><pre
style='margin-left:.5in;text-indent:-.25in'>21.<span style='font-size:7.0pt;
font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;context, lineNo, charNo = activeScriptError.GetSourcePosition()</pre><pre
style='margin-left:.5in;text-indent:-.25in'>22.<span style='font-size:7.0pt;
font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print sourceText</pre><pre
style='margin-left:.5in;text-indent:-.25in'>23.<span style='font-size:7.0pt;
font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;indent = &quot; &quot; * (charNo-1)</pre><pre
style='margin-left:.5in;text-indent:-.25in'>24.<span style='font-size:7.0pt;
font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print indent + &quot;^&quot;</pre><pre
style='margin-left:.5in;text-indent:-.25in'>25.<span style='font-size:7.0pt;
font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return winerror.S_OK</pre><pre
style='margin-left:.5in;text-indent:-.25in'>26.<span style='font-size:7.0pt;
font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&nbsp;</pre><pre
style='margin-left:.5in;text-indent:-.25in'>27.<span style='font-size:7.0pt;
font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span># A named object for our namespace</pre><pre
style='margin-left:.5in;text-indent:-.25in'>28.<span style='font-size:7.0pt;
font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span># A normal Python COM object (minus registration info)</pre><pre
style='margin-left:.5in;text-indent:-.25in'>29.<span style='font-size:7.0pt;
font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>class Application:</pre><pre
style='margin-left:.5in;text-indent:-.25in'>30.<span style='font-size:7.0pt;
font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&nbsp;&nbsp;&nbsp;&nbsp;_public_methods_ = [ 'Echo' ]</pre><pre
style='margin-left:.5in;text-indent:-.25in'>31.<span style='font-size:7.0pt;
font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&nbsp;&nbsp;&nbsp;&nbsp;def Echo(self, *args):</pre><pre
style='margin-left:.5in;text-indent:-.25in'>32.<span style='font-size:7.0pt;
font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print string.join(map(str, args))</pre><pre
style='margin-left:.5in;text-indent:-.25in'>33.<span style='font-size:7.0pt;
font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&nbsp;</pre><pre
style='margin-left:.5in;text-indent:-.25in'>34.<span style='font-size:7.0pt;
font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span># Our function that creates the site, creates the engine</pre><pre
style='margin-left:.5in;text-indent:-.25in'>35.<span style='font-size:7.0pt;
font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span># and runs the code.</pre><pre
style='margin-left:.5in;text-indent:-.25in'>36.<span style='font-size:7.0pt;
font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>def RunCode(engineName, code):</pre><pre
style='margin-left:.5in;text-indent:-.25in'>37.<span style='font-size:7.0pt;
font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&nbsp;&nbsp;&nbsp;&nbsp;app = win32com.server.util.wrap( Application() )</pre><pre
style='margin-left:.5in;text-indent:-.25in'>38.<span style='font-size:7.0pt;
font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&nbsp;&nbsp;&nbsp;&nbsp;# Create a dictionary holding our object model.</pre><pre
style='margin-left:.5in;text-indent:-.25in'>39.<span style='font-size:7.0pt;
font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&nbsp;&nbsp;&nbsp;&nbsp;model = {</pre><pre
style='margin-left:.5in;text-indent:-.25in'>40.<span style='font-size:7.0pt;
font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'Application' : app,</pre><pre
style='margin-left:.5in;text-indent:-.25in'>41.<span style='font-size:7.0pt;
font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&nbsp;&nbsp;&nbsp;&nbsp;}</pre><pre
style='margin-left:.5in;text-indent:-.25in'>42.<span style='font-size:7.0pt;
font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&nbsp;</pre><pre
style='margin-left:.5in;text-indent:-.25in'>43.<span style='font-size:7.0pt;
font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&nbsp;&nbsp;&nbsp;&nbsp;# Create the scripting site.</pre><pre
style='margin-left:.5in;text-indent:-.25in'>44.<span style='font-size:7.0pt;
font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&nbsp;&nbsp;&nbsp;&nbsp;site = MySite(model)</pre><pre
style='margin-left:.5in;text-indent:-.25in'>45.<span style='font-size:7.0pt;
font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&nbsp;&nbsp;&nbsp;&nbsp;# Create the engine and add the code.</pre><pre
style='margin-left:.5in;text-indent:-.25in'>46.<span style='font-size:7.0pt;
font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&nbsp;&nbsp;&nbsp;&nbsp;engine = site.AddEngine(engineName)</pre><pre
style='margin-left:.5in;text-indent:-.25in'>47.<span style='font-size:7.0pt;
font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&nbsp;&nbsp;&nbsp;&nbsp;engine.AddCode(code)</pre><pre
style='margin-left:.5in;text-indent:-.25in'>48.<span style='font-size:7.0pt;
font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&nbsp;&nbsp;&nbsp;&nbsp;# Run the code.</pre><pre
style='margin-left:.5in;text-indent:-.25in'>49.<span style='font-size:7.0pt;
font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&nbsp;&nbsp;&nbsp;&nbsp;engine.Start()</pre><pre
style='margin-left:.5in;text-indent:-.25in'>50.<span style='font-size:7.0pt;
font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&nbsp;</pre><pre
style='margin-left:.5in;text-indent:-.25in'>51.<span style='font-size:7.0pt;
font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>if __name__ == '__main__':</pre><pre
style='margin-left:.5in;text-indent:-.25in'>52.<span style='font-size:7.0pt;
font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&nbsp;&nbsp;&nbsp;&nbsp;if len(sys.argv) &lt; 3:</pre><pre
style='margin-left:.5in;text-indent:-.25in'>53.<span style='font-size:7.0pt;
font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print &quot;Usage: ActiveApp.py Language ScriptFile&quot;</pre><pre
style='margin-left:.5in;text-indent:-.25in'>54.<span style='font-size:7.0pt;
font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&nbsp;&nbsp;&nbsp;&nbsp;else:</pre><pre
style='margin-left:.5in;text-indent:-.25in'>55.<span style='font-size:7.0pt;
font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;code = open(sys.argv[2]).read()</pre><pre
style='margin-left:.5in'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RunCode( sys.argv[1], code )</pre>

<p>The error-handling function takes up the bulk of the code as it attempts to
accurately indicate the exact location of the error. The code that runs the
engine is surprisingly small. You create the script site and the engine, and
add the code. When you start the engine, all previously loaded code is
executed.</p>

<p>To test this Active Scripting engine, let’s use two text files: the first is
for VBScript:</p>

<pre>rem Sample VBScript code to be used with ActiveApp.py</pre><pre>&nbsp;</pre><pre>sub JustForTheSakeOfIt</pre><pre>&nbsp;&nbsp;&nbsp; Application.Echo(&quot;Hello from VBScript&quot;)</pre><pre>end sub</pre><pre>&nbsp;</pre><pre>rem Now call the Sub</pre><pre>JustForTheSakeOfIt</pre>

<p>The second is for Python:</p>

<pre># Sample Python code to be used with ActiveApp.py</pre><pre>&nbsp;</pre><pre>def JustForTheSakeOfIt():</pre><pre>&nbsp;&nbsp;&nbsp; Application.Echo(&quot;Hello from Python&quot;)</pre><pre>&nbsp;</pre><pre>JustForTheSakeOfIt()</pre>

<p>Testing the application is straightforward. Assuming that the Python program
and both sample text files are in the same directory, use the following
commands:</p>

<pre>C:\Scripts&gt;ActiveApp.py VBScript ActiveApp_VBScript.txt</pre><pre>Hello from VBScript</pre><pre>&nbsp;</pre><pre>C:\Scripts&gt;</pre>

<p>And testing Python:</p>

<pre>C:\Scripts&gt;ActiveApp.py Python ActiveApp_Python.txt</pre><pre>Hello from Python</pre><pre>&nbsp;</pre><pre>C:\Scripts&gt;</pre>

<p>Finally, to test the error handler, mix the filename and the language. Let’s
ask VBScript to execute the Python code:</p>

<pre>C:\Scripts&gt;ActiveApp.py VBScript ActiveApp_Python.txt</pre><pre>Exception: Microsoft VBScript compilation error</pre><pre># Same Python code to be used with ActiveApp.py</pre><pre>^</pre><pre>Traceback (innermost last):</pre><pre>&nbsp; File &quot;C:\Scripts\ActiveApp.py&quot;, line 49, in ?</pre><pre>&nbsp;&nbsp;&nbsp; RunCode( sys.argv[1], code )</pre><pre>&nbsp; File &quot;C:\Scripts\ActiveApp.py&quot;, line 40, in RunCode</pre><pre>&nbsp;&nbsp;&nbsp; engine.AddCode(code)</pre><pre>&nbsp; File &quot;C:\Program Files\Python\win32comext\axscript\server\axsite.py&quot;, </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;line 31, in AddCode self.eParse.ParseScriptText(code, None, </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;None, None, 0, 0, 0)</pre><pre>pywintypes.com_error: (-2146827264, 'OLE error 0x800a0400', </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;(0, 'Microsoft VBScript compilation error', 'Expected statement', </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;None, 0, -2146827264), None)</pre><pre>&nbsp;</pre><pre>C:\Scripts&gt;</pre>

<p>The error handler worked fine, but the error information was propagated back
to the calling function; in this case, the <tt><span style='font-size:10.0pt'>engine.AddCode()</span></tt>
line in the sample. Obviously you’d want to add an exception handler for this
case.</p>

<p>Although this has not been a thorough discussion of adding Active Scripting
to your application, it should whet your appetite and give you enough
information to get started. To really take advantage of Active Scripting, you
should consult the Active Scripting documentation, available on MSDN.</p>

<h3><a name="_21.6_Conclusion"></a>21.6 Conclusion</h3>

<p>In this chapter, we looked at using Python in an Active Scripting
environment. The most common use of Active Scripting and Python is using Python
as a scripting language in another application, and we discussed some popular
Microsoft applications that can work with Python.</p>

<p>We also showed a brief teaser how you could leverage Active Scripting in
your own Python application, allowing your users to choose the specific
language they use; we all know that not every Windows programmer has seen the
Python light!</p>

<p class=MsoFootnoteText><a name="_ftn20"></a><a
href="25.htm#_ftnref20" title=""><span
class=MsoFootnoteReference>[1]</span></a> <span style='font-size:7.5pt'>VBScript
is a redistributable Active Scripting implementation by Microsoft using a
subset of the Visual Basic language. JScript, also implemented by Microsoft and
redistributable, uses syntax somewhat like Java.</span></p>

<p class=MsoNormal>&nbsp;</p>

<div align=center>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 width="90%"
 style='width:90.0%;background:#ECECD9;border-collapse:collapse;border:none'>
 <tr>
  <td width="33%" style='width:33.0%;border:inset #111111 1.0pt;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><a href="24.htm"><span style='text-decoration:none'><img
  border=0 width=37 height=34 src="leftarrw.gif"></span></a></p>
  </td>
  <td width="33%" style='width:33.0%;border:inset #111111 1.0pt;border-left:
  none;padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><a href="0.htm"><span
  style='font-size:13.5pt'>Table of Contents</span></a></p>
  </td>
  <td width="34%" style='width:34.0%;border:inset #111111 1.0pt;border-left:
  none;padding:.75pt .75pt .75pt .75pt'>
  <p align=right style='text-align:right'><a href="26.htm"><span
  style='text-decoration:none'><img border=0 width=37 height=34
  src="rightarrw.gif"></span></a></p>
  </td>
 </tr>
</table>

</div>

<p class=MsoNormal>&nbsp;</p>

</div>

</body>

</html>
