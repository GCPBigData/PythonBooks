<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=utf-8">
<meta name=Generator content="Microsoft Word 10 (filtered)">
<title> </title>

<link rel=Stylesheet type="text/css" media=all href="1.css">
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Tahoma;
	panose-1:2 11 6 4 3 5 4 4 2 4;}
@font-face
	{font-family:Verdana;
	panose-1:2 11 6 4 3 5 4 4 2 4;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;}
h1
	{margin-top:1.0in;
	margin-right:0in;
	margin-bottom:.5in;
	margin-left:0in;
	text-align:center;
	page-break-before:always;
	font-size:24.0pt;
	font-weight:bold;}
h2
	{page-break-before:always;
	font-size:18.0pt;
	font-weight:bold;}
h3
	{font-size:13.5pt;
	font-weight:bold;}
h4
	{font-size:12.0pt;
	font-weight:bold;}
h5
	{font-size:10.0pt;
	font-weight:bold;}
p.MsoFootnoteText, li.MsoFootnoteText, div.MsoFootnoteText
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;}
p.MsoTitle, li.MsoTitle, div.MsoTitle
	{font-size:12.0pt;
	font-weight:bold;}
p.MsoBodyText3, li.MsoBodyText3, div.MsoBodyText3
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:0in;
	font-size:8.0pt;}
p.MsoDocumentMap, li.MsoDocumentMap, div.MsoDocumentMap
	{margin:0in;
	margin-bottom:.0001pt;
	background:navy;
	font-size:12.0pt;}
p
	{font-size:12.0pt;}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;}
p.footnote, li.footnote, div.footnote
	{font-size:12.0pt;}
p.monofont, li.monofont, div.monofont
	{font-size:12.0pt;}
p.romanfont, li.romanfont, div.romanfont
	{font-size:12.0pt;}
p.atitle, li.atitle, div.atitle
	{font-size:9.0pt;
	font-weight:bold;}
p.chaptertitle, li.chaptertitle, div.chaptertitle
	{margin-top:0in;
	margin-right:7.5pt;
	margin-bottom:0in;
	margin-left:7.5pt;
	margin-bottom:.0001pt;
	font-size:12.0pt;}
p.sectiontitle, li.sectiontitle, div.sectiontitle
	{margin-top:0in;
	margin-right:15.0pt;
	margin-bottom:0in;
	margin-left:15.0pt;
	margin-bottom:.0001pt;
	font-size:12.0pt;}
p.itable, li.itable, div.itable
	{font-size:12.0pt;}
p.tiny, li.tiny, div.tiny
	{font-size:7.0pt;}
p.multiselect, li.multiselect, div.multiselect
	{font-size:7.5pt;}
p.safnavoff, li.safnavoff, div.safnavoff
	{font-size:8.5pt;}
p.safnavon, li.safnavon, div.safnavon
	{font-size:8.5pt;
	font-weight:bold;}
p.navtopbg, li.navtopbg, div.navtopbg
	{background:#990000;
	font-size:12.0pt;}
p.navleftbg, li.navleftbg, div.navleftbg
	{background:#666666;
	font-size:12.0pt;}
p.navleftbgalt, li.navleftbgalt, div.navleftbgalt
	{background:#666666;
	font-size:12.0pt;}
p.navtitle, li.navtitle, div.navtitle
	{font-size:9.0pt;
	font-weight:bold;}
p.nonavtitle, li.nonavtitle, div.nonavtitle
	{font-size:9.0pt;
	font-weight:bold;}
p.bimodoff, li.bimodoff, div.bimodoff
	{font-size:12.0pt;}
p.bimodon, li.bimodon, div.bimodon
	{font-size:12.0pt;}
p.btblinks, li.btblinks, div.btblinks
	{font-size:8.5pt;}
p.btlinksactive, li.btlinksactive, div.btlinksactive
	{font-size:12.0pt;
	font-weight:bold;}
p.inputtext, li.inputtext, div.inputtext
	{font-size:12.0pt;}
p.inputbutton, li.inputbutton, div.inputbutton
	{font-size:12.0pt;
	font-weight:bold;}
p.endsearch, li.endsearch, div.endsearch
	{font-size:12.0pt;
	font-weight:bold;}
p.dropdown, li.dropdown, div.dropdown
	{font-size:12.0pt;}
p.navtoptoolbg, li.navtoptoolbg, div.navtoptoolbg
	{background:black;
	font-size:12.0pt;}
p.headingbarbg, li.headingbarbg, div.headingbarbg
	{background:#333333;
	font-size:12.0pt;}
p.headingsubbarbg, li.headingsubbarbg, div.headingsubbarbg
	{background:#CCCCCC;
	font-size:12.0pt;}
p.headingbartitle, li.headingbartitle, div.headingbartitle
	{font-size:10.5pt;
	font-weight:bold;}
p.headingsubbartitle, li.headingsubbartitle, div.headingsubbartitle
	{font-size:9.0pt;
	font-weight:bold;}
p.tablestripe, li.tablestripe, div.tablestripe
	{background:#EEEEEE;
	font-size:12.0pt;}
p.pgtitle, li.pgtitle, div.pgtitle
	{font-size:12.0pt;
	font-weight:bold;}
p.buyprint, li.buyprint, div.buyprint
	{font-size:7.5pt;}
p.resulthighlight, li.resulthighlight, div.resulthighlight
	{background:lightblue;
	font-size:12.0pt;}
p.pgsubtitle, li.pgsubtitle, div.pgsubtitle
	{font-size:12.0pt;
	font-weight:bold;}
p.helphead, li.helphead, div.helphead
	{font-size:12.0pt;
	font-weight:bold;}
p.helpsubhead, li.helpsubhead, div.helpsubhead
	{font-size:10.0pt;}
p.helpcaption, li.helpcaption, div.helpcaption
	{font-size:10.0pt;}
p.helptab, li.helptab, div.helptab
	{font-size:10.0pt;}
p.sm, li.sm, div.sm
	{font-size:6.0pt;}
p.gowild, li.gowild, div.gowild
	{font-size:13.5pt;
	font-weight:bold;
	font-style:italic;}
p.getstarted, li.getstarted, div.getstarted
	{font-size:10.0pt;
	font-weight:bold;
	font-style:italic;}
@page Section1
	{size:8.5in 11.0in;
	margin:1.0in 1.25in 1.0in 1.25in;}
div.Section1
	{page:Section1;}
-->
</style>

</head>

<body lang=EN-US link="#990000" vlink=purple>

<div class=Section1>

<div align=center>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 width="90%"
 style='width:90.0%;background:#ECECD9;border-collapse:collapse;border:none'>
 <tr>
  <td width="33%" style='width:33.0%;border:inset #111111 1.0pt;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><a href="10.htm"><span style='text-decoration:none'><img
  border=0 width=37 height=34 src="leftarrw.gif"></span></a></p>
  </td>
  <td width="33%" style='width:33.0%;border:inset #111111 1.0pt;border-left:
  none;padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><a href="0.htm"><span
  style='font-size:13.5pt'>Table of Contents</span></a></p>
  </td>
  <td width="34%" style='width:34.0%;border:inset #111111 1.0pt;border-left:
  none;padding:.75pt .75pt .75pt .75pt'>
  <p align=right style='text-align:right'><a href="12.htm"><span
  style='text-decoration:none'><img border=0 width=37 height=34
  src="rightarrw.gif"></span></a></p>
  </td>
 </tr>
</table>

</div>

<h2><a name="_Chapter_8._Adding_a_Macro_Language"></a>Chapter 8. Adding a Macro
Language</h2>

<p>Python made it easy to write the core of our application, but just about
everything so far could have been done in one of many different languages. In
this chapter, we move to one of Python’s greatest strengths: making
applications <i>extensible</i>. In the process, we’ll learn a lot about how
Python works internally.</p>

<p>Many popular applications (notably the Microsoft Office family) have a macro
language that allows users to customize the way the application behaves. The
kind of things users should be able to do are:</p>

<p class=MsoNormal><i><span style='font-family:Arial;color:#990000'>Write
scripts</span></i><span style='font-family:Arial'> </span></p>

<p style='margin-left:.5in'>Users can write arbitrary scripts in Python that
work with <tt><span style='font-size:10.0pt'>BookSet</span></tt>s and <tt><span
style='font-size:10.0pt'>Transaction</span></tt>s. These run from within our
GUI application or independently.</p>

<p class=MsoNormal><i><span style='font-family:Arial;color:#990000'>Handle
events</span></i><span style='font-family:Arial'> </span></p>

<p style='margin-left:.5in'>Adding, editing, and deleting transactions are good
candidates for events users can hook into.</p>

<p class=MsoNormal><i><span style='font-family:Arial;color:#990000'>Create
validation rules</span></i><span style='font-family:Arial'> </span></p>

<p style='margin-left:.5in'>Validation rules can get you closer to a robust accounting
system. With the right events to trap, users can produce their own rules to
ensure the validity of their data.</p>

<p class=MsoNormal><i><span style='font-family:Arial;color:#990000'>Create
user-defined queries</span></i><span style='font-family:Arial'> </span></p>

<p style='margin-left:.5in'>Some queries have been hardcoded into our system.
You can generalize this concept to specify the inputs and outputs to a query
and allow users to write their own. These would need some limitations, e.g.,
return a 2D array suitable for display in a grid.</p>

<p>If you start writing your application in a compiled language such as Visual
Basic, Delphi, or Visual C++, you’ll find it hard to add the macro capability.
Writing your own macro language is not a small task, and there is little point
when so many exist. Even if you decide to use Python as your macro language,
you still need to write a huge amount of code to bridge between, for example,
your Delphi objects and methods and your Python macros. However, we’ve written
the core of the application in Python already. This makes it easy to create an
extensible application. In the next few sections we’ll run through some of the
capabilities you can add to open up the application to users.</p>

<h3><a name="_8.1_Dynamic_Code_Evaluation"></a>8.1 Dynamic Code Evaluation</h3>

<p>With the right documentation, your users can already write Python scripts
that create and manipulate <tt><span style='font-size:10.0pt'>BookSet</span></tt>s
and <tt><span style='font-size:10.0pt'>Transaction</span></tt>s. However, these
scripts are totally detached from your browser application. What would be smart
to do is to provide a command window within the browser that works on the
current <tt><span style='font-size:10.0pt'>BookSet</span></tt>. If a user
creates a custom import function and runs it, he could hit an update key and
see the new records on the screen immediately.</p>

<h4>8.1.1 Executing Commands and Evaluating Expressions</h4>

<p>Python has built-in functions and statements to facilitate this dynamic code
evaluation: <tt><span style='font-size:10.0pt'>eval(</span></tt> <tt><i><span
style='font-size:10.0pt'>expression,</span></i></tt> <tt><i><span
style='font-size:10.0pt'>[globals[,</span></i></tt> <tt><i><span
style='font-size:10.0pt'>locals]]</span></i></tt><tt><span style='font-size:
10.0pt'>)</span></tt> is a built-in function that evaluates a string, and <tt><span
style='font-size:10.0pt'>exec</span></tt> <tt><i><span style='font-size:10.0pt'>expression,</span></i></tt>
<tt><i><span style='font-size:10.0pt'>[globals[,</span></i></tt> <tt><i><span
style='font-size:10.0pt'>locals]]</span></i></tt> is a statement (not a
function: no parentheses needed) that executes a string. The following
clarifies how it works:</p>

<pre>&gt;&gt;&gt; exec &quot;print 'this expression was compiled on the fly' &quot;</pre><pre>this expression was compiled on the fly</pre><pre>&gt;&gt;&gt; exec &quot;x = 3.14&quot;</pre><pre>&gt;&gt;&gt; eval(&quot;x + 1&quot;)</pre><pre>4.14</pre>

<p>Let’s pause for a moment and consider the implications of this code. You
could pass a chunk of text to a running Python application, and it’s parsed,
compiled, and executed on the fly. In Python, the interpreter is always
available. Few languages offer this capability, and it’s what makes Python a
good macro language.</p>

<div align=center>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 width="90%"
 style='width:90.0%'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <h3 align=center style='text-align:center'>Case Study: Formula Evaluation</h3>
  <p>In 1997, one of the authors was consulting for a large packaging company
  building a database of its packaging designs. A cardboard box has a certain
  geometry, which may be thought of as a collection of flat panels joined at
  the edges, with a series of folding instructions. The overwhelming majority
  of designs were for cuboid boxes. This allowed the length of a certain edge
  of a panel to be expressed as a formula such as “2L + 3.5W + T,” where L is
  the length of the product to be packed, W is the width, and T is the
  thickness of the board. Packaging designers all over Europe had been
  patiently entering formulae for each panel of a design into a database for
  months. An urgent need arose to verify these formulae. Using Python, it was a
  simple exercise to load a dictionary with the standard variables (<tt><span
  style='font-size:10.0pt'>L</span></tt>, <tt><span style='font-size:10.0pt'>W</span></tt>,
  <tt><span style='font-size:10.0pt'>H</span></tt>, <tt><span style='font-size:
  10.0pt'>T</span></tt>, and a few more for various flap lengths), plug in some
  numbers, and evaluate the expressions. Those cases that generated exceptions
  could be identified easily. A Python script was rapidly produced that queried
  the database and verified the integrity of all the strings. In addition to
  checking for errors, it produced a report listing standard panel sizes for a
  generic 400 × 400 × 400mm box. Meanwhile, the main development team spent a
  great deal of time looking for and eventually writing a library of their own
  to evaluate simple numeric expressions in PL/SQL.</p>
  </td>
 </tr>
</table>

</div>

<p>You may not have consciously absorbed this until a few lines back, but
Python distinguishes between expressions and statements. What happens if you
aren’t sure what the user wants and get it wrong? Here are two more examples:</p>

<pre>&gt;&gt;&gt; exec &quot;x+2&quot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # try to execute an expression - nothing happens</pre><pre>&gt;&gt;&gt; eval(&quot;print x+3&quot;)&nbsp; # and evaluate a command - causes an exception</pre><pre>Traceback (innermost last):</pre><pre>&nbsp; File &quot;&lt;interactive input&gt;&quot;, line 0, in ?</pre><pre>&nbsp; File &quot;&lt;string&gt;&quot;, line 1</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp; print x+3</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ^</pre><pre> SyntaxError: invalid syntax</pre><pre>&gt;&gt;&gt;</pre>

<p>Executing an expression is generally safe, but evaluating a statement causes
a syntax error. If the user gives a single line of input to process, and you
don’t know what it is, you can try to evaluate, then execute it if an exception
occurs.</p>

<p>The <tt><span style='font-size:10.0pt'>exec</span></tt> function accepts not
only single-line statements such as the previous example, but multiline ones as
well. These can range from a two-line loop command to print the numbers 1-10,
to a function definition, or even a 500-line class definition.</p>

<p>You may be wondering where the variable <tt><span style='font-size:10.0pt'>x</span></tt>
was stored in the previous examples. To understand this, you need to delve into
some Python internals. The previous console commands are executed in the <i>global
namespace</i> , which means that <tt><span style='font-size:10.0pt'>x</span></tt>
becomes a global variable. There is a function called <tt><span
style='font-size:10.0pt'>globals()</span></tt> that allows you to examine this
namespace directly; let’s see what it returns:</p>

<pre>&gt;&gt;&gt; # where is the 'x' kept?</pre><pre>&gt;&gt;&gt; for item in globals().items():</pre><pre>...&nbsp;&nbsp;&nbsp;&nbsp; print item</pre><pre>...&nbsp;&nbsp;&nbsp;&nbsp; </pre><pre>('__doc__', None)</pre><pre>('pywin', &lt;module 'pywin'&gt;)</pre><pre>('x', 3.14)</pre><pre>('__name__', '__main__')</pre><pre>('__builtins__', &lt;module '__builtin__'&gt;)</pre><pre>&gt;&gt;&gt;</pre>

<p>This seems scary, but look at the third line. The global namespace is just a
dictionary, and it has an entry called <tt><span style='font-size:10.0pt'>x</span></tt>
with value 3.14. It also has a few other bits and pieces you don’t need to
worry about at this point.</p>

<p>At this point we touch on a significant fact about Python: almost everything
is built out of dictionaries. Objects are implemented using dictionaries; their
keys are the method or attribute names stored as strings, and the values are
the attribute values and function objects themselves. Namespaces are
dictionaries, too. And when a chunk of code is evaluated, it’s internally
handed two dictionaries: one containing the global variables at that point in
time, the other containing the local variables to the current function or
method.</p>

<p>This detail is interesting to language lawyers, but it also has an immediate
practical payoff: you can design a namespace to suit yourself and execute the
user’s code in it. Specifically, you can modify the global namespace of the
Python process in your browser to include a variable called <tt><span
style='font-size:10.0pt'>TheBookSet</span></tt>, which refers to the currently
running <tt><span style='font-size:10.0pt'>BookSet</span></tt>, or you can
create an entirely new namespace in a fresh dictionary of your own.</p>

<p>The simplest demonstration of a COM server, which is included in PythonWin
in the file <i>Python\win32com\servers\interp.py</i>, creates a COM object
called <tt><span style='font-size:10.0pt'>Python.Interpreter</span></tt>. This
exposes two methods to execute and evaluate expressions, which can easily be
grafted onto any COM server. We want to build a console that lets the user do
both and returns any output, so we’ll merge them into one method called <tt><span
style='font-size:10.0pt'>interpretString()</span></tt>. This either executes or
evaluates the expression; if there is a return value, you hand a string representation
of it back to the user.</p>

<p>You also need to extend the <tt><span style='font-size:10.0pt'>__init_ _()</span></tt>
method of the <tt><span style='font-size:10.0pt'>BookServer</span></tt> to add
a namespace with the needed global variable. Here’s the new initialization code
and the new method to interpret a string:</p>

<pre>def __init__(self):</pre><pre>&nbsp;&nbsp;&nbsp; self.__BookSet = doubletalk.bookset.BookSet()</pre><pre>&nbsp;</pre><pre>&nbsp;&nbsp;&nbsp; # create a custom namespace for the user to work with</pre><pre>&nbsp;&nbsp;&nbsp; # with one variable name already defined</pre><pre>&nbsp;&nbsp;&nbsp; self.userNameSpace = {'TheBookServer', self.__BookSet}</pre><pre>&nbsp;</pre><pre>def interpretString(self, exp):</pre><pre>&nbsp;&nbsp;&nbsp; &quot;&quot;&quot;Makes it easier to build consoles.</pre><pre>&nbsp;&nbsp;&nbsp; &quot;&quot;&quot;</pre><pre>&nbsp;&nbsp;&nbsp; if type(exp) not in [type(''), UnicodeType]:</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; raise Exception(desc=&quot;Must be a string&quot;, \</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; scode=winerror.DISP_E_TYPEMISMATCH)</pre><pre>&nbsp;&nbsp;&nbsp; try: </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# first, we assume it's an expression</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; result_object = eval(str(exp), self.userNameSpace)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if result_object == None:</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ''</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else:</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return str(result_object)</pre><pre>&nbsp;&nbsp;&nbsp; except:</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #failing that, try to execute it</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; exec str(exp) in self.userNameSpace</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ''</pre>

<p>It’s necessary to add the statement <tt><span style='font-size:10.0pt'>from</span></tt>
<tt><span style='font-size:10.0pt'>pywintypes</span></tt> <tt><span
style='font-size:10.0pt'>import</span></tt> <tt><span style='font-size:10.0pt'>UnicodeType</span></tt>
at the beginning of the module. Note that the code accepts normal and Unicode
strings and raises helpful exceptions if the wrong kind of object is passed in.
Try to evaluate the string as an expression, then try to execute it as a
statement. If it causes an error, leave it unhandled so that the error message
can filter through to the VB user. Note that as we discuss in <a
href="#_Chapter_12._Advanced_Python_and_COM">Chapter 12</a>, leaving an
unhandled Python exception to propagate to the user of the object is not
considered good design, but is suitable for the purposes of this demonstration.</p>

<p>If there is a return value, convert it as a string. You could return it raw,
allowing <tt><span style='font-size:10.0pt'>eval()</span></tt> to potentially
return numbers and arrays, but there is a risk of a user expression returning
something VB doesn’t expect. The intention in this example is to get back a
printable string to show the user, so make sure the return type is always
either a string representation of the data or an empty string. </p>

<h4 style='page-break-after:avoid'>8.1.2 Grabbing Python's Output</h4>

<p>You now have the hooks to execute arbitrary strings of Python code, but you
can’t necessarily see the output. You need to implement one more feature first,
to capture Python’s standard output, so that <tt><span style='font-size:10.0pt'>print</span></tt>
statements in your users’ code show up properly. You might think this would
involve low-level Windows process control, but actually, Python knows how to
redirect its own output. If you enter the following statements in a Python
source file or the Python DOS prompt, any subsequent output (for example, <tt><span
style='font-size:10.0pt'>print</span></tt> statements) are redirected to a
file:</p>

<pre>&gt;&gt;&gt; import sys</pre><pre>&gt;&gt;&gt; mylogfile = open('c:\\temp\\mylog.txt', 'w')</pre><pre>&gt;&gt;&gt; sys.stdout = mylogfile</pre><pre>&gt;&gt;&gt;</pre>

<p>Output can be redirected to any Python object that offers a <tt><span
style='font-size:10.0pt'>write()</span></tt> method. The easiest way to grab
the output is to add just such a <tt><span style='font-size:10.0pt'>write()</span></tt>
method to our <tt><span style='font-size:10.0pt'>COMBookSet</span></tt> class,
which stores the standard output internally; provide another method to grab
this data from VB on demand; and start trapping the output when our instance of
<tt><span style='font-size:10.0pt'>COMBookSet</span></tt> starts. Here are the
needed extra methods:</p>

<pre>def beginTrappingOutput(self):</pre><pre>&nbsp;&nbsp;&nbsp; self.outputBuffer = []</pre><pre>&nbsp;&nbsp;&nbsp; self.old_output = sys.stdout</pre><pre>&nbsp;&nbsp;&nbsp; sys.stdout = self</pre><pre>&nbsp;&nbsp;&nbsp; </pre><pre>def write(self, expr):</pre><pre>&nbsp;&nbsp;&nbsp; &quot;&quot;&quot; this is an internal utility used to trap the output.</pre><pre>&nbsp;&nbsp;&nbsp; add it to a list of strings - this is more efficient</pre><pre>&nbsp;&nbsp;&nbsp; than adding to a possibly very long string.&quot;&quot;&quot;</pre><pre>&nbsp;&nbsp;&nbsp; self.outputBuffer.append(str(expr))</pre><pre>&nbsp;</pre><pre>def getStandardOutput(self):</pre><pre>&nbsp;&nbsp;&nbsp; &quot;Hand over output so far, and empty the buffer&quot;</pre><pre>&nbsp;&nbsp;&nbsp; text = string.join(self.outputBuffer, '')</pre><pre>&nbsp;&nbsp;&nbsp; self.outputBuffer = []</pre><pre>&nbsp;&nbsp;&nbsp; return text</pre><pre>&nbsp;</pre><pre>def endTrappingOutput(self):</pre><pre>&nbsp;&nbsp;&nbsp; sys.stdout = self.old_output</pre><pre>&nbsp;&nbsp;&nbsp; # return any more output</pre><pre>&nbsp;&nbsp;&nbsp; return self.getStandardOutput()</pre>

<p>Everything but <tt><span style='font-size:10.0pt'>write()</span></tt> is
exposed as a COM public method. When VB creates the server, add a line to call <tt><span
style='font-size:10.0pt'>TheBookServer.beginTrappingOutput()</span></tt>.</p>

<p>A word of warning at this point: you aren’t the only person interested in
Python’s standard output. In <a
href="16.htm#_Chapter_12._Advanced_Python_and_COM">Chapter 12</a>, you’ll learn
about the Trace Collector debugging tool. This is a feature of PythonWin that
enables you to debug your COM server while calling it from VB; we used it quite
a bit in writing this chapter. If you’ve registered your COM server for
debugging, all the output that should have gone to the Trace Collector shows up
in your console window. That’s why we’ve provided some explicit methods to
start and stop trapping, rather than just to start trapping when the <tt><span
style='font-size:10.0pt'>COMBookSet</span></tt> initializes and leaving it on
forever.</p>

<h4>8.1.3 Building an Interactive Console</h4>

<p>Now we have everything needed to create a basic interactive console. We
implemented this as an extra child window with a one-line text box for input
and a multiline, uneditable text box for output. When the user inputs an
expression, the VB console form executes the commands <tt><span
style='font-size:10.0pt'>TheBookServer.interpretString (<i>expression</i>)</span></tt>
to get the return value and <tt><span style='font-size:10.0pt'>TheBookServer.getStandardOutput</span></tt>
to retrieve any output that was generated. It then assembles these together
into one chunk of text and appends this to the output text box. <a
href="#_Figure_8.1._A_crude_Python_console">Figure 8.1</a> is an example of our
console in action.</p>

<h5 align=center style='text-align:center'><a
name="_Figure_8.1._A_crude_Python_console"></a>Figure 8.1. A crude Python console</h5>

<p class=MsoNormal align=center style='text-align:center'><span
style='font-family:Arial'><img border=0 width=502 height=398
src="images\image027.gif" alt="figs/ppw.0801.gif"></span></p>

<p>Note you have full access to the data of your running server and can modify
its data. You can also create your own variables and generally do anything you
can from a regular Python console.</p>

<h4>8.1.4 Industrial-Strength Consoles</h4>

<p>The previous console is extremely simple and allows only one statement at a
time. Ideally, something like the interactive prompt in PythonWin would be
preferable. There is actually quite a lot of work involved in writing such a
window, and we won’t go through the code to do it here. As text is entered a
line at a time, your interpreter window needs to decide if it’s a complete
expression and when to process the input, as well as suggest indent levels for
subsequent lines, and so on. The event-handling depends a great deal on the
type of GUI widget used to build the console.</p>

<p>If you want to build such a console, look at the file <i>code.py</i> in the
standard Python library. This contains a function called <tt><span
style='font-size:10.0pt'>interact()</span></tt> that defines an interactive
console written in Python. It needs adapting, but shows the general approach;
as each line is entered, it tries to evaluate the current text buffer, and
assumes the statement is incomplete if it gets an error. You could modify this
to provide hooks for your VB console. <i>Code.py</i> is used by both IDLE and
Pythonwin to emulate the Python interactive mode.</p>

<h4>8.1.5 Executing Scripts</h4>

<p>Quite often the user wants to execute simple scripts. If the user has
created a simple script in a file on disk, it can be run with the built-in
function <tt><span style='font-size:10.0pt'>execfile (</span></tt> <tt><i><span
style='font-size:10.0pt'>file[,</span></i></tt> <tt><i><span style='font-size:
10.0pt'>globals[,</span></i></tt> <tt><i><span style='font-size:10.0pt'>locals]]</span></i></tt><tt><span
style='font-size:10.0pt'>)</span></tt>. This is broadly equivalent to the <tt><span
style='font-size:10.0pt'>exec</span></tt> statement discussed earlier, except
that it’s a function, and it takes <tt><span style='font-size:10.0pt'>filename</span></tt>
as an argument, processing the entire contents. To expose this, we’ve
implemented a new method of <tt><span style='font-size:10.0pt'>COMBookSet</span></tt><i>,
</i>which takes the filename as a single argument, and calls <tt><span
style='font-size:10.0pt'>execfile(<i>filename</i>,</span></tt> <tt><i><span
style='font-size:10.0pt'>self.userNameSpace</span></i></tt><tt><span
style='font-size:10.0pt'>)</span></tt>:</p>

<pre>def execFile(self, filename):</pre><pre>&nbsp;&nbsp;&nbsp; if type(filename) not in [type(''), UnicodeType]:</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; raise Exception(desc=&quot;Must be a string&quot;, \</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; scode=winerror.DISP_E_TYPEMISMATCH)</pre><pre>&nbsp;&nbsp;&nbsp; execfile(str(filename), self.userNameSpace)</pre>

<p>VB provides a rich-text editor component that makes it easy to create an
editor, so we’ve added yet another form to our application called <i>frmScriptEditor</i>
. This has a single editing region and a menu. We provided menu options to open
and save files, and it keeps track of the filename and whether the text has
changed. We won’t cover those functions here. It also has a menu option to run
a script, which is straightforward to implement:</p>

<pre>Private Sub mnuScriptRun_Click()</pre><pre>&nbsp;&nbsp;&nbsp; mnuScriptSave_Click</pre><pre>&nbsp;&nbsp;&nbsp; If Saved Then</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; On Error GoTo mnuScriptRun_Error</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; frmMain.BookServer.execFile FileName</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; On Error GoTo 0</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; frmConsole.UpdateOutput</pre><pre>&nbsp;&nbsp;&nbsp; End If</pre><pre>&nbsp;&nbsp;&nbsp; Exit Sub</pre><pre>&nbsp;&nbsp;&nbsp; </pre><pre>mnuScriptRun_Error:</pre><pre>&nbsp;&nbsp;&nbsp; MsgBox &quot;Error running script:&quot; + vbCrLf + vbCrLf + Err.Description</pre><pre>End Sub</pre>

<p>We handle errors, since the user is bound to make some at some stage, and
ask the console window to display any new output afterwards. The user interface
checks that any script is saved before running it, since we need to execute a
file on disk. <a href="11.htm#_Figure_8.2._A_script_running_under_">Figure 8.2</a>
is a basic script in action, querying the running <tt><span style='font-size:
10.0pt'>BookSet</span></tt> and producing some console output.</p>

<h5 align=center style='text-align:center'><a
name="_Figure_8.2._A_script_running_under_"></a>Figure 8.2. A script running
under our control</h5>

<p class=MsoNormal align=center style='text-align:center'><span
style='font-family:Arial'><img border=0 width=502 height=425
src="images\image028.gif" alt="figs/ppw.0802.gif"></span></p>

<h4>8.1.6 Importing a Module</h4>

<p>The difference between importing a module and running a script is that a
module object is created in memory with a name you can access. All the
functions and classes defined in the module go into the newly created
namespace. When executing a script, all code is executed in the global
namespace. You could let the user import modules by typing <tt><span
style='font-size:10.0pt'>import</span></tt> <tt><span style='font-size:10.0pt'>foo</span></tt>
in a console, or even in a script executed in this manner. However, there are
some benefits to exposing this in the user interface. For example, you could
save a list of standard imports for each user in the registry as a
configuration variable and import those modules every time the application
starts up. To do this, let’s take a look at Python’s import mechanism, which
gives fine-grained control of how modules are created.</p>

<p>The library module <tt><span style='font-size:10.0pt'>imp</span></tt>
exposes Python’s import mechanism. This includes functions to search the Python
path for modules, and to load modules once located. Let’s say you create a
simple module in the file <i>c:\temp\import\temp.py</i> that defines one
function called <tt><span style='font-size:10.0pt'>func(<i>x</i>)</span></tt>.
If you want to use this from PythonWin, ensure it’s on the path and type <tt><span
style='font-size:10.0pt'>import</span></tt> <tt><span style='font-size:10.0pt'>temp</span></tt>.
Within a custom application, you can often drop to a lower level of detail and
customize the details of this process. For example, the text for a module might
be a compiled resource in the program rather than a file on disk, and you might
want to swap different source files in and out under the same module name.
Let’s look at what happens behind the scenes of an import by recreating the
steps manually.</p>

<p>First, Python looks for it with the <tt><span style='font-size:10.0pt'>find_module</span></tt>
function:</p>

<pre>&gt;&gt;&gt; import imp</pre><pre>&gt;&gt;&gt; found = imp.find_module('temp', ['c:\\temp\\import'])</pre><pre>&gt;&gt;&gt; found</pre><pre>(&lt;open file 'c:\temp\import\temp.py', mode 'r' at 1078200&gt;, 'c:\\temp\\import\\temp.py', ('.py', 'r', 1))</pre><pre>&gt;&gt;&gt;</pre>

<p><tt><span style='font-size:10.0pt'>find_module</span></tt> takes a list of
locations to search as an optional second argument; if this is omitted, it
searches <tt><span style='font-size:10.0pt'>sys.path</span></tt>. Thus, by
taking control of the import mechanism, you can keep a separation between your
Doubletalk code locations and your general Python code; such a separation is
useful in a production application. If successful, it returns an open file
handle to the module file, the full pathname, and some background information
about the file.</p>

<p>The next step is to call <tt><span style='font-size:10.0pt'>load_module</span></tt>
, which lets you control what the module gets called. The arguments to this are
the name to give the module in your namespace, and the three return values from
the previous function. This returns a module object you can manipulate further:</p>

<pre>&gt;&gt;&gt; mymodule = imp.load_module('temp', found[0], found[1], found[2])</pre><pre>&gt;&gt;&gt; mymodule</pre><pre>&lt;module 'temp'&gt;</pre><pre>&gt;&gt;&gt;</pre>

<p>If the module contains errors, it raises an exception, and the file handle
in <tt><span style='font-size:10.0pt'>found[0]</span></tt> is left open. Your
code should use a <tt><span style='font-size:10.0pt'>try</span></tt>... <tt><span
style='font-size:10.0pt'>finally</span></tt>... block that closes the file
afterwards.</p>

<p>A module object is like any other Python object. Let’s put this one in the
global namespace as usual:</p>

<pre>&gt;&gt;&gt; globals()['temp'] = mymodule</pre><pre>&gt;&gt;&gt; temp.func('blah')</pre><pre>'blahblah'</pre><pre>&gt;&gt;&gt;</pre>

<p>You now have a module object in memory and can call its functions.</p>

<p>Armed with this knowledge, you can add a menu option to your script editor
to import a script and make sure it’s available in the right namespace for
users: the dictionary <tt><span style='font-size:10.0pt'>userNameSpace</span></tt>
in <tt><span style='font-size:10.0pt'>COMBookSet</span></tt>. As usual, expose
a public method in <tt><span style='font-size:10.0pt'>COMBookSet</span></tt>:</p>

<pre>def importFile(self, fullpathname):</pre><pre>&nbsp;&nbsp;&nbsp; #import as the filename</pre><pre>&nbsp;&nbsp;&nbsp; import imp</pre><pre>&nbsp;&nbsp;&nbsp; path, filename = os.path.split(str(fullpathname))</pre><pre>&nbsp;&nbsp;&nbsp; root, ext = os.path.splitext(filename)</pre><pre>&nbsp;&nbsp;&nbsp; found = imp.find_module(root, [path])&nbsp; #takes a list of files</pre><pre>&nbsp;&nbsp;&nbsp; if found:</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;(file, pathname, description) = found</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try:</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; module = imp.load_module(root, file, pathname, description)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # ensure it's visible in our namespace</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.userNameSpace[root] = module</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print 'loaded module', root</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; finally:</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; file.close()</pre><pre>&nbsp;&nbsp;&nbsp; else:</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print 'file not found'</pre>

<p>Note that this takes the name from the filename and adds it to <tt><span
style='font-size:10.0pt'>userNameSpace</span></tt>. The VB script <tt><span
style='font-size:10.0pt'>import</span></tt> command looks like the earlier one
for <tt><span style='font-size:10.0pt'>execFile</span></tt>, but calls <tt><span
style='font-size:10.0pt'>importFile</span></tt> instead. Users can now edit
scripts and choose both Script <img border=0 width=20 height=16
src="images\image008.gif" alt="figs/U2192.gif">Run and
Script <img border=0 width=20 height=16
src="images\image008.gif" alt="figs/U2192.gif">Import from
the menu as they can in PythonWin and access the functions created from the
console.</p>

<h4>8.1.7 Providing a Startup Script</h4>

<p>A useful customization is to allow an option for a startup script. The
script could be a standard, hardcoded filename or a configuration variable.
Users can do almost anything with this script; they can put in a series of
standard import statements, go off and import commonly used data files from
elsewhere, and (as we’ll see) set up the <tt><span style='font-size:10.0pt'>BookSet</span></tt>
as they want with validation rules and custom views. The script executes after
the <tt><span style='font-size:10.0pt'>BookSet</span></tt> has been
initialized, so it can’t control the way <tt><span style='font-size:10.0pt'>BookSet</span></tt>
initializes.</p>

<p>This feature is easy to provide with the tools we’ve just built. In <a
href="#_Figure_8.3._Specifying_a_startup_sc">Figure 8.3</a>, we’ve gone for a
user-defined script name in an Options dialog.</p>

<h5 align=center style='text-align:center'><a
name="_Figure_8.3._Specifying_a_startup_sc"></a>Figure 8.3. Specifying a
startup script from the client</h5>

<p class=MsoNormal align=center style='text-align:center'><span
style='font-family:Arial'><img border=0 width=502 height=188
src="images\image029.gif" alt="figs/ppw.0803.gif"></span></p>

<p>Earlier on we put two public methods in <tt><span style='font-size:10.0pt'>frmMain</span></tt>
called <tt><span style='font-size:10.0pt'>InitCOMServer</span></tt> and <tt><span
style='font-size:10.0pt'>CloseCOMServer</span></tt> , and never used the
latter. Here there’s a good use for it. <tt><span style='font-size:10.0pt'>InitCOMServer</span></tt>
has been expanded as follows (ignoring error trapping to save space):</p>

<pre>Sub InitCOMServer()</pre><pre>&nbsp;&nbsp;&nbsp; Dim startupScript As String</pre><pre>&nbsp;&nbsp;&nbsp; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;'called when the program starts</pre><pre>&nbsp;&nbsp;&nbsp; On Error GoTo InitCOMServer_error</pre><pre>&nbsp;&nbsp;&nbsp; Set BookServer = CreateObject(&quot;Doubletalk.BookServer&quot;)</pre><pre>&nbsp;&nbsp;&nbsp; On Error GoTo 0</pre><pre>&nbsp;&nbsp;&nbsp; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;'tell it to capture output for the console</pre><pre>&nbsp;&nbsp;&nbsp; BookServer.beginTrappingOutput</pre><pre>&nbsp;&nbsp;&nbsp; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;'if there is an init script, run it</pre><pre>&nbsp;&nbsp;&nbsp; If frmOptions.txtStartupScript.text &lt;&gt; &quot;&quot; Then</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; On Error GoTo InitCOMServer_StartupScriptError</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BookServer.execFile frmOptions.txtStartupScript.text</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; On Error GoTo 0</pre><pre>&nbsp;&nbsp;&nbsp; End If</pre><pre>&nbsp;&nbsp;&nbsp; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;'grab any standard output for the console</pre><pre>&nbsp;&nbsp;&nbsp; frmConsole.UpdateOutput</pre><pre>&nbsp;&nbsp;&nbsp; Exit Sub</pre>

<p>Test to see if there is a startup script and run it under an error handler
if there is. Then tell the console to fetch any standard output.</p>

<p>We’ve also provided a button titled Reload BookServer Now. This one just
shuts down and restarts the server (losing any running data):</p>

<pre>Private Sub cmdReload_Click()</pre><pre>&nbsp;&nbsp;&nbsp; Dim Proceed As Boolean</pre><pre>&nbsp;&nbsp;&nbsp; If frmMain.BookServer.count &gt; 0 Then</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If MsgBox(&quot;You have data in the BookServer which will be &quot; + _</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;lost. Proceed?&quot;, vbOKCancel, &quot;Warning&quot;) = vbCancel Then</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Exit Sub</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If</pre><pre>&nbsp;&nbsp;&nbsp; End If</pre><pre>&nbsp;&nbsp;&nbsp; frmConsole.Clear</pre><pre>&nbsp;&nbsp;&nbsp; frmMain.CloseCOMServer</pre><pre>&nbsp;&nbsp;&nbsp; frmMain.InitCOMServer&nbsp; 'this calls the script</pre><pre>&nbsp;&nbsp;&nbsp; frmMain.UpdateAllViews</pre><pre>&nbsp;&nbsp;&nbsp; Beep</pre><pre>&nbsp;&nbsp;&nbsp; </pre><pre>End Sub</pre>

<p>The user now has a startup script that allows almost limitless
customization. We haven’t implemented a place to save this script; the choices
are generally the registry or an INI file.</p>

<div align=center>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 width="90%"
 style='width:90.0%;background:black'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 width="100%"
   style='width:100.0%;background:white'>
   <tr>
    <td width=60 valign=top style='width:45.0pt;padding:4.5pt 4.5pt 4.5pt 4.5pt'>
    <p class=MsoNormal><span style='font-family:Arial'><img border=0 width=50
    height=54 src="images\image002.gif"></span></p>
    </td>
    <td valign=top style='padding:4.5pt 4.5pt 4.5pt 4.5pt'>
    <p>A Reload button is extremely useful. During development, we frequently
    switched between Python and Visual Basic. After changing any Python code,
    it was originally necessary to shut down and restart the VB application.
    After implementing this button, it took just one click to start exploring
    any new Python code. </p>
    </td>
   </tr>
  </table>
  <p class=MsoNormal></p>
  </td>
 </tr>
</table>

</div>

<h4>8.1.8 Defining User and System-Code Directories</h4>

<p>This section doesn’t discuss a feature, it’s just a recommendation. Your
application and documentation should define clearly where the main source
package lives (e.g., <i>C:\Program Files\Doubletalk\Source</i>) and where
users’ code should go (e.g., <i>C:\Program Files\Doubletalk\UserSource</i>).
The application should add the latter directory to the path when starting, and
suggest it as the default location for any user scripts if you provide a script
editor.</p>

<h3><a name="_8.2_Making_an_Application_Extensibl"></a>8.2 Making an
Application Extensible</h3>

<p>We’ve built all the tools you need to provide the user with a macro
language. We’ll now look at ways to let users extend the object model. Exactly
what you choose to make extensible depends a great deal on the application.</p>

<p>In the case of the Doubletalk browser, we’d like to add two new
capabilities. We want to trap certain events occurring in the <tt><span
style='font-size:10.0pt'>BookSet</span></tt> and allow users to write code to
respond, and we’d like to let users write their own views.</p>

<p>Bear in mind that from now on we are talking about power users, who are
presumed to have some programming experience or at least aptitude. With a
well-documented object model, their task should be easier in Python than in
other languages; but they still have the ability to create bugs and damage
data. We’ll try to structure the application in a way that keeps users away
from critical code and keeps it simple.</p>

<h4>8.2.1 Changing the Delegate Class</h4>

<p>It’s useful to specify in another option what class to use in the place of
the <tt><span style='font-size:10.0pt'>BookSet</span></tt>. Imagine variations
of <tt><span style='font-size:10.0pt'>BookSet</span></tt> that fetch data from
a relational database and commit each record as it’s edited, or that perform
some degree of caching to answer certain queries quickly.</p>

<p>Changing the base class involves a lot of development and testing and is not
easy to do on the fly. However, it’s possible to arrange things so that a
user-written module is consulted to determine the delegate class at startup.</p>

<p>If you distribute your core application as source, the users can always
create a subclass to do what they want. However, subclassing involves a lot of
work; users must ensure that their new <tt><span style='font-size:10.0pt'>BookSet</span></tt><i>
</i>subclass still does everything the <tt><span style='font-size:10.0pt'>COMBookSet</span></tt><i>
</i>class expects. While possible, this pattern is not really recommended for a
complex class like <tt><span style='font-size:10.0pt'>BookSet</span></tt>.</p>

<h4>8.2.2 A Delegation Framework for Responding to Events</h4>

<p>There are four events in the <tt><span style='font-size:10.0pt'>BookSet</span></tt>
API that allow modification: adding, editing, and deleting transactions, and
renaming accounts. For each of these, you should provide a hook called before
the event that gives the user a chance to modify the data or cancel the action
altogether and another hook called after the event that allows the user to
update other variables elsewhere.</p>

<p>Rather than have the user write numerous disconnected functions or subclass
the entire <tt><span style='font-size:10.0pt'>BookSet</span></tt>, you can use
a pattern known as a <i>delegate</i> . A delegate is a helper object a class
informs of various events: it delegates certain responsibilities. The
delegation mechanism was a cornerstone of the almost legendary NeXTStep
development environment and is widely used behind the scenes in Delphi, where
each component delegates the task of responding to events to its parent form. A
delegate is typically much simpler than the class it’s supporting. Users will
find it far less work to write their own delegates to achieve a task than to
rewrite or subclass the entire <tt><span style='font-size:10.0pt'>BookSet</span></tt>.</p>

<h4>8.2.3 Views and Validators</h4>

<p>The notifications before the event are intended to validate data, and the
notifications after the event can maintain custom views. Accordingly, we define
two types of delegate:</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>A <tt><span style='font-size:10.0pt'>Validator</span></tt> is an object
a <tt><span style='font-size:10.0pt'>BookSet</span></tt> notifies before
changing data, asking for permission to proceed.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-family:Symbol'>·</span><span
style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>A
<tt><span style='font-size:10.0pt'>View</span></tt> is an object the <tt><span
style='font-size:10.0pt'>BookSet</span></tt> notifies after changes have been
made.<a name="_ftnref5"></a><a href="#_ftn5"><span class=atitlechar><sup><span
style='font-size:9.0pt'>[1]</span></sup></span></a><span style='font-size:7.5pt'>
</span>It also has a method to return a 2D array of data on demand, which
contains whatever users wish.</p>

<p>It was traditional until recently to have just one delegate for an object.
Some Java development environments allow a list of delegates that can be added
and removed at runtime, and we’ve borrowed this pattern. We could also have
built a more complex delegate that combined the functions of <tt><span
style='font-size:10.0pt'>Validator</span></tt> and <tt><span style='font-size:
10.0pt'>View</span></tt>, but this seemed a better fit to our goals for the
users.</p>

<p>For each delegate, youshould provide a base class users can subclass. You should
also define a subclass of <tt><span style='font-size:10.0pt'>BookSet</span></tt>
that can use them. All this code can be found in the module <tt><span
style='font-size:10.0pt'>doubletalk.userhooks</span></tt> , which also includes
examples of <tt><span style='font-size:10.0pt'>Validator</span></tt>s and <tt><span
style='font-size:10.0pt'>View</span></tt>s. Here’s the definition of a <tt><span
style='font-size:10.0pt'>View</span></tt>:</p>

<pre>class View:</pre><pre>&nbsp;&nbsp;&nbsp; &quot;&quot;&quot;This delegate is informed of all changes after they occur,</pre><pre>&nbsp;&nbsp;&nbsp; and returns a 2d array of data when asked.&quot;&quot;&quot;</pre><pre>&nbsp;&nbsp;&nbsp; def setBookSet(self, aBookSet):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.BookSet = aBookSet</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.recalc()</pre><pre>&nbsp;</pre><pre>&nbsp;&nbsp;&nbsp; def getDescription(self):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 'abstract base class for Views'</pre><pre>&nbsp;&nbsp;&nbsp; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;# hooks for notification after the event</pre><pre>&nbsp;&nbsp;&nbsp; def didAdd(self, aTransaction):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pass</pre><pre>&nbsp;&nbsp;&nbsp; def didEdit(self, index, newTransaction):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pass</pre><pre>&nbsp;&nbsp;&nbsp; def didRemove(self, index):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pass</pre><pre>&nbsp;&nbsp;&nbsp; def didRenameAccount(self, oldname, newname):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pass</pre><pre>&nbsp;&nbsp;&nbsp; def didChangeDrastically(self):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #can be used to notify of major changes such as file/open</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.recalc()</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;def recalc(self):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #override this to work out the data</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pass</pre><pre>&nbsp;&nbsp;&nbsp; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;def getData(self):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return [()]&nbsp; # simple 2D array for display</pre>

<p>The <tt><span style='font-size:10.0pt'>View</span></tt> receives a <tt><span
style='font-size:10.0pt'>SetBookset</span></tt> call when hooked up, triggering
a recalculation. At this point it probably walks through the entire <tt><span
style='font-size:10.0pt'>BookSet</span></tt>, gathering the data it needs, in
the same way the existing query methods did in <tt><span style='font-size:10.0pt'>BookSet</span></tt>.</p>

<p>The <tt><span style='font-size:10.0pt'>View</span></tt> provides five
notification methods for the <tt><span style='font-size:10.0pt'>BookSet</span></tt>
to call with changes; the user won’t call these directly. Define the four
changes identified earlier and allow for one more (<tt><span style='font-size:
10.0pt'>didChangeDrastically</span></tt>) that can be called after, for
example, opening a new data file, which triggers a full recalculation. These
allow the <tt><span style='font-size:10.0pt'>View</span></tt> to update its
data intelligently and efficiently in response to changes.</p>

<p><tt><span style='font-size:10.0pt'>Validator</span></tt>s look similar, but
respond to calls such as <tt><span style='font-size:10.0pt'>self.mayAdd
(transaction)</span></tt>. If the call returns zero (<tt><span
style='font-size:10.0pt'>false</span></tt>), the action is rejected. <tt><span
style='font-size:10.0pt'>View</span></tt>s are just notified of changes and
don’t have to return anything.</p>

<p>Let’s look at our new <tt><span style='font-size:10.0pt'>UserBookSet</span></tt><i>
</i>class, which knows what to do with <tt><span style='font-size:10.0pt'>View</span></tt>s
and <tt><span style='font-size:10.0pt'>Validator</span></tt>s. Here’s how to
initialize it, add <tt><span style='font-size:10.0pt'>View</span></tt>s, and
fetch their data later:</p>

<pre>class UserBookSet(BookSet):</pre><pre>&nbsp;&nbsp;&nbsp; def __init__(self):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BookSet.__init__(self)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.validators = []</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.validator_lookup = {}</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.views = []</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.view_lookup = {}</pre><pre>&nbsp;</pre><pre>&nbsp;&nbsp;&nbsp; def listDelegates(self):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # utility to tell us what's hooked up</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [details omitted to save space]</pre><pre>&nbsp;&nbsp;&nbsp; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;def addView(self, aView):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #put it in both a list and a dictionary</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # join them together</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.views.append(aView)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.view_lookup[aName] = aView</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; aView.setBookSet(self)</pre><pre>&nbsp;</pre><pre>&nbsp;&nbsp;&nbsp; def getViewData(self, aName):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return self.view_lookup[aName].getData()</pre>

<p><tt><span style='font-size:10.0pt'>View</span></tt>s are added with a name
the user specifies. The <tt><span style='font-size:10.0pt'>View</span></tt>
goes in both a list and a dictionary, allowing you to iterate over the list of <tt><span
style='font-size:10.0pt'>View</span></tt>s and to quickly access individual <tt><span
style='font-size:10.0pt'>View</span></tt>s by name. You can then ask the <tt><span
style='font-size:10.0pt'>UserBookSet</span></tt> to return the data for any of
its <tt><span style='font-size:10.0pt'>View</span></tt>s. There is a broadly
similar method to add a <tt><span style='font-size:10.0pt'>Validator</span></tt>.</p>

<p>Now we’ll override the methods of <tt><span style='font-size:10.0pt'>BookSet</span></tt>
that may modify data. Here’s the new method in <tt><span style='font-size:10.0pt'>UserBookSet</span></tt>
to add a transaction:</p>

<pre>def add(self, tran):</pre><pre>&nbsp;&nbsp;&nbsp; for v in self.validators:</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if not v.mayAdd(tran):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # rejected, stop</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;#call the inherited method</pre><pre>&nbsp;&nbsp;&nbsp; BookSet.add(self, tran)</pre><pre>&nbsp;</pre><pre>&nbsp;&nbsp;&nbsp; # notify them all</pre><pre>&nbsp;&nbsp;&nbsp; for v in self.views:</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; v.didAdd(tran)</pre>

<p>This code says, “Ask all the loaded <tt><span style='font-size:10.0pt'>Validator</span></tt>s
for permission before adding the transaction to the <tt><span style='font-size:
10.0pt'>BookSet</span></tt>. Then after adding it, tell each <tt><span
style='font-size:10.0pt'>View</span></tt>.” Similar methods have been written
for <tt><span style='font-size:10.0pt'>edit</span></tt>, <tt><span
style='font-size:10.0pt'>remove</span></tt>, and <tt><span style='font-size:
10.0pt'>renameAccount</span></tt>.</p>

<p>Finally, if you want to commit to this new architecture, change the <tt><span
style='font-size:10.0pt'>__init__</span></tt> method for <tt><span
style='font-size:10.0pt'>COMBookSet</span></tt> to create a <tt><span
style='font-size:10.0pt'>UserBookSet</span></tt> instead of a <tt><span
style='font-size:10.0pt'>BookSet</span></tt>.</p>

<h4>8.2.4 A User-Defined View: The Backend</h4>

<p>Now we can write a new <tt><span style='font-size:10.0pt'>View</span></tt>,
a simple one that keeps track of the month-end balances of an account. The
array has two columns; the first entry to show year and month, and the second
the month-end balance. For a two-year data file, you thus get back about 24
rows:</p>

<pre>class MonthlyAccountActivity(View):</pre><pre>&nbsp;&nbsp;&nbsp; &quot;&quot;&quot;Keeps track of activity in an account.&nbsp; Does</pre><pre>&nbsp;&nbsp;&nbsp; smart recalculations.&quot;&quot;&quot;</pre><pre>&nbsp;&nbsp;&nbsp; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;def __init__(self, anAccount):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.account = anAccount</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.balances = doubletalk.datastruct.NumDict()</pre><pre>&nbsp;&nbsp;&nbsp; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;def getDescription(self):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 'Month end balances for ' + self.account</pre><pre>&nbsp;&nbsp;&nbsp; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;def didAdd(self, tran):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; effect = tran.effectOn(self.account)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if effect == 0:</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else:</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #year and month as the key</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; yymm = time.gmtime(tran.date)[0:2]</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.balances.inc(yymm, effect)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print 'added %s, %0.2f' % (yymm, effect)</pre><pre>&nbsp;&nbsp;&nbsp; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;def didRemove(self, index):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tran = self.BookSet[index]</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.didAdd(-tran)&nbsp;&nbsp; #invert and add</pre><pre>&nbsp;&nbsp;&nbsp; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;def didEdit(self, index, newTran):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; oldTran = self.BookSet[index]</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.didAdd(-oldTran)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.didAdd(newTran)</pre><pre>&nbsp;&nbsp;&nbsp; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;def didChangeDrastically(self):</pre><pre>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;self.recalc()</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;def recalc(self):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;Do it all quickly in one pass&quot;&nbsp;&nbsp;&nbsp; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.balances.clear()</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for tran in self.BookSet:</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; yymm = time.gmtime(tran.date)[0:2]</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (acct, amount, etc) in tran.lines:</pre><pre> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if acct == self.account:</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.balances.inc(yymm, amount)</pre><pre>&nbsp;&nbsp;&nbsp; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;def getData(self):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # numdict returns it all sorted; just need to format</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # the date column</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; formatted = []</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (period, balance) in self.balances.items():</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (year, month) = period&nbsp; #unpack tuple...</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; monthname = doubletalk.dates.SHORT_MONTHS[month-1]</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; displayDate = monthname + '-'&nbsp; + str(year)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; formatted.append((displayDate,balance))</pre><pre>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return formatted</pre>

<p>This should be fairly straightforward for users to produce. The <tt><span
style='font-size:10.0pt'>recalc()</span></tt> method works it all out in five
lines, using the <tt><span style='font-size:10.0pt'>NumDict</span></tt> utility
class to categorize the numbers. When a single transaction is added, <tt><span
style='font-size:10.0pt'>recalc()</span></tt> tests if the transaction affects
the account; if not, no work is needed. If so, it just changes one entry in the
<tt><span style='font-size:10.0pt'>NumDict</span></tt>.The methods for the
other events are repetitive but similar. When the user requests the data from
the GUI, the only work needed is to retrieve and sort a list of 24 items, which
should happen almost instantaneously.</p>

<p><i>userhooks.py</i> contains a test routine that can be called from a Python
console to verify that the <tt><span style='font-size:10.0pt'>UserBookSet</span></tt>
and <tt><span style='font-size:10.0pt'>View</span></tt> are working correctly.</p>

<h4>8.2.5 A User-Defined View: The Front End</h4>

<p>Now how do you look at <tt><span style='font-size:10.0pt'>View</span></tt>
in the interface? Once again, you need to extend <tt><span style='font-size:
10.0pt'>COMBookSet</span></tt>. First, change its initializer so that it
creates a <tt><span style='font-size:10.0pt'>UserBookSet</span></tt> instead of
a <tt><span style='font-size:10.0pt'>BookSet</span></tt><i>.</i> Second, expose
a method called <tt><span style='font-size:10.0pt'>getViewData()</span></tt>
that calls the underlying method of <tt><span style='font-size:10.0pt'>BookSet</span></tt>.
It’s easiest to create and add the <tt><span style='font-size:10.0pt'>View</span></tt>
with a short chunk of Python script:</p>

<pre>from doubletalk.userhooks import MonthlyAccountActivity</pre><pre>view = MonthlyAccountActivity('MyCo.Assets.NCA.CurAss.Cash')</pre><pre>TheBookSet.addView(v, 'CashBalances')</pre>

<p>The Rolls Royce approach would be to build this on the fly after letting
users select view types and parameters from a menu; however, this means having
some sort of configuration dialog for each <tt><span style='font-size:10.0pt'>View</span></tt>.
At a more basic level, power users writing their own <tt><span
style='font-size:10.0pt'>View</span></tt>s could write this code themselves and
put it in a start-up script.</p>

<p>Having done this, all you have to do is build a generic form with a grid.
This keeps track of its name and fetches the <tt><span style='font-size:10.0pt'>View</span></tt>
data (and a description) when asked. The next section presents a user-defined <tt><span
style='font-size:10.0pt'>View</span></tt> of the monthly cash balances. See <a
href="#_Figure_8.4._A_user-defined_View">Figure 8.4</a>.</p>

<h5 align=center style='text-align:center'><a
name="_Figure_8.4._A_user-defined_View"></a>Figure 8.4. A user-defined View</h5>

<p class=MsoNormal align=center style='text-align:center'><span
style='font-family:Arial'><img border=0 width=502 height=424
src="images\image030.gif" alt="figs/ppw.0804.gif"></span></p>

<h4>8.2.6 User-Defined Validations</h4>

<p>Imagine you’re building a set of year-end accounts, repeatedly importing
data from several sources and making manual edits. It all has to be perfect,
and it’s 2:00 a.m. You think you have the first half of the year sorted out and
accidentally enter a transaction dated October 1998 instead of October 1999. It
doesn’t show up in the <tt><span style='font-size:10.0pt'>View</span></tt> you
are looking at, so you enter it again and make other corrections elsewhere
based on your erroneous account balances. If you are unlucky, you could waste
hours finding the error and unravelling all the dependent changes (One author
knows this all too well). The <i>userhooks</i> file also defines a sample <tt><span
style='font-size:10.0pt'>Validator</span></tt> that puts a time lock on the <tt><span
style='font-size:10.0pt'>BookSet</span></tt>; this prevents any changes before
a cutoff date. Here’s the code:</p>

<pre>class DateWindowValidator(Validator):</pre><pre>&nbsp;&nbsp;&nbsp; &quot;&quot;&quot;An example.&nbsp; Prevents changes on or before a certain date</pre><pre>&nbsp;&nbsp;&nbsp; locking the bookset&quot;&quot;&quot;</pre><pre>&nbsp;</pre><pre>&nbsp;&nbsp;&nbsp; def __init__(self, aDescription, aDate):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Validator.__init__(self, aDescription)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.cutoff = aDate</pre><pre>&nbsp;&nbsp;&nbsp; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;def mayAdd(self, aTransaction):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return (aTransaction.date &gt; self.cutoff)</pre><pre>&nbsp;&nbsp;&nbsp; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;def mayEdit(self, index, newTransaction):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; oldtran = self.BookSet[index]</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if oldtran.date &lt;= self.cutoff:</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 0</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; elif newTransaction.date &lt;= self.cutoff:</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 0</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else:</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 1</pre><pre>&nbsp;</pre><pre>&nbsp;&nbsp;&nbsp; def mayRemove(self, index):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tran = self.BookSet[index]</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return (tran.date &gt; self.cutoff)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;# renameAccount will not break anything</pre>

<p>More sophisticated <tt><span style='font-size:10.0pt'>Validator</span></tt>s
might have beginning and ending time windows, a list of accounts not to touch,
or even a user-related permissions mechanism. All these can be implemented
without the users needing to touch the core <tt><span style='font-size:10.0pt'>BookSet</span></tt>
code. </p>

<h4>8.2.7 More Ways to Extend the Application</h4>

<p><tt><span style='font-size:10.0pt'>View</span></tt>s and <tt><span
style='font-size:10.0pt'>Validator</span></tt>s can be used for other jobs as
well as displaying interactive data:</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>If you want to implement an error-recovery system, you could create a <tt><span
style='font-size:10.0pt'>View</span></tt> that writes every change to a log
file and then can roll backward and forward through the log (edits are
reversible; renaming is not). This provides a full audit trail, invaluable when
making lots of minor corrections at year-end.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>If the system were holding real data (e.g., as part of an executive
information system), you could build a system of alerts to warn people or
generate certain reports if accounts fell below certain levels, or if creditors
were more than a certain amount of time overdue.</p>

<h4>8.2.8 A Note on Performance</h4>

<p>Extending <tt><span style='font-size:10.0pt'>BookSet</span></tt> to <tt><span
style='font-size:10.0pt'>UserBookSet</span></tt> and adding in <tt><span
style='font-size:10.0pt'>View</span></tt>s and <tt><span style='font-size:10.0pt'>Validator</span></tt>s
changes the performance characteristics enormously. If our goal is a simple,
general-purpose class around which to write scripts, it may not be worth doing.
The original <tt><span style='font-size:10.0pt'>BookSet</span></tt> can add,
edit, and remove transactions quickly as it keeps them in a list, but most
useful queries involve a loop over the entire set of data. A running <tt><span
style='font-size:10.0pt'>UserBookSet</span></tt> in an interactive application
might have 10,000 transactions in memory, five <tt><span style='font-size:10.0pt'>View</span></tt>s
open, and two <tt><span style='font-size:10.0pt'>Validator</span></tt>s. This
means that any addition involves talking to seven other objects, and an edit
involves 14 objects. Naturally, this dramatically slows bulk operations.
However, it dramatically enhances query performance; a view on the screen
displaying month-end balances of every account might need to redraw only one or
two cells of the grid after an edit, rather than recalculate completely. Think
of each running <tt><span style='font-size:10.0pt'>View</span></tt> as an extra
database index, and you won’t go far wrong. </p>

<h3><a name="_8.3_Conclusion"></a>8.3 Conclusion</h3>

<p>This chapter has taken us beyond standard Windows development and into an
area that is one of Python’s greatest strengths: extensibility. We have taken
an application that had a useful object model but a limited feature set and
opened it to users. They have full access to the object model and can interact
with the data. In the course of this, we’ve learned more about Python
internals.</p>

<p>In addition, we have refined the object model using delegation to make it
easy for users to customize. With a little training and documentation, they can
build far-reaching extensions precisely tailored to the nature of their
business.</p>

<p>This type of development would be prohibitively expensive and difficult
without a dynamic environment such as Python. Python lets you create extensible
applications with ease.</p>

<p class=MsoFootnoteText>&nbsp;<a name="_ftn5"></a><a
href="11.htm#_ftnref5" title=""><span
class=MsoFootnoteReference>[1]</span></a> <span style='font-size:7.5pt'>Design-pattern<i>
</i>aficionados might also argue that this is an instance of the observer
pattern. Call it what you will.</span></p>

<p class=MsoNormal>&nbsp;</p>

<div align=center>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 width="90%"
 style='width:90.0%;background:#ECECD9;border-collapse:collapse;border:none'>
 <tr>
  <td width="33%" style='width:33.0%;border:inset #111111 1.0pt;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><a href="10.htm"><span style='text-decoration:none'><img
  border=0 width=37 height=34 src="leftarrw.gif"></span></a></p>
  </td>
  <td width="33%" style='width:33.0%;border:inset #111111 1.0pt;border-left:
  none;padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><a href="0.htm"><span
  style='font-size:13.5pt'>Table of Contents</span></a></p>
  </td>
  <td width="34%" style='width:34.0%;border:inset #111111 1.0pt;border-left:
  none;padding:.75pt .75pt .75pt .75pt'>
  <p align=right style='text-align:right'><a href="12.htm"><span
  style='text-decoration:none'><img border=0 width=37 height=34
  src="rightarrw.gif"></span></a></p>
  </td>
 </tr>
</table>

</div>

<p class=MsoNormal>&nbsp;</p>

</div>

</body>

</html>
