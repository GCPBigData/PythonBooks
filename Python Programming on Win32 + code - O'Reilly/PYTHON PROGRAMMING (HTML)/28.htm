<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=utf-8">
<meta name=Generator content="Microsoft Word 10 (filtered)">
<title> </title>

<link rel=Stylesheet type="text/css" media=all href="1.css">
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Helvetica;
	panose-1:2 11 5 4 2 2 2 2 2 4;}
@font-face
	{font-family:Courier;
	panose-1:2 7 4 9 2 2 5 2 4 4;}
@font-face
	{font-family:"Tms Rmn";
	panose-1:2 2 6 3 4 5 5 2 3 4;}
@font-face
	{font-family:Helv;
	panose-1:2 11 6 4 2 2 2 3 2 4;}
@font-face
	{font-family:"New York";
	panose-1:2 4 5 3 6 5 6 2 3 4;}
@font-face
	{font-family:System;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"MS Mincho";
	panose-1:2 2 6 9 4 2 5 8 3 4;}
@font-face
	{font-family:Batang;
	panose-1:2 3 6 0 0 1 1 1 1 1;}
@font-face
	{font-family:SimSun;
	panose-1:2 1 6 0 3 1 1 1 1 1;}
@font-face
	{font-family:PMingLiU;
	panose-1:2 1 6 1 0 1 1 1 1 1;}
@font-face
	{font-family:"MS Gothic";
	panose-1:2 11 6 9 7 2 5 8 2 4;}
@font-face
	{font-family:Dotum;
	panose-1:2 11 6 0 0 1 1 1 1 1;}
@font-face
	{font-family:SimHei;
	panose-1:2 1 6 0 3 1 1 1 1 1;}
@font-face
	{font-family:MingLiU;
	panose-1:2 1 6 9 0 1 1 1 1 1;}
@font-face
	{font-family:Mincho;
	panose-1:2 2 6 9 4 3 5 8 3 5;}
@font-face
	{font-family:Gulim;
	panose-1:2 11 6 0 0 1 1 1 1 1;}
@font-face
	{font-family:Century;
	panose-1:2 4 6 3 5 7 5 2 3 3;}
@font-face
	{font-family:"Angsana New";
	panose-1:2 2 6 3 5 4 5 2 3 4;}
@font-face
	{font-family:"Cordia New";
	panose-1:2 11 3 4 2 2 2 2 2 4;}
@font-face
	{font-family:Mangal;
	panose-1:0 0 4 0 0 0 0 0 0 0;}
@font-face
	{font-family:Latha;
	panose-1:0 0 4 0 0 0 0 0 0 0;}
@font-face
	{font-family:Sylfaen;
	panose-1:1 10 5 2 5 3 6 3 3 3;}
@font-face
	{font-family:Vrinda;
	panose-1:0 0 4 0 0 0 0 0 0 0;}
@font-face
	{font-family:Raavi;
	panose-1:0 0 4 0 0 0 0 0 0 0;}
@font-face
	{font-family:Shruti;
	panose-1:0 0 4 0 0 0 0 0 0 0;}
@font-face
	{font-family:Sendnya;
	panose-1:0 0 4 0 0 0 0 0 0 0;}
@font-face
	{font-family:Gautami;
	panose-1:0 0 4 0 0 0 0 0 0 0;}
@font-face
	{font-family:Tunga;
	panose-1:0 0 4 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Estrangella Edessa";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Arial Unicode MS";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:Tahoma;
	panose-1:2 11 6 4 3 5 4 4 2 4;}
@font-face
	{font-family:Verdana;
	panose-1:2 11 6 4 3 5 4 4 2 4;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;}
h1
	{margin-top:1.0in;
	margin-right:0in;
	margin-bottom:.5in;
	margin-left:0in;
	text-align:center;
	page-break-before:always;
	font-size:24.0pt;
	font-weight:bold;}
h2
	{page-break-before:always;
	font-size:18.0pt;
	font-weight:bold;}
h3
	{font-size:13.5pt;
	font-weight:bold;}
h4
	{font-size:12.0pt;
	font-weight:bold;}
h5
	{font-size:10.0pt;
	font-weight:bold;}
p.MsoFootnoteText, li.MsoFootnoteText, div.MsoFootnoteText
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;}
p.MsoTitle, li.MsoTitle, div.MsoTitle
	{font-size:12.0pt;
	font-weight:bold;}
p.MsoBodyText3, li.MsoBodyText3, div.MsoBodyText3
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:0in;
	font-size:8.0pt;}
p.MsoDocumentMap, li.MsoDocumentMap, div.MsoDocumentMap
	{margin:0in;
	margin-bottom:.0001pt;
	background:navy;
	font-size:12.0pt;}
p
	{font-size:12.0pt;}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;}
p.footnote, li.footnote, div.footnote
	{font-size:12.0pt;}
p.monofont, li.monofont, div.monofont
	{font-size:12.0pt;}
p.romanfont, li.romanfont, div.romanfont
	{font-size:12.0pt;}
p.atitle, li.atitle, div.atitle
	{font-size:9.0pt;
	font-weight:bold;}
p.chaptertitle, li.chaptertitle, div.chaptertitle
	{margin-top:0in;
	margin-right:7.5pt;
	margin-bottom:0in;
	margin-left:7.5pt;
	margin-bottom:.0001pt;
	font-size:12.0pt;}
p.sectiontitle, li.sectiontitle, div.sectiontitle
	{margin-top:0in;
	margin-right:15.0pt;
	margin-bottom:0in;
	margin-left:15.0pt;
	margin-bottom:.0001pt;
	font-size:12.0pt;}
p.itable, li.itable, div.itable
	{font-size:12.0pt;}
p.tiny, li.tiny, div.tiny
	{font-size:7.0pt;}
p.multiselect, li.multiselect, div.multiselect
	{font-size:7.5pt;}
p.safnavoff, li.safnavoff, div.safnavoff
	{font-size:8.5pt;}
p.safnavon, li.safnavon, div.safnavon
	{font-size:8.5pt;
	font-weight:bold;}
p.navtopbg, li.navtopbg, div.navtopbg
	{background:#990000;
	font-size:12.0pt;}
p.navleftbg, li.navleftbg, div.navleftbg
	{background:#666666;
	font-size:12.0pt;}
p.navleftbgalt, li.navleftbgalt, div.navleftbgalt
	{background:#666666;
	font-size:12.0pt;}
p.navtitle, li.navtitle, div.navtitle
	{font-size:9.0pt;
	font-weight:bold;}
p.nonavtitle, li.nonavtitle, div.nonavtitle
	{font-size:9.0pt;
	font-weight:bold;}
p.bimodoff, li.bimodoff, div.bimodoff
	{font-size:12.0pt;}
p.bimodon, li.bimodon, div.bimodon
	{font-size:12.0pt;}
p.btblinks, li.btblinks, div.btblinks
	{font-size:8.5pt;}
p.btlinksactive, li.btlinksactive, div.btlinksactive
	{font-size:12.0pt;
	font-weight:bold;}
p.inputtext, li.inputtext, div.inputtext
	{font-size:12.0pt;}
p.inputbutton, li.inputbutton, div.inputbutton
	{font-size:12.0pt;
	font-weight:bold;}
p.endsearch, li.endsearch, div.endsearch
	{font-size:12.0pt;
	font-weight:bold;}
p.dropdown, li.dropdown, div.dropdown
	{font-size:12.0pt;}
p.navtoptoolbg, li.navtoptoolbg, div.navtoptoolbg
	{background:black;
	font-size:12.0pt;}
p.headingbarbg, li.headingbarbg, div.headingbarbg
	{background:#333333;
	font-size:12.0pt;}
p.headingsubbarbg, li.headingsubbarbg, div.headingsubbarbg
	{background:#CCCCCC;
	font-size:12.0pt;}
p.headingbartitle, li.headingbartitle, div.headingbartitle
	{font-size:10.5pt;
	font-weight:bold;}
p.headingsubbartitle, li.headingsubbartitle, div.headingsubbartitle
	{font-size:9.0pt;
	font-weight:bold;}
p.tablestripe, li.tablestripe, div.tablestripe
	{background:#EEEEEE;
	font-size:12.0pt;}
p.pgtitle, li.pgtitle, div.pgtitle
	{font-size:12.0pt;
	font-weight:bold;}
p.buyprint, li.buyprint, div.buyprint
	{font-size:7.5pt;}
p.resulthighlight, li.resulthighlight, div.resulthighlight
	{background:lightblue;
	font-size:12.0pt;}
p.pgsubtitle, li.pgsubtitle, div.pgsubtitle
	{font-size:12.0pt;
	font-weight:bold;}
p.helphead, li.helphead, div.helphead
	{font-size:12.0pt;
	font-weight:bold;}
p.helpsubhead, li.helpsubhead, div.helpsubhead
	{font-size:10.0pt;}
p.helpcaption, li.helpcaption, div.helpcaption
	{font-size:10.0pt;}
p.helptab, li.helptab, div.helptab
	{font-size:10.0pt;}
p.sm, li.sm, div.sm
	{font-size:6.0pt;}
p.gowild, li.gowild, div.gowild
	{font-size:13.5pt;
	font-weight:bold;
	font-style:italic;}
p.getstarted, li.getstarted, div.getstarted
	{font-size:10.0pt;
	font-weight:bold;
	font-style:italic;}
ins
	{text-decoration:none;}
span.msoIns
	{text-decoration:underline;}
span.msoDel
	{text-decoration:line-through;
	color:red;}
@page Section1
	{size:8.5in 11.0in;
	margin:1.0in 1.25in 1.0in 1.25in;}
div.Section1
	{page:Section1;}
-->
</style>

</head>

<body lang=EN-US link="#990000" vlink=purple>

<div class=Section1>

<div align=center>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 width="90%"
 style='width:90.0%;background:#ECECD9;border-collapse:collapse;border:none'>
 <tr>
  <td width="33%" style='width:33.0%;border:inset #111111 1.0pt;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><a href="27.htm"><span style='text-decoration:none'><img
  border=0 width=37 height=34 src="leftarrw.gif"></span></a></p>
  </td>
  <td width="33%" style='width:33.0%;border:inset #111111 1.0pt;border-left:
  none;padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><a href="0.htm"><span
  style='font-size:13.5pt'>Table of Contents</span></a></p>
  </td>
  <td width="34%" style='width:34.0%;border:inset #111111 1.0pt;border-left:
  none;padding:.75pt .75pt .75pt .75pt'>
  <p align=right style='text-align:right'><a href="29.htm"><span
  style='text-decoration:none'><img border=0 width=37 height=34
  src="rightarrw.gif"></span></a></p>
  </td>
 </tr>
</table>

</div>

<h2><a name="_Appendix_A._Key_Python_Modules_and_"></a>Appendix A. Key Python
Modules and Functions</h2>

<p>The Python library is huge (231 files in the latest Windows distribution),
but a full library reference in HTML format is included with every Python
installation. You may also download printable versions in PostScript or PDF
formats from <a href="http://www.python.org" target="_blank">www.python.org</a>
and circulate copies without restriction: the document is a similar size to this
book.</p>

<p>As a convenience to the armchair reader we have included the key functions
and modules that are likely to be used by most nontrivial programs. These are
nearly direct reproductions from the Python Library. The Python Library is also
Open Source, but we are required to include this copyright notice:</p>

<p style='margin-top:5.0pt;margin-right:.5in;margin-bottom:5.0pt;margin-left:
.5in'>The Python Library Reference is Copyright Â© 1991-1995 by Stichting
Mathematisch Centrum, Amsterdam, The Netherlands. All Rights Reserved.</p>

<p style='margin-top:5.0pt;margin-right:.5in;margin-bottom:5.0pt;margin-left:
.5in'>Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted, provided that
the above copyright notice appear in all copies and that both that copyright
notice and this permission notice appear in supporting documentation, and that
the names of Stichting Mathematisch Centrum or CWI or Corporation for National
Research Initiatives or CNRI not be used in advertising or publicity pertaining
to distribution of the software without specific, written prior permission.</p>

<p>This appendix covers:</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>Â·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Methods of built-in types such as lists, dictionaries, and files</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>Â·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Built-in functions</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>Â·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>The <tt><span style='font-size:10.0pt'>sys</span></tt> module</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>Â·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>The <tt><span style='font-size:10.0pt'>os</span></tt> and <tt><span
style='font-size:10.0pt'>os.path</span></tt> modules</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>Â·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>The <tt><span style='font-size:10.0pt'>string</span></tt> module</p>

<h3><a name="_A.1_Built-in_Types"></a>A.1 Built-in Types</h3>

<p>The following sections describe the standard types that are built into the
interpreter. These are the numeric types, sequence types, and several others,
including types themselves. There is no explicit boolean type; use integers
instead.</p>

<p>Some operations are supported by several object types; in particular, all
objects can be compared, tested for truth value, and converted to a string
(with the notation <tt><span style='font-size:10.0pt'>` ...`</span></tt>). The
latter conversion is implicitly used when an object is written by the <tt><span
style='font-size:10.0pt'>print</span></tt> statement.</p>

<h4>A.1.1 Truth Value Testing </h4>

<p>Any object can be tested for truth value, to use in an <tt><span
style='font-size:10.0pt'>if</span></tt> or <tt><span style='font-size:10.0pt'>while</span></tt>
condition or as operand of the boolean operations below. The following values
are considered <tt><span style='font-size:10.0pt'>false</span></tt>:</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>Â·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><tt><span style='font-size:10.0pt'>None</span></tt></p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>Â·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Zero of any numeric type, e.g., <tt><span style='font-size:10.0pt'>0</span></tt>,
<tt><span style='font-size:10.0pt'>0L</span></tt>, <tt><span style='font-size:
10.0pt'>0.0</span></tt></p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>Â·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Any empty sequence, e.g., â â, <tt><span style='font-size:10.0pt'>()</span></tt>,
<tt><span style='font-size:10.0pt'>[]</span></tt></p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>Â·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Any empty mapping, e.g., <tt><span style='font-size:10.0pt'>{}</span></tt></p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>Â·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Instances of user-defined classes, if the class defines a <tt><span
style='font-size:10.0pt'>__nonzero__()</span></tt> or <tt><span
style='font-size:10.0pt'>__len__()</span></tt> method, when that method returns
zero</p>

<p>All other values are considered <tt><span style='font-size:10.0pt'>true</span></tt>,
so objects of many types are always <tt><span style='font-size:10.0pt'>true</span></tt>.</p>

<p>Operations and built-in functions that have a boolean result always return
for <tt><span style='font-size:10.0pt'>false</span></tt> and 1 for <tt><span
style='font-size:10.0pt'>true</span></tt>, unless otherwise stated. Important
exceptions are the boolean operations <tt><span style='font-size:10.0pt'>or</span></tt>
and <tt><span style='font-size:10.0pt'>and</span></tt>, which always return one
of their operands.</p>

<h4>A.1.2 Boolean Operations </h4>

<p>The following table depicts the boolean operations, ordered by ascending
priority.</p>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 width="100%"
 style='width:100.0%'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><b><span style='font-size:10.0pt'>Operation</span></b></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><b><span style='font-size:10.0pt'>Result</span></b></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><b><span style='font-size:10.0pt'>Notes</span></b></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>x</span></tt><span style='font-size:
  10.0pt'> </span><tt><span style='font-size:10.0pt'>or</span></tt><span
  style='font-size:10.0pt'> </span><tt><span style='font-size:10.0pt'>y</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>If </span><tt><span style='font-size:10.0pt'>x</span></tt><span
  style='font-size:10.0pt'> is false, then </span><tt><span style='font-size:
  10.0pt'>y</span></tt><span style='font-size:10.0pt'>, else </span><tt><span
  style='font-size:10.0pt'>x</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>1</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>x</span></tt><span style='font-size:
  10.0pt'> </span><tt><span style='font-size:10.0pt'>and</span></tt><span
  style='font-size:10.0pt'> </span><tt><span style='font-size:10.0pt'>y</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>If </span><tt><span style='font-size:10.0pt'>x</span></tt><span
  style='font-size:10.0pt'> is false, then </span><tt><span style='font-size:
  10.0pt'>x</span></tt><span style='font-size:10.0pt'>, else </span><tt><span
  style='font-size:10.0pt'>y</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>1</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>not</span></tt><span style='font-size:
  10.0pt'> </span><tt><span style='font-size:10.0pt'>x</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>If </span><tt><span style='font-size:10.0pt'>x</span></tt><span
  style='font-size:10.0pt'> is false, then </span><tt><span style='font-size:
  10.0pt'>1</span></tt><span style='font-size:10.0pt'>, else </span><tt><span
  style='font-size:10.0pt'>0</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>2</span></p>
  </td>
 </tr>
</table>

<h5>A.1.2.1 Notes</h5>

<p style='margin-left:.5in;text-indent:-.25in'>1.<span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>These evaluate their second argument only if needed for their outcome.</p>

<p style='margin-left:.5in;text-indent:-.25in'>2.<span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>âNotâ has a lower priority than non-boolean operators, e.g., <tt><span
style='font-size:10.0pt'>not</span></tt> <tt><span style='font-size:10.0pt'>a</span></tt>
<tt><span style='font-size:10.0pt'>==</span></tt> <tt><span style='font-size:
10.0pt'>b</span></tt> is interpreted as <tt><span style='font-size:10.0pt'>not(a</span></tt>
<tt><span style='font-size:10.0pt'>==</span></tt> <tt><span style='font-size:
10.0pt'>b)</span></tt>, and <tt><span style='font-size:10.0pt'>a</span></tt> <tt><span
style='font-size:10.0pt'>==</span></tt> <tt><span style='font-size:10.0pt'>not</span></tt>
<tt><span style='font-size:10.0pt'>b</span></tt> is a syntax error.</p>

<h4>A.1.3 Comparisons </h4>

<p>Comparison operations are supported by all objects. They have the same
priority (which is higher than that of the boolean operations). Comparisons can
be chained arbitrarily, e.g., <tt><span style='font-size:10.0pt'>x</span></tt> <tt><span
style='font-size:10.0pt'>&lt;</span></tt> <tt><span style='font-size:10.0pt'>y</span></tt>
<tt><span style='font-size:10.0pt'>&lt;=</span></tt> <tt><span
style='font-size:10.0pt'>z</span></tt> is equivalent to <tt><span
style='font-size:10.0pt'>x</span></tt> <tt><span style='font-size:10.0pt'>&lt;</span></tt>
<tt><span style='font-size:10.0pt'>y</span></tt> and <tt><span
style='font-size:10.0pt'>y</span></tt> <tt><span style='font-size:10.0pt'>&lt;=</span></tt>
<tt><span style='font-size:10.0pt'>z</span></tt>, except that <tt><span
style='font-size:10.0pt'>y</span></tt> is evaluated only once (but in both
cases <tt><span style='font-size:10.0pt'>z</span></tt> is not evaluated at all
when <tt><span style='font-size:10.0pt'>x</span></tt> <tt><span
style='font-size:10.0pt'>&lt;</span></tt> <tt><span style='font-size:10.0pt'>y</span></tt>
is found to be <tt><span style='font-size:10.0pt'>false</span></tt>).</p>

<p>The following table summarizes the comparison operations.</p>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 width="100%"
 style='width:100.0%'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><b><span style='font-size:10.0pt'>Operation</span></b></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><b><span style='font-size:10.0pt'>Meaning</span></b></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><b><span style='font-size:10.0pt'>Notes</span></b></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre>&lt;</pre></td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Strictly less than</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'>&nbsp;</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre>&lt;=</pre></td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Less than or equal</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'>&nbsp;</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre>&gt;</pre></td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Strictly greater than</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'>&nbsp;</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre>&gt;=</pre></td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Greater than or equal</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'>&nbsp;</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre>==</pre></td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Equal</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'>&nbsp;</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre>&lt;&gt;</pre></td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Not equal</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>1</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre>!=</pre></td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Not equal</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>1</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre>Is</pre></td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Object identity</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'>&nbsp;</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre>is not</pre></td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Negated object identity</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'>&nbsp;</span></p>
  </td>
 </tr>
</table>

<h5>A.1.3.1 Notes</h5>

<p style='margin-left:.5in;text-indent:-.25in'>1.<span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>&lt;&gt; and != are alternate spellings for the same operator. (We
couldnât choose between ABC and C!)</p>

<p>Objects of different types, except different numeric types, never compare
equal; such objects are ordered consistently but arbitrarily (so that sorting a
heterogeneous array yields a consistent result). Furthermore, some types (e.g.,
windows) support only a degenerate notion of comparison where any two objects
of that type are unequal. Again, such objects are ordered arbitrarily but
consistently.</p>

<p>Implementation note: objects of different types except numbers are ordered
by their type names; objects of the same types that donât support proper
comparison are ordered by their address.</p>

<p>Two more operations with the same syntactic priority, <tt><span
style='font-size:10.0pt'>&quot;in&quot;</span></tt> and <tt><span
style='font-size:10.0pt'>&quot;not</span></tt> <tt><span style='font-size:10.0pt'>in&quot;</span></tt>,
are supported only by sequence types, see the later section <a
href="#_A.1.6_Sequence_Types">Section A.1.6</a>.</p>

<h4>A.1.4 Numeric Types </h4>

<p>There are four numeric types: <i>plain integers, long integers,
floating-point numbers, </i>and <i>complex numbers</i> . Plain integers (also just
called integers) are implemented using <tt><span style='font-size:10.0pt'>long</span></tt>
in C, which gives them at least 32 bits of precision. Long integers have
unlimited precision. Floating-point numbers are implemented using <tt><span
style='font-size:10.0pt'>double</span></tt> in C. All bets on their precision
are off unless you happen to know the machine you are working with.</p>

<p>Complex numbers have a real and imaginary part, which are both implemented
using double in C. To extract these parts from a complex number <tt><i><span
style='font-size:10.0pt'>z</span></i></tt>, use <tt><i><span style='font-size:
10.0pt'>z</span></i></tt><tt><span style='font-size:10.0pt'>.real</span></tt>
and <tt><i><span style='font-size:10.0pt'>z</span></i></tt><tt><span
style='font-size:10.0pt'>.imag.</span></tt></p>

<p>Numbers are created by numeric literals or as the result of built-in
functions and operators. Unadorned integer literals (including hex and octal
numbers) yield plain integers. Integer literals with an <tt><span
style='font-size:10.0pt'>L</span></tt> or <tt><span style='font-size:10.0pt'>l</span></tt>
suffix yield long integers (<tt><span style='font-size:10.0pt'>L</span></tt> is
preferred because <tt><span style='font-size:10.0pt'>1l</span></tt> looks too
much like eleven!). Numeric literals containing a decimal point or an exponent
sign yield floating-point numbers. Appending <tt><span style='font-size:10.0pt'>j</span></tt>
or <tt><span style='font-size:10.0pt'>J</span></tt> to a numeric literal yields
a complex number.</p>

<p>Python fully supports mixed arithmetic: when a binary arithmetic operator has
operands of different numeric types, the operand with the âsmallerâ type is
converted to that of the other, where a plain integer is smaller than a long
integer is smaller than a floating point is smaller than a complex. Comparisons
between numbers of mixed type use the same rule.<a name="_ftnref21"></a><a
href="#_ftn21"><span class=atitlechar><sup><span style='font-size:9.0pt'>[A]</span></sup></span></a>
The functions <tt><span style='font-size:10.0pt'>int()</span></tt>, <tt><span
style='font-size:10.0pt'>long()</span></tt>, <tt><span style='font-size:10.0pt'>float()</span></tt>,
and <tt><span style='font-size:10.0pt'>complex()</span></tt> can force numbers
to a specific type.</p>

<p>All numeric types support the operations in the following table, sorted by
ascending priority (operations in the same box have the same priority; all
numeric operations have a higher priority than comparison operations).</p>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 width="100%"
 style='width:100.0%'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><b><span style='font-size:10.0pt'>Operation</span></b></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><b><span style='font-size:10.0pt'>Result</span></b></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><b><span style='font-size:10.0pt'>Notes</span></b></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>x</span></tt><span style='font-size:
  10.0pt'> </span><tt><span style='font-size:10.0pt'>+</span></tt><span
  style='font-size:10.0pt'> </span><tt><span style='font-size:10.0pt'>y</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Sum of </span><tt><span style='font-size:
  10.0pt'>x</span></tt><span style='font-size:10.0pt'> and </span><tt><span
  style='font-size:10.0pt'>y</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'>&nbsp;</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>x</span></tt><span style='font-size:
  10.0pt'> </span><tt><span style='font-size:10.0pt'>-</span></tt><span
  style='font-size:10.0pt'> </span><tt><span style='font-size:10.0pt'>y</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Difference of </span><tt><span
  style='font-size:10.0pt'>x</span></tt><span style='font-size:10.0pt'> and </span><tt><span
  style='font-size:10.0pt'>y</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'>&nbsp;</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>x</span></tt><span style='font-size:
  10.0pt'> </span><tt><span style='font-size:10.0pt'>*</span></tt><span
  style='font-size:10.0pt'> </span><tt><span style='font-size:10.0pt'>y</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Product of </span><tt><span
  style='font-size:10.0pt'>x</span></tt><span style='font-size:10.0pt'> and </span><tt><span
  style='font-size:10.0pt'>y</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'>&nbsp;</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>x</span></tt><span style='font-size:
  10.0pt'> </span><tt><span style='font-size:10.0pt'>/</span></tt><span
  style='font-size:10.0pt'> </span><tt><span style='font-size:10.0pt'>y</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Quotient of </span><tt><span
  style='font-size:10.0pt'>x</span></tt><span style='font-size:10.0pt'> and </span><tt><span
  style='font-size:10.0pt'>y</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>1</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>x</span></tt><span style='font-size:
  10.0pt'> </span><tt><span style='font-size:10.0pt'>%</span></tt><span
  style='font-size:10.0pt'> </span><tt><span style='font-size:10.0pt'>y</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Remainder of </span><tt><span
  style='font-size:10.0pt'>x</span></tt><span style='font-size:10.0pt'> </span><tt><span
  style='font-size:10.0pt'>/</span></tt><span style='font-size:10.0pt'> </span><tt><span
  style='font-size:10.0pt'>y</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'>&nbsp;</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>-x</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>x</span></tt><span style='font-size:
  10.0pt'> negated</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'>&nbsp;</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>+x</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>x</span></tt><span style='font-size:
  10.0pt'> unchanged</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'>&nbsp;</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>abs(x)</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Absolute value or magnitude of </span><tt><span
  style='font-size:10.0pt'>x</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'>&nbsp;</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>int(x)</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>x</span></tt><span style='font-size:
  10.0pt'> converted to integer</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>2</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>long(x)</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>x</span></tt><span style='font-size:
  10.0pt'> converted to long integer</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>2</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>float(x)</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>x</span></tt><span style='font-size:
  10.0pt'> converted to floating point</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'>&nbsp;</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>complex(re,im)</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>A complex number with real part </span><tt><span
  style='font-size:10.0pt'>re</span></tt><span style='font-size:10.0pt'>,
  imaginary part </span><tt><span style='font-size:10.0pt'>im</span></tt><span
  style='font-size:10.0pt'>; </span><tt><span style='font-size:10.0pt'>im</span></tt><span
  style='font-size:10.0pt'> defaults to zero</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'>&nbsp;</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>c.conjugate()</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Conjugate of the complex number </span><tt><span
  style='font-size:10.0pt'>c</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'>&nbsp;</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>divmod(x,</span></tt><span
  style='font-size:10.0pt'> </span><tt><span style='font-size:10.0pt'>y)</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>The pair (</span><tt><span
  style='font-size:10.0pt'>x</span></tt><span style='font-size:10.0pt'> </span><tt><span
  style='font-size:10.0pt'>/</span></tt><span style='font-size:10.0pt'> </span><tt><span
  style='font-size:10.0pt'>y,</span></tt><span style='font-size:10.0pt'> </span><tt><span
  style='font-size:10.0pt'>x</span></tt><span style='font-size:10.0pt'> </span><tt><span
  style='font-size:10.0pt'>%</span></tt><span style='font-size:10.0pt'> </span><tt><span
  style='font-size:10.0pt'>y</span></tt><span style='font-size:10.0pt'>)</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>3</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>pow(x,</span></tt><span
  style='font-size:10.0pt'> </span><tt><span style='font-size:10.0pt'>y)</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>x</span></tt><span style='font-size:
  10.0pt'> to the power </span><tt><span style='font-size:10.0pt'>y</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'>&nbsp;</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>x</span></tt><span style='font-size:
  10.0pt'> </span><tt><span style='font-size:10.0pt'>**</span></tt><span
  style='font-size:10.0pt'> </span><tt><span style='font-size:10.0pt'>y</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>x</span></tt><span style='font-size:
  10.0pt'> to the power </span><tt><span style='font-size:10.0pt'>y</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'>&nbsp;</span></p>
  </td>
 </tr>
</table>

<h5>A.1.4.1 Notes</h5>

<p style='margin-left:.5in;text-indent:-.25in'>1.<span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>For (plain or long) integer division, the result is an integer. The
result is always rounded towards minus infinity: 1/2 is 0, (-1)/2 is -1, 1/(-2)
is -1, and (-1)/(-2) is 0.</p>

<p style='margin-left:.5in;text-indent:-.25in'>2.<span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Conversion from floating-point to (long or plain) integer may round or
truncate as in C; see functions <tt><span style='font-size:10.0pt'>floor()</span></tt>
and <tt><span style='font-size:10.0pt'>ceil()</span></tt> in the <tt><span
style='font-size:10.0pt'>math</span></tt> module for well-defined conversions.</p>

<p style='margin-left:.5in;text-indent:-.25in'>3.<span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>See the section <a href="28.htm#_A.3_Built-in_Functions">Section A.3</a>
for an exact definition.</p>

<h4>A.1.5 Bit-String Operations on Integer Types </h4>

<p>Plain and long integer types support additional operations that make sense
only for bit strings. Negative numbers are treated as their 2âs complement
value (for long integers, this assumes a sufficiently large number of bits so
that no overflow occurs during the operation).</p>

<p>The priorities of the binary bitwise operations are all lower than the
numeric operations and higher than the comparisons; the unary operation <tt><span
style='font-size:10.0pt'>~</span></tt> has the same priority as the other unary
numeric operations (<tt><span style='font-size:10.0pt'>+</span></tt> and <tt><span
style='font-size:10.0pt'>-</span></tt>).</p>

<p>The following table lists the bit-string operations sorted in ascending
priority (operations in the same box have the same priority).</p>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 width="100%"
 style='width:100.0%'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><b><span style='font-size:10.0pt'>Operation</span></b></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><b><span style='font-size:10.0pt'>Result</span></b></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><b><span style='font-size:10.0pt'>Notes</span></b></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>x | y</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Bitwise or of </span><tt><span
  style='font-size:10.0pt'>x</span></tt><span style='font-size:10.0pt'> and </span><tt><span
  style='font-size:10.0pt'>y</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'>&nbsp;</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>x ^ y</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Bitwise exclusive or of </span><tt><span
  style='font-size:10.0pt'>x</span></tt><span style='font-size:10.0pt'> and </span><tt><span
  style='font-size:10.0pt'>y</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'>&nbsp;</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>x &amp; y</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Bitwise and of </span><tt><span
  style='font-size:10.0pt'>x</span></tt><span style='font-size:10.0pt'> and </span><tt><span
  style='font-size:10.0pt'>y</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'>&nbsp;</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>x &lt;&lt; n</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>x</span></tt><span style='font-size:
  10.0pt'> shifted left by </span><tt><span style='font-size:10.0pt'>n</span></tt><span
  style='font-size:10.0pt'> bits</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>1, 2</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>x &gt;&gt; n</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>x</span></tt><span style='font-size:
  10.0pt'> shifted right by </span><tt><span style='font-size:10.0pt'>n</span></tt><span
  style='font-size:10.0pt'> bits</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>1, 3</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>~x</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>The bits of </span><tt><span
  style='font-size:10.0pt'>x</span></tt><span style='font-size:10.0pt'>
  inverted</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'>&nbsp;</span></p>
  </td>
 </tr>
</table>

<h5>A.1.5.1 Notes </h5>

<p style='margin-left:.5in;text-indent:-.25in'>1.<span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Negative shift counts are illegal and cause a <tt><span
style='font-size:10.0pt'>ValueError</span></tt> to be raised.</p>

<p style='margin-left:.5in;text-indent:-.25in'>2.<span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>A left shift by <tt><span style='font-size:10.0pt'>n</span></tt> bits is
equivalent to multiplication by <tt><span style='font-size:10.0pt'>pow(2,</span></tt>
<tt><span style='font-size:10.0pt'>n)</span></tt> without overflow check.</p>

<p style='margin-left:.5in;text-indent:-.25in'>3.<span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>A right shift by <tt><span style='font-size:10.0pt'>n</span></tt> bits
is equivalent to division by <tt><span style='font-size:10.0pt'>pow(2,</span></tt>
<tt><span style='font-size:10.0pt'>n)</span></tt> without overflow check.</p>

<h4><a name="_A.1.6_Sequence_Types"></a>A.1.6 Sequence Types </h4>

<p>There are three sequence types: <i>strings</i> , <i>lists, </i>and <i>tuples</i>
. String literals are written in single or double quotes: <tt><span
style='font-size:10.0pt'>'xyzzy'</span></tt>, <tt><span style='font-size:10.0pt'>&quot;frobozz&quot;</span></tt>.
See Chapter 2 of the Python reference manual for more about string literals.
Lists are constructed with square brackets, separating items with commas: <tt><span
style='font-size:10.0pt'>[a,</span></tt> <tt><span style='font-size:10.0pt'>b,</span></tt>
<tt><span style='font-size:10.0pt'>c]</span></tt>. Tuples are constructed by
the comma operator (not within square brackets), with or without enclosing
parentheses, but an empty tuple must have the enclosing parentheses, e.g., <tt><span
style='font-size:10.0pt'>a,</span></tt> <tt><span style='font-size:10.0pt'>b,</span></tt>
<tt><span style='font-size:10.0pt'>c</span></tt> or <tt><span style='font-size:
10.0pt'>()</span></tt>. A single item tuple must have a trailing comma, e.g., <tt><span
style='font-size:10.0pt'>(d,)</span></tt>.</p>

<p>Sequence types support the following operations. The <tt><span
style='font-size:10.0pt'>in</span></tt> and <tt><span style='font-size:10.0pt'>not</span></tt>
<tt><span style='font-size:10.0pt'>in</span></tt> operations have the same
priorities as the comparison operations. The <tt><span style='font-size:10.0pt'>+</span></tt>
and <tt><span style='font-size:10.0pt'>*</span></tt> operations have the same
priority as the corresponding numeric operations.<a name="_ftnref22"></a><a
href="#_ftn22"><span class=atitlechar><sup><span style='font-size:9.0pt'>[B]</span></sup></span></a></p>

<p>The following table lists the sequence operations sorted in ascending
priority (operations in the same box have the same priority). <tt><span
style='font-size:10.0pt'>s</span></tt> and <tt><span style='font-size:10.0pt'>t</span></tt>
are sequences of the same type; <tt><span style='font-size:10.0pt'>n</span></tt>,
<tt><span style='font-size:10.0pt'>i</span></tt>, and <tt><span
style='font-size:10.0pt'>j</span></tt> are integers.</p>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 width="100%"
 style='width:100.0%'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><b><span style='font-size:10.0pt'>Operation</span></b></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><b><span style='font-size:10.0pt'>Result</span></b></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><b><span style='font-size:10.0pt'>Notes</span></b></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>x in s</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>1</span></tt><span style='font-size:
  10.0pt'> if an item of </span><tt><span style='font-size:10.0pt'>s</span></tt><span
  style='font-size:10.0pt'> is equal to </span><tt><span style='font-size:10.0pt'>x</span></tt><span
  style='font-size:10.0pt'>, else </span><tt><span style='font-size:10.0pt'>0</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'>&nbsp;</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>x not in s</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>0</span></tt><span style='font-size:
  10.0pt'> if an item of </span><tt><span style='font-size:10.0pt'>s</span></tt><span
  style='font-size:10.0pt'> is equal to </span><tt><span style='font-size:10.0pt'>x</span></tt><span
  style='font-size:10.0pt'>, else </span><tt><span style='font-size:10.0pt'>1</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'>&nbsp;</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>s + t</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>The concatenation of </span><tt><span
  style='font-size:10.0pt'>s</span></tt><span style='font-size:10.0pt'> and </span><tt><span
  style='font-size:10.0pt'>t</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'>&nbsp;</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>s * n , n * s</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>n</span></tt><span style='font-size:
  10.0pt'> copies of </span><tt><span style='font-size:10.0pt'>s</span></tt><span
  style='font-size:10.0pt'> concatenated</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>3</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>s[i]</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>i</span></tt><span style='font-size:
  10.0pt'>âth item of </span><tt><span style='font-size:10.0pt'>s</span></tt><span
  style='font-size:10.0pt'>, origin </span><tt><span style='font-size:10.0pt'>0</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>1</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>s[i:j]</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Slice of </span><tt><span style='font-size:
  10.0pt'>s</span></tt><span style='font-size:10.0pt'> from </span><tt><span
  style='font-size:10.0pt'>i</span></tt><span style='font-size:10.0pt'> to </span><tt><span
  style='font-size:10.0pt'>j</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>1, 2</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>len(s)</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Length of </span><tt><span
  style='font-size:10.0pt'>s</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'>&nbsp;</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>min(s)</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Smallest item of </span><tt><span
  style='font-size:10.0pt'>s</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'>&nbsp;</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>max(s)</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Largest item of </span><tt><span
  style='font-size:10.0pt'>s</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'>&nbsp;</span></p>
  </td>
 </tr>
</table>

<h5 style='page-break-after:avoid'>A.1.6.1 Notes </h5>

<p style='margin-left:.5in;text-indent:-.25in'>1.<span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>If <tt><span style='font-size:10.0pt'>i</span></tt> or <tt><span
style='font-size:10.0pt'>j</span></tt> is negative, the index is relative to
the end of the string; i.e., <tt><span style='font-size:10.0pt'>len(s)</span></tt>
<tt><span style='font-size:10.0pt'>+</span></tt> <tt><span style='font-size:
10.0pt'>i</span></tt> or <tt><span style='font-size:10.0pt'>len(s)</span></tt> <tt><span
style='font-size:10.0pt'>+</span></tt> <tt><span style='font-size:10.0pt'>j</span></tt>
is substituted. But note that <tt><span style='font-size:10.0pt'>-0</span></tt>
is still <tt><span style='font-size:10.0pt'>0</span></tt>.</p>

<p style='margin-left:.5in;text-indent:-.25in'>2.<span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>The slice of <tt><span style='font-size:10.0pt'>s</span></tt> from <tt><span
style='font-size:10.0pt'>i</span></tt> to <tt><span style='font-size:10.0pt'>j</span></tt>
is defined as the sequence of items with index <tt><span style='font-size:10.0pt'>k</span></tt>
such that <tt><span style='font-size:10.0pt'>i</span></tt> <tt><span
style='font-size:10.0pt'>&lt;=</span></tt> <tt><span style='font-size:10.0pt'>k</span></tt>
<tt><span style='font-size:10.0pt'>&lt;</span></tt> <tt><span style='font-size:
10.0pt'>j</span></tt>. If <tt><span style='font-size:10.0pt'>i</span></tt> or <tt><span
style='font-size:10.0pt'>j</span></tt> is greater than <tt><span
style='font-size:10.0pt'>len(s)</span></tt>, use <tt><span style='font-size:
10.0pt'>len(s)</span></tt>. If <tt><span style='font-size:10.0pt'>i</span></tt>
is omitted, use <tt><span style='font-size:10.0pt'>0</span></tt>. If <tt><span
style='font-size:10.0pt'>j</span></tt> is omitted, use <tt><span
style='font-size:10.0pt'>len(s)</span></tt>. If <tt><span style='font-size:
10.0pt'>i</span></tt> is greater than or equal to <tt><span style='font-size:
10.0pt'>j</span></tt>, the slice is empty.</p>

<p style='margin-left:.5in;text-indent:-.25in'>3.<span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Values of <tt><span style='font-size:10.0pt'>n</span></tt> less than <tt><span
style='font-size:10.0pt'>0</span></tt> are treated as <tt><span
style='font-size:10.0pt'>0</span></tt> (which yields an empty sequence of the
same type as <tt><span style='font-size:10.0pt'>s</span></tt>).</p>

<h4>A.1.7 More String Operations </h4>

<p>String objects have one unique built-in operation: the <tt><span
style='font-size:10.0pt'>%operator</span></tt> (modulo) with a string left
argument interprets this string as a C <tt><span style='font-size:10.0pt'>sprintf()</span></tt>
format string to be applied to the right argument and returns the string
resulting from this formatting operation.</p>

<p>The right argument should be a tuple with one item for each argument
required by the format string; if the string requires a single argument, the
right argument may also be a single nontuple object.<a name="_ftnref23"></a><a
href="#_ftn23"><span class=atitlechar><sup><span style='font-size:9.0pt'>[C]</span></sup></span></a>
The following format characters are understood: <tt><span style='font-size:
10.0pt'>%</span></tt>, <tt><span style='font-size:10.0pt'>c</span></tt>, <tt><span
style='font-size:10.0pt'>s</span></tt>, <tt><span style='font-size:10.0pt'>i</span></tt>,
<tt><span style='font-size:10.0pt'>d</span></tt>, <tt><span style='font-size:
10.0pt'>u</span></tt>, <tt><span style='font-size:10.0pt'>o</span></tt>, <tt><span
style='font-size:10.0pt'>x</span></tt>, <tt><span style='font-size:10.0pt'>X</span></tt>,
<tt><span style='font-size:10.0pt'>e</span></tt>, <tt><span style='font-size:
10.0pt'>E</span></tt>, <tt><span style='font-size:10.0pt'>f</span></tt>, <tt><span
style='font-size:10.0pt'>g</span></tt>, <tt><span style='font-size:10.0pt'>G</span></tt>.
Width and precision may be a <tt><span style='font-size:10.0pt'>*</span></tt>
to specify that an integer argument specifies the actual width or precision.
The flag characters <tt><span style='font-size:10.0pt'>-</span></tt>, <tt><span
style='font-size:10.0pt'>+</span></tt>, <tt><span style='font-size:10.0pt'>blank</span></tt>,
<tt><span style='font-size:10.0pt'>#</span></tt>, and <tt><span
style='font-size:10.0pt'>0</span></tt> are understood. The size specifiers <tt><span
style='font-size:10.0pt'>h</span></tt>, <tt><span style='font-size:10.0pt'>l</span></tt>,
or <tt><span style='font-size:10.0pt'>L</span></tt> may be present but are
ignored. The <tt><span style='font-size:10.0pt'>%s</span></tt> conversion takes
any Python object and converts it to a string using <tt><span style='font-size:
10.0pt'>str()</span></tt> before formatting it. The ANSI features <tt><span
style='font-size:10.0pt'>%p</span></tt> and <tt><span style='font-size:10.0pt'>%n</span></tt>
arenât supported. Since Python strings have an explicit length, <tt><span
style='font-size:10.0pt'>%s</span></tt> conversions donât assume that <tt><span
style='font-size:10.0pt'>\0</span></tt> is the end of the string.</p>

<p>For safety reasons, floating-point precisions are clipped to 50; <tt><span
style='font-size:10.0pt'>%f</span></tt> conversions for numbers whose absolute
value is over <tt><span style='font-size:10.0pt'>1e25</span></tt> are replaced
by <tt><span style='font-size:10.0pt'>%g</span></tt> conversions.<a
name="_ftnref24"></a><a href="#_ftn24"><span class=atitlechar><sup><span
style='font-size:9.0pt'>[D]</span></sup></span></a> All other errors raise
exceptions.</p>

<p>If the right argument is a dictionary (or any kind of mapping), the formats
in the string must have a parenthesized key into that dictionary inserted
immediately after the <tt><span style='font-size:10.0pt'>%</span></tt>
character, and each format then formats the corresponding entry from the
mapping. For example:</p>

<pre>&gt;&gt;&gt; count = 2</pre><pre>&gt;&gt;&gt; language = 'Python'</pre><pre>&gt;&gt;&gt; print'%(language)s has %(count)03d quote types.' % vars()</pre><pre>Python has 002 quote types.</pre><pre>&gt;&gt;&gt;</pre>

<p>In this case no <tt><span style='font-size:10.0pt'>*</span></tt> specifiers may
occur in a format (since they require a sequential parameter list).</p>

<p>Additional string operations are defined in standard module <tt><span
style='font-size:10.0pt'>string</span></tt> and in built-in module <tt><span
style='font-size:10.0pt'>re</span></tt>.</p>

<h4>A.1.8 Mutable Sequence Types </h4>

<p>List objects support additional operations that allow in-place modification
of the object. These operations would be supported by other mutable sequence
types (when added to the language) as well. Strings and tuples are immutable
sequence types, and such objects canât be modified once created. The operations
in the following table are defined on mutable sequence types (where <tt><span
style='font-size:10.0pt'>x</span></tt> is an arbitrary object).</p>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 width="100%"
 style='width:100.0%'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><b><span style='font-size:10.0pt'>Operation</span></b></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><b><span style='font-size:10.0pt'>Result</span></b></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><b><span style='font-size:10.0pt'>Notes</span></b></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>s[i] = x</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Item </span><tt><span style='font-size:
  10.0pt'>i</span></tt><span style='font-size:10.0pt'> of </span><tt><span
  style='font-size:10.0pt'>s</span></tt><span style='font-size:10.0pt'> is
  replaced by </span><tt><span style='font-size:10.0pt'>x</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'>&nbsp;</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>s[i:j] = t</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Slice of </span><tt><span style='font-size:
  10.0pt'>s</span></tt><span style='font-size:10.0pt'> from </span><tt><span
  style='font-size:10.0pt'>i</span></tt><span style='font-size:10.0pt'> to </span><tt><span
  style='font-size:10.0pt'>j</span></tt><span style='font-size:10.0pt'> is
  replaced by </span><tt><span style='font-size:10.0pt'>t</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'>&nbsp;</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>del s[i:j]</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Same as </span><tt><span style='font-size:
  10.0pt'>s[i:j]</span></tt><span style='font-size:10.0pt'> </span><tt><span
  style='font-size:10.0pt'>=</span></tt><span style='font-size:10.0pt'> </span><tt><span
  style='font-size:10.0pt'>[]</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'>&nbsp;</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>s.append(x)</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Same as </span><tt><span style='font-size:
  10.0pt'>s[len(s):len(s)]</span></tt><span style='font-size:10.0pt'> </span><tt><span
  style='font-size:10.0pt'>=</span></tt><span style='font-size:10.0pt'> </span><tt><span
  style='font-size:10.0pt'>[x]</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'>&nbsp;</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>s.extend(x)</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Same as </span><tt><span style='font-size:
  10.0pt'>s[len(s):len(s)]</span></tt><span style='font-size:10.0pt'> </span><tt><span
  style='font-size:10.0pt'>=</span></tt><span style='font-size:10.0pt'> </span><tt><span
  style='font-size:10.0pt'>x</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>5</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>s.count(x)</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Return number of </span><tt><span
  style='font-size:10.0pt'>i</span></tt><span style='font-size:10.0pt'>âs for
  which </span><tt><span style='font-size:10.0pt'>s[i]</span></tt><span
  style='font-size:10.0pt'> </span><tt><span style='font-size:10.0pt'>==</span></tt><span
  style='font-size:10.0pt'> </span><tt><span style='font-size:10.0pt'>x</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'>&nbsp;</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>s.index(x)</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Return smallest </span><tt><span
  style='font-size:10.0pt'>i</span></tt><span style='font-size:10.0pt'> such
  that </span><tt><span style='font-size:10.0pt'>s[i]</span></tt><span
  style='font-size:10.0pt'> </span><tt><span style='font-size:10.0pt'>==</span></tt><span
  style='font-size:10.0pt'> </span><tt><span style='font-size:10.0pt'>x</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>1</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>s.insert(i,</span></tt><span
  style='font-size:10.0pt'> </span><tt><span style='font-size:10.0pt'>x)</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Same as </span><tt><span style='font-size:
  10.0pt'>s[i:i]</span></tt><span style='font-size:10.0pt'> </span><tt><span
  style='font-size:10.0pt'>=</span></tt><span style='font-size:10.0pt'> </span><tt><span
  style='font-size:10.0pt'>[x]</span></tt><span style='font-size:10.0pt'> </span><tt><span
  style='font-size:10.0pt'>if</span></tt><span style='font-size:10.0pt'> </span><tt><span
  style='font-size:10.0pt'>i</span></tt><span style='font-size:10.0pt'> </span><tt><span
  style='font-size:10.0pt'>&gt;=</span></tt><span style='font-size:10.0pt'> </span><tt><span
  style='font-size:10.0pt'>0</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'>&nbsp;</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>s.pop([i])</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Same as </span><tt><span style='font-size:
  10.0pt'>x</span></tt><span style='font-size:10.0pt'> </span><tt><span
  style='font-size:10.0pt'>=</span></tt><span style='font-size:10.0pt'> </span><tt><span
  style='font-size:10.0pt'>s[i];</span></tt><span style='font-size:10.0pt'> </span><tt><span
  style='font-size:10.0pt'>del</span></tt><span style='font-size:10.0pt'> </span><tt><span
  style='font-size:10.0pt'>s[i];</span></tt><span style='font-size:10.0pt'> </span><tt><span
  style='font-size:10.0pt'>return</span></tt><span style='font-size:10.0pt'> </span><tt><span
  style='font-size:10.0pt'>x</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>4</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>s.remove(x)</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Same as </span><tt><span style='font-size:
  10.0pt'>del</span></tt><span style='font-size:10.0pt'> </span><tt><span
  style='font-size:10.0pt'>s[s.index(x)]</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>1</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>s.reverse()</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Reverses the items of </span><tt><span
  style='font-size:10.0pt'>s</span></tt><span style='font-size:10.0pt'> in
  place</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>3</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>s.sort([cmpfunc])</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Sort the items of </span><tt><span
  style='font-size:10.0pt'>s</span></tt><span style='font-size:10.0pt'> in
  place</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>2, 3</span></p>
  </td>
 </tr>
</table>

<h5>A.1.8.1 Notes </h5>

<p style='margin-left:.5in;text-indent:-.25in'>1.<span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>This raises an exception when <tt><span style='font-size:10.0pt'>x</span></tt>
is not found in <tt><span style='font-size:10.0pt'>s</span></tt>.</p>

<p style='margin-left:.5in;text-indent:-.25in'>2.<span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>The <tt><span style='font-size:10.0pt'>sort()</span></tt> method takes
an optional argument specifying a comparison function of two arguments (list
items) that should return <tt><span style='font-size:10.0pt'>-1</span></tt>, <tt><span
style='font-size:10.0pt'>0</span></tt>, or <tt><span style='font-size:10.0pt'>1</span></tt>
depending on whether the first argument is considered smaller than, equal to,
or larger than the second argument. Note that this slows the sorting process
considerably; e.g., to sort a list in reverse order, itâs much faster to use
calls to the methods <tt><span style='font-size:10.0pt'>sort()</span></tt> and <tt><span
style='font-size:10.0pt'>reverse()</span></tt> than to use the built-in
function <tt><span style='font-size:10.0pt'>sort()</span></tt> with a
comparison function that reverses the ordering of the elements.</p>

<p style='margin-left:.5in;text-indent:-.25in'>3.<span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>The <tt><span style='font-size:10.0pt'>sort()</span></tt> and <tt><span
style='font-size:10.0pt'>reverse()</span></tt> methods modify the list in place
for economy of space when sorting or reversing a large list. They donât return
the sorted or reversed list to remind you of this side effect.</p>

<p style='margin-left:.5in;text-indent:-.25in'>4.<span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>The <tt><span style='font-size:10.0pt'>pop()</span></tt> method is
experimental and not supported by other mutable sequence types than lists. The
optional argument <tt><span style='font-size:10.0pt'>i</span></tt> defaults to <tt><span
style='font-size:10.0pt'>-1</span></tt>, so that by default, the last item is removed
and returned.</p>

<p style='margin-left:.5in;text-indent:-.25in'>5.<span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>This raises an exception when <tt><span style='font-size:10.0pt'>x</span></tt>
is not a list object. The <tt><span style='font-size:10.0pt'>extend()</span></tt>
method is experimental and not supported by mutable types other than lists.</p>

<h4>A.1.9 Mapping Types </h4>

<p>A mapping object maps values of one type (the <i>key</i> type) to arbitrary
objects. Mappings are mutable objects. There is currently only one standard
mapping type, the <i>dictionary</i> . A dictionaryâs keys are almost arbitrary
values. The only types of values not acceptable as keys are values containing
lists or dictionaries or other mutable types that are compared by value rather
than by object identity. Numeric types used for keys obey the normal rules for
numeric comparison: if two numbers compare equal (e.g., <tt><span
style='font-size:10.0pt'>1</span></tt> and <tt><span style='font-size:10.0pt'>1.0</span></tt>)
then they can be used interchangeably to index the same dictionary entry.</p>

<p>Dictionaries are created by placing a comma-separated list of key: value
pairs within braces, for example: <tt><span style='font-size:10.0pt'>{'jack':</span></tt>
<tt><span style='font-size:10.0pt'>4098,</span></tt> <tt><span
style='font-size:10.0pt'>'sjoerd':</span></tt> <tt><span style='font-size:10.0pt'>4127}</span></tt>
or <tt><span style='font-size:10.0pt'>{4098:</span></tt> <tt><span
style='font-size:10.0pt'>'jack',</span></tt> <tt><span style='font-size:10.0pt'>4127:</span></tt>
<tt><span style='font-size:10.0pt'>'sjoerd'}</span></tt>.</p>

<p>The operations in the following table are defined on mappings (where <tt><i><span
style='font-size:10.0pt'>a</span></i></tt> is a mapping, <tt><i><span
style='font-size:10.0pt'>k</span></i></tt> is a key and <tt><i><span
style='font-size:10.0pt'>x</span></i></tt> is an arbitrary object).</p>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 width="100%"
 style='width:100.0%'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><b><span style='font-size:10.0pt'>Operation</span></b></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><b><span style='font-size:10.0pt'>Result</span></b></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><b><span style='font-size:10.0pt'>Notes</span></b></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>len(a)</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>The number of items in </span><tt><span
  style='font-size:10.0pt'>a</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'>&nbsp;</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>a[k]</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>The item of </span><tt><span
  style='font-size:10.0pt'>a</span></tt><span style='font-size:10.0pt'> with
  key </span><tt><span style='font-size:10.0pt'>k</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>1</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>a[k] = x</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Set </span><tt><span style='font-size:10.0pt'>a[k]</span></tt><span
  style='font-size:10.0pt'> to </span><tt><span style='font-size:10.0pt'>x</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'>&nbsp;</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>del a[k]</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Remove </span><tt><span style='font-size:
  10.0pt'>a[k]</span></tt><span style='font-size:10.0pt'> from </span><tt><span
  style='font-size:10.0pt'>a</span></tt><span style='font-size:10.0pt'> (1)</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'>&nbsp;</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>a.clear()</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Remove all items from </span><tt><span
  style='font-size:10.0pt'>a</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'>&nbsp;</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>a.copy()</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>A (shallow) copy of </span><tt><span
  style='font-size:10.0pt'>a</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'>&nbsp;</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>a.has_key(k)</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>1 if </span><tt><span style='font-size:
  10.0pt'>a</span></tt><span style='font-size:10.0pt'> has a key </span><tt><span
  style='font-size:10.0pt'>k</span></tt><span style='font-size:10.0pt'>, else </span><tt><span
  style='font-size:10.0pt'>0</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><span style='font-size:10.0pt;font-family:Arial'>&nbsp;</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>a.items()</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>A copy of </span><tt><span
  style='font-size:10.0pt'>a</span></tt><span style='font-size:10.0pt'>âs list
  of (key, value) pairs</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>2</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>a.keys()</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>A copy of </span><tt><span
  style='font-size:10.0pt'>a</span></tt><span style='font-size:10.0pt'>âs list
  of keys</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>2</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>a.update(b)</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>For</span></tt><span style='font-size:
  10.0pt'> </span><tt><span style='font-size:10.0pt'>k,</span></tt><span
  style='font-size:10.0pt'> </span><tt><span style='font-size:10.0pt'>v</span></tt><span
  style='font-size:10.0pt'> </span><tt><span style='font-size:10.0pt'>in</span></tt><span
  style='font-size:10.0pt'> </span><tt><span style='font-size:10.0pt'>b.items():</span></tt><span
  style='font-size:10.0pt'> </span><tt><span style='font-size:10.0pt'>a[k]</span></tt><span
  style='font-size:10.0pt'> </span><tt><span style='font-size:10.0pt'>=</span></tt><span
  style='font-size:10.0pt'> </span><tt><span style='font-size:10.0pt'>v</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>3</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>a.values()</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>A copy of </span><tt><span
  style='font-size:10.0pt'>a</span></tt><span style='font-size:10.0pt'>âs list
  of values</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>2</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>a.get(k[,</span></tt><span
  style='font-size:10.0pt'> </span><tt><span style='font-size:10.0pt'>f])</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>The value of </span><tt><span
  style='font-size:10.0pt'>a</span></tt><span style='font-size:10.0pt'> with
  key </span><tt><span style='font-size:10.0pt'>k</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>4</span></p>
  </td>
 </tr>
</table>

<h5>A.1.9.1 Notes</h5>

<p style='margin-left:.5in;text-indent:-.25in'>1.<span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>This raises an exception if <tt><span style='font-size:10.0pt'>k</span></tt>
is not in the map.</p>

<p style='margin-left:.5in;text-indent:-.25in'>2.<span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Keys and values are listed in random order.</p>

<p style='margin-left:.5in;text-indent:-.25in'>3.<span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><tt><span style='font-size:10.0pt'>b</span></tt> must be the same type
as <tt><span style='font-size:10.0pt'>a</span></tt>.</p>

<p style='margin-left:.5in;text-indent:-.25in'>4.<span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>This never raises an exception if <tt><span style='font-size:10.0pt'>k</span></tt>
is not in the map, instead it returns <tt><span style='font-size:10.0pt'>f</span></tt>.
<tt><span style='font-size:10.0pt'>f</span></tt> is optional; when not provided
and <tt><span style='font-size:10.0pt'>k</span></tt> is not in the map, <tt><span
style='font-size:10.0pt'>None</span></tt> is returned.</p>

<h4>A.1.10 Other Built-in Types </h4>

<p>The interpreter supports several other kinds of objects. Most of these
support only one or two operations.</p>

<h5>A.1.10.1 Modules </h5>

<p>The only special operation on a module is attribute access: <tt><i><span
style='font-size:10.0pt'>m</span></i></tt><tt><span style='font-size:10.0pt'>.name</span></tt>,
where <tt><i><span style='font-size:10.0pt'>m</span></i></tt> is a module and <tt><span
style='font-size:10.0pt'>name</span></tt> accesses a name defined in <tt><i><span
style='font-size:10.0pt'>m </span></i></tt>âs symbol table. The <tt><span
style='font-size:10.0pt'>import</span></tt> statement is not, strictly
speaking, an operation on a module object; <tt><span style='font-size:10.0pt'>import</span></tt>
<tt><span style='font-size:10.0pt'>foo</span></tt> doesnât require a module
object named <tt><span style='font-size:10.0pt'>foo</span></tt> to exist,
rather it requires an (external) definition for a module named <tt><span
style='font-size:10.0pt'>foo</span></tt> somewhere.</p>

<p>A special member of every module is <tt><span style='font-size:10.0pt'>__dict__</span></tt>.
This is the dictionary containing the moduleâs symbol table. Modifying this
dictionary changes the moduleâs symbol table, but direct assignment to the <tt><span
style='font-size:10.0pt'>__dict__</span></tt> attribute isnât possible (i.e.,
you can write <tt><span style='font-size:10.0pt'>m.__dict_ _['a']</span></tt> <tt><span
style='font-size:10.0pt'>=</span></tt> <tt><span style='font-size:10.0pt'>1</span></tt>,
which defines <tt><span style='font-size:10.0pt'>m.a</span></tt> to be 1, but
you canât write <tt><span style='font-size:10.0pt'>m.__dict__</span></tt> <tt><span
style='font-size:10.0pt'>=</span></tt> <tt><span style='font-size:10.0pt'>{}</span></tt>.</p>

<p>Modules built into the interpreter are written like this: <tt><span
style='font-size:10.0pt'>&lt;module</span></tt> <tt><span style='font-size:
10.0pt'>'sys'</span></tt> <tt><span style='font-size:10.0pt'>(built-in)&gt;.</span></tt>
If loaded from a file, they are written as <tt><span style='font-size:10.0pt'>&lt;module</span></tt>
<tt><span style='font-size:10.0pt'>'os'</span></tt> <tt><span style='font-size:
10.0pt'>from</span></tt> <tt><span style='font-size:10.0pt'>'/usr/local/lib/python1.5/os.pyc'&gt;.</span></tt></p>

<h5>A.1.10.2 Classes and class instances </h5>

<p>See Chapters 3 and 7 of the Python reference manual.</p>

<h5>A.1.10.3 Functions </h5>

<p>Function objects are created by function definitions. The only operation on
a function object is to call it: <tt><span style='font-size:10.0pt'>func(argument-list)</span></tt>.</p>

<p>There are really two flavors of function objects, built-in functions and
user-defined functions. Both support the same operation (to call the function),
but the implementation is different, hence the different object types.</p>

<p>The implementation adds two special read-only attributes: <tt><i><span
style='font-size:10.0pt'>f</span></i></tt><tt><span style='font-size:10.0pt'>.func_code</span></tt>
is a functionâs code object , and <tt><i><span style='font-size:10.0pt'>f</span></i></tt><tt><span
style='font-size:10.0pt'>.func_globals</span></tt> is the dictionary used as
the functionâs global namespace (this is the same as <tt><i><span
style='font-size:10.0pt'>m</span></i></tt><tt><span style='font-size:10.0pt'>.__dict__</span></tt>
where <tt><i><span style='font-size:10.0pt'>m</span></i></tt> is the module in
which the function <tt><i><span style='font-size:10.0pt'>f</span></i></tt> was
defined).</p>

<h5>A.1.10.4 Methods </h5>

<p>Methods are functions that are called using the attribute notation. There
are two flavors: built-in methods (such as <tt><span style='font-size:10.0pt'>append()</span></tt>
on lists) and class instance methods. Built-in methods are described with the
types that support them.</p>

<p>The implementation adds two special read-only attributes to class instance
methods: <tt><i><span style='font-size:10.0pt'>m</span></i></tt><tt><span
style='font-size:10.0pt'>.im_self</span></tt> is the object on which the method
operates, and <tt><i><span style='font-size:10.0pt'>m</span></i></tt><tt><span
style='font-size:10.0pt'>.im_func</span></tt> is the function implementing the
method. Calling <tt><i><span style='font-size:10.0pt'>m(arg-1,</span></i></tt> <tt><i><span
style='font-size:10.0pt'>arg-2,</span></i></tt> <tt><i><span style='font-size:
10.0pt'>...,</span></i></tt> <tt><i><span style='font-size:10.0pt'>arg-n)</span></i></tt>
is equivalent to calling <tt><i><span style='font-size:10.0pt'>m.im_func(m.im_self,</span></i></tt>
<tt><i><span style='font-size:10.0pt'>arg-1,</span></i></tt> <tt><i><span
style='font-size:10.0pt'>arg-2,</span></i></tt> <tt><i><span style='font-size:
10.0pt'>...,</span></i></tt> <tt><i><span style='font-size:10.0pt'>arg-n)</span></i></tt>.
See the Python reference manual for more information.</p>

<h5>A.1.10.5 Code objects </h5>

<p>Code objects are used by the implementation to represent âpseudo-compiledâ
executable Python code such as a function body. They differ from function
objects because they donât contain a reference to their global execution
environment. Code objects are returned by the built-in <tt><span
style='font-size:10.0pt'>compile()</span></tt> function and can be extracted
from function objects through their <tt><span style='font-size:10.0pt'>func_code</span></tt>
attribute.</p>

<p>A code object can be executed or evaluated by passing it (instead of a
source string) to the exec statement or the built-in <tt><span
style='font-size:10.0pt'>eval()</span></tt> function. See the Python reference
manual for more information.</p>

<h5>A.1.10.6 Type objects </h5>

<p>Type objects represent the various object types. An objectâs type is
accessed by the built-in function <tt><span style='font-size:10.0pt'>type()</span></tt>.
There are no special operations on types. The standard module type defines
names for all standard built-in types. Types are written like this: <tt><span
style='font-size:10.0pt'>&lt;type</span></tt> <tt><span style='font-size:10.0pt'>'int'&gt;</span></tt>.</p>

<h5>A.1.10.7 The null object </h5>

<p>This object is returned by functions that donât explicitly return a value.
It supports no special operations. There is exactly one null object, named <tt><span
style='font-size:10.0pt'>None</span></tt> (a built-in name); itâs written as <tt><span
style='font-size:10.0pt'>None</span></tt>.</p>

<h5>A.1.10.8 The ellipsis object </h5>

<p>This object is used by extended slice notation (see the Python reference
manual). It supports no special operations. There is one ellipsis object, named
<tt><span style='font-size:10.0pt'>Ellipsis</span></tt> (a built-in name); itâs
written as <tt><span style='font-size:10.0pt'>Ellipsis</span></tt>.</p>

<h5>A.1.10.9 File objects </h5>

<p>File objects are implemented using Câs <tt><span style='font-size:10.0pt'>stdio</span></tt>
package and can be created with the built-in function <tt><span
style='font-size:10.0pt'>open()</span></tt> (described in the section <a
href="#_A.3_Built-in_Functions">Section A.3</a>). They are also returned by
some other built-in functions and methods, e.g., <tt><span style='font-size:
10.0pt'>posix.popen()</span></tt> and <tt><span style='font-size:10.0pt'>posix.fdopen()</span></tt>,
and the <tt><span style='font-size:10.0pt'>makefile()</span></tt> method of
socket objects.</p>

<p>When a file operation fails for an I/O-related reason, the exception <tt><span
style='font-size:10.0pt'>IOError</span></tt> is raised. This includes
situations where the operation isnât defined for some reason, such as <tt><span
style='font-size:10.0pt'>seek()</span></tt> on a tty device or writing a file
opened for reading. Files have the following methods:</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>close()</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Closes the file. A closed file canât be read or
written.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>flush()</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Flushes the internal buffer; like <tt><span
style='font-size:10.0pt'>stdio</span></tt>âs <tt><span style='font-size:10.0pt'>fflush()</span></tt>.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>isatty()</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Returns 1 if the file is connected to a tty (-like)
device, else 0.</p>

<p class=MsoNormal style='page-break-after:avoid'><span class=monofont1><span
style='color:#990000'>fileno()</span></span><span style='font-family:Arial;
color:#990000'> </span></p>

<p style='margin-left:.5in'>Returns the integer âfile descriptorâ thatâs used
by the underlying implementation to request I/O operations from the operating
system. This can be useful for other, lower-level interfaces that use file
descriptors, e.g., module <tt><span style='font-size:10.0pt'>fcntl</span></tt>
or <tt><span style='font-size:10.0pt'>os.read()</span></tt> and friends.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>read([</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>size</span></i></tt><span
class=monofont1><span style='color:#990000'>])</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Reads at most <tt><i><span style='font-size:10.0pt'>size</span></i></tt>
bytes from the file (less if the read hits <tt><span style='font-size:10.0pt'>EOF</span></tt>
or no more data is immediately available on a pipe, tty, or similar device). If
the size argument is negative or omitted, read all data until <tt><span
style='font-size:10.0pt'>EOF</span></tt> is reached. The bytes are returned as
a string object. An empty string is returned when <tt><span style='font-size:
10.0pt'>EOF</span></tt> is encountered immediately. (For certain files, like
ttys, it makes sense to continue reading after an <tt><span style='font-size:
10.0pt'>EOF</span></tt> is hit.)</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>readline([</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>size</span></i></tt><span
class=monofont1><span style='color:#990000'>])</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Reads one entire line from the file. A trailing
newline character is kept in the string<a name="_ftnref25"></a><a href="#_ftn25"><span
class=atitlechar><sup><span style='font-size:9.0pt'>[E]</span></sup></span></a>
(but may be absent when a file ends with an incomplete line). If the size
argument is present and nonnegative, itâs a maximum byte count (including the
trailing newline), and an incomplete line may be returned. An empty string is
returned when EOF is hit immediately. Unlike <tt><span style='font-size:10.0pt'>stdio</span></tt>âs
<tt><span style='font-size:10.0pt'>fgets()</span></tt>, the returned string
contains null characters (<tt><span style='font-size:10.0pt'>\0</span></tt>) if
they occurred in the input.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>readlines([</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>sizehint</span></i></tt><span
class=monofont1><span style='color:#990000'>])</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Reads until EOF using <tt><span style='font-size:
10.0pt'>readline()</span></tt> and return a list containing the lines thus
read. If the optional <tt><i><span style='font-size:10.0pt'>sizehint</span></i></tt>
argument is present, instead of reading up to EOF, whole lines totaling
approximately <tt><i><span style='font-size:10.0pt'>sizehint</span></i></tt> bytes
(possibly after rounding up to an internal buffer size) are read.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>seek(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>offset</span></i></tt><span
class=monofont1><span style='color:#990000'>[,</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>whence</span></i></tt><span
class=monofont1><span style='color:#990000'>])</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Sets the fileâs current position; like <tt><span
style='font-size:10.0pt'>stdio</span></tt>âs <tt><span style='font-size:10.0pt'>fseek()</span></tt>.
The <tt><i><span style='font-size:10.0pt'>whence</span></i></tt> argument is
optional and defaults to (absolute file positioning); other values are 1 (seek
relative to the current position) and 2 (seek relative to the fileâs end).
Thereâs no return value.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>tell()</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Returns the fileâs current position; like <tt><span
style='font-size:10.0pt'>stdio</span></tt>âs <tt><span style='font-size:10.0pt'>ftell()</span></tt>.</p>

<p class=MsoNormal style='page-break-after:avoid'><span class=monofont1><span
style='color:#990000'>truncate([</span></span><span style='font-family:Arial;
color:#990000'> &nbsp; </span><tt><i><span style='font-size:10.0pt;color:#990000'>size</span></i></tt><span
class=monofont1><span style='color:#990000'>])</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Truncates the fileâs size. If the optional <tt><i><span
style='font-size:10.0pt'>size</span></i></tt> argument is present, the file is
truncated to (at most) that size. The size defaults to the current position.
Availability of this function depends on the operating-system version (e.g.,
not all Unix versions support this operation).</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>write(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>str</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Writes a string to the file. There is no return
value. Due to buffering, the string may not actually show up in the file until
the <tt><span style='font-size:10.0pt'>flush()</span></tt> or <tt><span
style='font-size:10.0pt'>close()</span></tt> method is called.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>writelines(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>list</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Writes a list of strings to the file. There is no
return value. (The name is intended to match <tt><span style='font-size:10.0pt'>readlines()</span></tt>;
<tt><span style='font-size:10.0pt'>writelines()</span></tt> doesnât add line
separators.)</p>

<p>File objects also offer the following attributes:</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>closed</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Boolean indicating the current state of the file
object. This is a read-only attribute; the <tt><span style='font-size:10.0pt'>close()</span></tt>
method changes the value.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>mode</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>The I/O mode for the file. If the file is created
using the <tt><span style='font-size:10.0pt'>open()</span></tt> built-in
function, this is the value of the mode parameter. This is a read-only
attribute.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>name</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>If the file object was created using <tt><span
style='font-size:10.0pt'>open()</span></tt>, this is the name of the file.
Otherwise, itâs some string that indicates the source of the file object, of
the form <tt><span style='font-size:10.0pt'>&lt;...&gt;</span></tt>. This is a
read-only attribute.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>softspace</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Boolean that indicates whether a space character
needs to be printed before another value when using the print statement.
Classes that are trying to simulate a file object should also have a writable <tt><span
style='font-size:10.0pt'>softspace</span></tt> attribute, which should be
initialized to zero. This is automatic for classes implemented in Python; types
implemented in C have to provide a writable <tt><span style='font-size:10.0pt'>softspace</span></tt>
attribute.</p>

<h5 style='page-break-after:avoid'>A.1.10.10 Internal objects </h5>

<p>See the Python reference manual for this information. It describes <tt><span
style='font-size:10.0pt'>code</span></tt> objects, <tt><span style='font-size:
10.0pt'>stack</span></tt> <tt><span style='font-size:10.0pt'>frame</span></tt>
objects, <tt><span style='font-size:10.0pt'>traceback</span></tt> objects, and <tt><span
style='font-size:10.0pt'>slice</span></tt> objects.</p>

<h5>A.1.10.11 Special attributes </h5>

<p>The implementation adds a few special read-only attributes to several object
types, where they are relevant:</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>__dict__</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>A dictionary of some sort that stores an objectâs
(writable) attributes</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>__methods__</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>List of the methods of many built-in object types,
e.g., <tt><span style='font-size:10.0pt'>[].__methods__</span></tt> yields <tt><span
style='font-size:10.0pt'>['append',</span></tt> <tt><span style='font-size:
10.0pt'>'count',</span></tt> <tt><span style='font-size:10.0pt'>'index',</span></tt>
<tt><span style='font-size:10.0pt'>'insert',</span></tt> <tt><span
style='font-size:10.0pt'>'pop',</span></tt> <tt><span style='font-size:10.0pt'>'remove',</span></tt>
<tt><span style='font-size:10.0pt'>'reverse',</span></tt> <tt><span
style='font-size:10.0pt'>'sort']</span></tt></p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>__members__</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Similar to <tt><span style='font-size:10.0pt'>__methods__</span></tt>,
but lists data attributes</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>__class__</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>The class to which a class instance belongs</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>__bases__</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>The tuple of base classes of a <tt><span
style='font-size:10.0pt'>class</span></tt> object</p>

<h3><a name="_A.2_Built-in_Exceptions"></a>A.2 Built-in Exceptions </h3>

<p>Exceptions can be <tt><span style='font-size:10.0pt'>class</span></tt> or <tt><span
style='font-size:10.0pt'>string</span></tt> objects. While most exceptions have
traditionally been <tt><span style='font-size:10.0pt'>string</span></tt>
objects, in Python 1.5 all standard exceptions have been converted to class
objects, and users are encouraged to do the same. The source code for those
exceptions is present in the standard library-module exceptions; this module
never needs to be imported explicitly.</p>

<p>For backward compatibility, when Python is invoked with the -<tt><span
style='font-size:10.0pt'>X</span></tt> option, most standard exceptions are
strings.<a name="_ftnref26"></a><a href="#_ftn26" title=""><span
class=atitlechar><sup><span style='font-size:9.0pt'>[F]</span></sup></span></a>
This option can run code that breaks because of the different semantics of
class-based exceptions. The -<tt><span style='font-size:10.0pt'>X</span></tt>
option will become obsolete in future Python versions, so the recommended
solution is to fix the code.</p>

<p>Two distinct string objects with the same value are considered different
exceptions. This forces programmers to use exception names rather than their
string value when specifying exception handlers. The string value of all
built-in exceptions is their name, but this isnât a requirement for
user-defined exceptions or exceptions defined by library modules.</p>

<p>For class exceptions, in a <tt><span style='font-size:10.0pt'>try</span></tt>
statement with an except clause that mentions a particular class, that clause
also handles any exception classes derived from that class (but not exception
classes from which it is derived). Two exception classes that arenât related
via subclassing are never equivalent, even if they have the same name.</p>

<p>The built-in exceptions in the following list can be generated by the
interpreter or built-in functions. Except where mentioned, they have an
âassociated valueâ indicating the detailed cause of the error. This may be a
string or a tuple containing several items of information (e.g., an error code
and a string explaining the code). The associated value is the second argument
to the raise statement. For string exceptions, the associated value itself is
stored in the variable named as the second argument of the <tt><span
style='font-size:10.0pt'>except</span></tt> clause (if any). For class
exceptions, that variable receives the exception instance. If the exception
class is derived from the standard root class <tt><span style='font-size:10.0pt'>Exception</span></tt>,
the associated value is present as the exception instanceâs <tt><span
style='font-size:10.0pt'>args</span></tt> attribute, and possibly on other
attributes as well.</p>

<p>User code can raise built-in exceptions. This code can test an exception
handler or report an error condition âjust likeâ the situation in which the
interpreter raises the same exception; but beware that there is nothing to
prevent user code from raising an inappropriate error.</p>

<p>The following exceptions are used only as base classes for other exceptions.
When string-based standard exceptions are used, they are tuples containing the
directly derived classes:</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>Exception</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>The root class for exceptions. All built-in
exceptions are derived from this class. All user-defined exceptions should also
be derived from this class, but this isnât (yet) enforced. The <tt><span
style='font-size:10.0pt'>str()</span></tt> function, when applied to an
instance of this class (or most derived classes) returns the string value of
the argument or arguments, or an empty string if no arguments were given to the
constructor. When used as a sequence, this accesses the arguments given to the
constructor (handy for backward compatibility with old code). The arguments are
also available on the instanceâs <tt><span style='font-size:10.0pt'>args</span></tt>
attribute, as a tuple.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>StandardError</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>The base class for all built-in exceptions except <tt><span
style='font-size:10.0pt'>SystemExit</span></tt>. <tt><span style='font-size:
10.0pt'>StandardError</span></tt> itself is derived from the root class <tt><span
style='font-size:10.0pt'>Exception</span></tt>.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>ArithmeticError</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>The base class for those built-in exceptions that
are raised for various arithmetic errors: <tt><span style='font-size:10.0pt'>OverflowError</span></tt>,
<tt><span style='font-size:10.0pt'>ZeroDivisionError</span></tt>, <tt><span
style='font-size:10.0pt'>FloatingPointError</span></tt>.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>LookupError</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>The base class for the exceptions that are raised
when a key or index used on a mapping or sequence is invalid: <tt><span
style='font-size:10.0pt'>IndexError</span></tt>, <tt><span style='font-size:
10.0pt'>KeyError</span></tt>.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>EnvironmentError</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>The base class for exceptions that can occur
outside the Python system: <tt><span style='font-size:10.0pt'>IOError</span></tt>,
<tt><span style='font-size:10.0pt'>OSError</span></tt>. When exceptions of this
type are created with a two-tuple, the first item is available on the
instanceâs <tt><span style='font-size:10.0pt'>errno</span></tt> attribute (itâs
assumed to be an error number), and the second item is available on the <tt><span
style='font-size:10.0pt'>strerror</span></tt> attribute (itâs usually the
associated error message). The tuple itself is also available on the <tt><span
style='font-size:10.0pt'>args</span></tt> attribute. New in Version 1.5.2.</p>

<p style='margin-left:.5in'>When an <tt><span style='font-size:10.0pt'>EnvironmentError</span></tt>
exception is instantiated with a three-tuple, the first two items are available
as above, while the third item is available on the filename attribute. However,
for backward-compatibility, the <tt><span style='font-size:10.0pt'>args</span></tt>
attribute contains only a two-tuple of the first two constructor arguments.</p>

<p style='margin-left:.5in'>The filename attribute is <tt><span
style='font-size:10.0pt'>None</span></tt> when this exception is created with
other than three arguments. The <tt><span style='font-size:10.0pt'>errno</span></tt>
and <tt><span style='font-size:10.0pt'>strerror</span></tt> attributes are also
<tt><span style='font-size:10.0pt'>None</span></tt> if the instance was created
with other than two or three arguments. In this last case, <tt><span
style='font-size:10.0pt'>args</span></tt> contains the verbatim constructor
arguments as a tuple.</p>

<p>The following exceptions are those actually raised. They are class objects,
except when the <tt><span style='font-size:10.0pt'>-X</span></tt> option is
used to revert back to string-based standard exceptions:</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>AssertionError</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Raised when an assert statement fails.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>AttributeError</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Raised when an attribute reference or assignment
fails. (When an object doesnât support attribute references or attribute
assignments at all, <tt><span style='font-size:10.0pt'>TypeError</span></tt> is
raised.)</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>EOFError</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Raised when one of the built-in functions (<tt><span
style='font-size:10.0pt'>input()</span></tt> or <tt><span style='font-size:
10.0pt'>raw_input()</span></tt>) hits an end-of-file condition (EOF) without
reading any data. (Note that the <tt><span style='font-size:10.0pt'>read()</span></tt>
and <tt><span style='font-size:10.0pt'>readline()</span></tt> methods of file
objects return an empty string when they hit EOF.)</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>FloatingPointError</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Raised when a floating-point operation fails. This
exception is always defined, but can be raised only when Python is configured
with the <tt><span style='font-size:10.0pt'>-with-fpectl</span></tt> option or
the <tt><span style='font-size:10.0pt'>WANT_SIGFPE_HANDLER</span></tt> symbol
is defined in the <i>config.h</i> file.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>IOError</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Raised when an I/O operation (such as a print
statement, the built-in <tt><span style='font-size:10.0pt'>open()</span></tt>
function, or a method of a file object) fails for an I/O-related reason, e.g.,
file not found or disk full.</p>

<p style='margin-left:.5in'>This class is derived from <tt><span
style='font-size:10.0pt'>EnvironmentError</span></tt>. See its previous
discussion for more information on exception-instance attributes.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>ImportError</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Raised when an import statement fails to find the
module definition or when a <tt><span style='font-size:10.0pt'>from</span></tt>
<tt><span style='font-size:10.0pt'>...</span></tt> <tt><span style='font-size:
10.0pt'>import</span></tt> fails to find a name thatâs to be imported.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>IndexError</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Raised when a sequence subscript is out of range.
(Slice indexes are silently truncated to fall in the allowed range; if an index
isnât a plain integer, <tt><span style='font-size:10.0pt'>TypeError</span></tt>
is raised.)</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>KeyError</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Raised when a mapping (dictionary) key is not found
in the set of existing keys.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>KeyboardInterrupt</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Raised when the user hits the interrupt key
(normally Ctrl-C or Del). During execution, a check for interrupts is made
regularly. Interrupts typed when a built-in function <tt><span
style='font-size:10.0pt'>input()</span></tt> or <tt><span style='font-size:
10.0pt'>raw_input()</span></tt>) is waiting for input also raise this
exception.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>MemoryError</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Raised when an operation runs out of memory but the
situation may still be rescued (by deleting some objects). The associated value
is a string indicating what kind of (internal) operation ran out of memory.
Note that because of the underlying memory-management architecture (Câs <tt><span
style='font-size:10.0pt'>malloc()</span></tt> function), the interpreter may
not always completely recover from this situation; it nevertheless raises an
exception so that a stack traceback can be printed, in case a runaway program
was the cause.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>NameError</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Raised when a local or global name is not found.
Applies only to unqualified names. The associated value is the name that canât
be found.</p>

<p class=MsoNormal style='page-break-after:avoid'><span class=monofont1><span
style='color:#990000'>NotImplementedError</span></span><span style='font-family:
Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Derived from <tt><span style='font-size:10.0pt'>RuntimeError</span></tt>.
In user-defined base classes, abstract methods should raise this exception when
they require derived classes to override the method. New in Version 1.5.2.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>OSError</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Derived from <tt><span style='font-size:10.0pt'>EnvironmentError</span></tt>
and is used primarily as the <tt><span style='font-size:10.0pt'>os</span></tt>
moduleâs <tt><span style='font-size:10.0pt'>os.error</span></tt> exception. See
<tt><span style='font-size:10.0pt'>EnvironmentError</span></tt> in the first
exception list for a description of the possible associated values. New in
Version 1.5.2.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>OverflowError</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Raised when the result of an arithmetic operation
is too large to be represented. This canât occur for long integers (which would
rather raise <tt><span style='font-size:10.0pt'>MemoryError</span></tt> than
give up). Because of the lack of standardization of floating-point exception
handling in C, most floating-point operations also arenât checked. For plain
integers, all operations that can overflow are checked except left shift, where
typical applications prefer to drop bits than raise an exception.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>RuntimeError</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Raised when an error is detected that doesnât fall
in any of the other categories. The associated value is a string indicating
what precisely went wrong. (This exception is mostly a relic from a previous
version of the interpreter; it isnât used much any more.)</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>SyntaxError</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Raised when the parser encounters a syntax error.
This may occur in an <tt><span style='font-size:10.0pt'>import</span></tt>
statement, in an <tt><span style='font-size:10.0pt'>exec</span></tt> statement,
in a call to the built-in function <tt><span style='font-size:10.0pt'>eval()</span></tt>
or <tt><span style='font-size:10.0pt'>input()</span></tt>, or when reading the
initial script or standard input (also interactively).</p>

<p style='margin-left:.5in'>When class exceptions are used, instances of this
class have attributes <tt><span style='font-size:10.0pt'>filename</span></tt>, <tt><span
style='font-size:10.0pt'>lineno</span></tt>, <tt><span style='font-size:10.0pt'>offset</span></tt>,
and <tt><span style='font-size:10.0pt'>text</span></tt> for easier access to
the details; for string exceptions, the associated value is usually a tuple of
the form <tt><i><span style='font-size:10.0pt'>(message,</span></i></tt> <tt><i><span
style='font-size:10.0pt'>(filename,</span></i></tt> <tt><i><span
style='font-size:10.0pt'>lineno,</span></i></tt> <tt><i><span style='font-size:
10.0pt'>offset,</span></i></tt> <tt><i><span style='font-size:10.0pt'>text)</span></i></tt>.
For class exceptions, <tt><span style='font-size:10.0pt'>str()</span></tt>
returns only the message.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>SystemError</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Raised when the interpreter finds an internal
error, but the situation doesnât look so serious to cause it to abandon all
hope. The associated value is a string indicating what went wrong (in low-level
terms). You should report this to the author or maintainer of your Python
interpreter. Be sure to report the version string of the Python interpreter (<tt><span
style='font-size:10.0pt'>sys.version</span></tt>, also printed at the start of
an interactive Python session), the exact error message (the exceptionâs
associated value), and, if possible, the source of the program that triggered
the error.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>SystemExit</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Raised by the <tt><span style='font-size:10.0pt'>sys.exit()</span></tt>
function. When itâs not handled, the Python interpreter exits; no stack
traceback is printed. If the associated value is a plain integer, it specifies
the system exit status (passed to Câs <tt><span style='font-size:10.0pt'>exit()</span></tt>
function); if itâs <tt><span style='font-size:10.0pt'>None</span></tt>, the
exit status is zero; if it has another type (such as a string), the objectâs
value is printed, and the exit status is one.</p>

<p style='margin-left:.5in'>When class exceptions are used, the instance has an
attribute code that is set to the proposed exit status or error message
(defaulting to <tt><span style='font-size:10.0pt'>None</span></tt>). Also, this
exception derives directly from <tt><span style='font-size:10.0pt'>Exception</span></tt>
and not <tt><span style='font-size:10.0pt'>StandardError</span></tt>, since it
isnât technically an error. A call to <tt><span style='font-size:10.0pt'>sys.exit()</span></tt>
is translated into an exception so that clean-up handlers (finally clauses of <tt><span
style='font-size:10.0pt'>try</span></tt> statements) can be executed, and so
that a debugger can execute a script without running the risk of losing
control. The <tt><span style='font-size:10.0pt'>os._exit()</span></tt> function
can be used if itâs absolutely necessary to exit immediately (e.g., after a <tt><span
style='font-size:10.0pt'>fork()</span></tt> in the child process).</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>TypeError</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Raised when a built-in operation or function is
applied to an object of inappropriate type. The associated value is a string
giving details about the type mismatch.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>ValueError</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Raised when a built-in operation or function receives
an argument that has the right type but an inappropriate value, and the
situation is not described by a more precise exception such as <tt><span
style='font-size:10.0pt'>IndexError</span></tt>.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>ZeroDivisionError</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Raised when the second argument of a division or
modulo operation is zero. The associated value is a string indicating the type
of the operands and the operation.</p>

<h3><a name="_A.3_Built-in_Functions"></a>A.3 Built-in Functions </h3>

<p>The Python interpreter has a number of built-in functions that are always
available. They are listed here in alphabetical order:</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>__import__(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>name[,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><span class=monofont1><span
style='color:#990000'>globals</span></span><span style='font-family:Arial;
color:#990000'> &nbsp; </span><tt><i><span style='font-size:10.0pt;color:#990000'>[,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><span class=monofont1><span
style='color:#990000'>locals</span></span><span style='font-family:Arial;
color:#990000'> &nbsp; </span><tt><i><span style='font-size:10.0pt;color:#990000'>[,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>fromlist]]]</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>This function is invoked by the <tt><span
style='font-size:10.0pt'>import</span></tt> statement. It exists so that you
can replace it with another function that has a compatible interface, in order
to change the semantics of the <tt><span style='font-size:10.0pt'>import</span></tt>
statement. For examples of why and how youâd do this, see the standard library
modules <tt><span style='font-size:10.0pt'>ihooks</span></tt> and <tt><span
style='font-size:10.0pt'>rexec</span></tt>. See also the built-in module <tt><span
style='font-size:10.0pt'>imp</span></tt> that defines some useful operations
from which you can build your own <tt><span style='font-size:10.0pt'>__import__()</span></tt>
function.</p>

<p style='margin-left:.5in'>For example, the statement <tt><span
style='font-size:10.0pt'>import</span></tt> <tt><span style='font-size:10.0pt'>spam</span></tt>
results in the call <tt><span style='font-size:10.0pt'>__import_ _('spam',</span></tt>
<tt><span style='font-size:10.0pt'>globals(),</span></tt> <tt><span
style='font-size:10.0pt'>locals(),</span></tt> <tt><span style='font-size:10.0pt'>[])</span></tt>;
the statement <tt><span style='font-size:10.0pt'>from</span></tt> <tt><span
style='font-size:10.0pt'>spam.ham</span></tt> <tt><span style='font-size:10.0pt'>import</span></tt>
<tt><span style='font-size:10.0pt'>eggs</span></tt> results in <tt><span
style='font-size:10.0pt'>__import__('spam.ham',</span></tt> <tt><span
style='font-size:10.0pt'>globals(),</span></tt> <tt><span style='font-size:
10.0pt'>locals(),['eggs']</span></tt>). Even though <tt><span style='font-size:
10.0pt'>locals()</span></tt> and <tt><span style='font-size:10.0pt'>['eggs']</span></tt>
are passed in as arguments, the <tt><span style='font-size:10.0pt'>__import__()</span></tt>
function doesnât set the local variable named <tt><span style='font-size:10.0pt'>eggs</span></tt>;
this is done by subsequent code thatâs generated for the import statement. (In
fact, the standard implementation doesnât use its <tt><span style='font-size:
10.0pt'>locals</span></tt> argument at all, and uses its <tt><span
style='font-size:10.0pt'>globals</span></tt> only to determine the package
context of the <tt><span style='font-size:10.0pt'>import</span></tt>
statement.)</p>

<p style='margin-left:.5in'>When the name variable is of the form <tt><i><span
style='font-size:10.0pt'>package.module</span></i></tt>, normally, the
top-level package (the name up to the first dot) is returned, not the module
named by <tt><span style='font-size:10.0pt'>name</span></tt>. However, when a
nonempty <tt><span style='font-size:10.0pt'>fromlist</span></tt> argument is
given, the module named by <tt><span style='font-size:10.0pt'>name</span></tt> is
returned. This is done for compatibility with the bytecode generated for the
different kinds of <tt><span style='font-size:10.0pt'>import</span></tt>
statement; when using <tt><span style='font-size:10.0pt'>import</span></tt> <tt><span
style='font-size:10.0pt'>spam.ham.eggs</span></tt>, the top-level package <tt><span
style='font-size:10.0pt'>spam</span></tt> must be placed in the importing
namespace, but when using <tt><span style='font-size:10.0pt'>from</span></tt> <tt><span
style='font-size:10.0pt'>spam.ham</span></tt> <tt><span style='font-size:10.0pt'>import</span></tt>
<tt><span style='font-size:10.0pt'>eggs</span></tt>, the <tt><span
style='font-size:10.0pt'>spam.ham</span></tt> subpackage must find the <tt><span
style='font-size:10.0pt'>eggs</span></tt> variable. As a workaround for this
behavior, use <tt><span style='font-size:10.0pt'>getattr()</span></tt> to
extract the desired components. For example, you could define the following
helper:</p>

<pre style='margin-left:.5in'>import string</pre><pre style='margin-left:.5in'>def my_import(name):</pre><pre
style='margin-left:.5in'>&nbsp;&nbsp;&nbsp; mod = __import__(name)</pre><pre
style='margin-left:.5in'>&nbsp;&nbsp;&nbsp; components = string.split(name, '.')</pre><pre
style='margin-left:.5in'>&nbsp;&nbsp;&nbsp; for comp in components[1:]:</pre><pre
style='margin-left:.5in'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mod = getattr(mod, comp)</pre><pre
style='margin-left:.5in'>&nbsp;&nbsp;&nbsp; return mod</pre>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>abs(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>x</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>Returns the absolute value of a number. The
argument may be a plain or long integer or a floating-point number. If the argument
is a complex number, its magnitude is returned.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>apply(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>function,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>args[,</span></i></tt><span style='font-family:Arial;
color:#990000'> </span><tt><i><span style='font-size:10.0pt;color:#990000'>keywords]</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>The <tt><i><span style='font-size:10.0pt'>function</span></i></tt>
argument must be a callable object (a user-defined or built-in function or
method, or a class object), and the <tt><i><span style='font-size:10.0pt'>args</span></i></tt>
argument must be a sequence (if itâs not a tuple, the sequence is first
converted to a tuple). The function is called with <tt><i><span
style='font-size:10.0pt'>args</span></i></tt> as the argument list; the number
of arguments is the length of the tuple. (This is different from just calling <tt><span
style='font-size:10.0pt'>func(<i>args</i>)</span></tt>, since in that case,
thereâs always exactly one argument.) If the optional <tt><i><span
style='font-size:10.0pt'>keywords</span></i></tt> argument is present, it must
be a dictionary whose keys are strings. It specifies keyword arguments to be
added to the end of the argument list.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>buffer(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>object[,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>offset[,</span></i></tt><span style='font-family:Arial;
color:#990000'> </span><tt><i><span style='font-size:10.0pt;color:#990000'>size]]</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>The <tt><i><span style='font-size:10.0pt'>object</span></i></tt>
argument must be an object that supports the buffer call interface (such as
strings, arrays, and buffers). A new buffer object is created that references
the <tt><i><span style='font-size:10.0pt'>object</span></i></tt> argument; that
buffer object is a slice from the beginning of <tt><i><span style='font-size:
10.0pt'>object</span></i></tt> (or from the specified <tt><i><span
style='font-size:10.0pt'>offset</span></i></tt>). The slice extends to the end
of <tt><i><span style='font-size:10.0pt'>object</span></i></tt> (or has a
length given by the <tt><i><span style='font-size:10.0pt'>size</span></i></tt>
argument).</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>callable(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>object</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Returns <tt><span style='font-size:10.0pt'>true</span></tt>
if the <tt><i><span style='font-size:10.0pt'>object</span></i></tt> argument
appears callable, <tt><span style='font-size:10.0pt'>false</span></tt> if not.
If it returns <tt><span style='font-size:10.0pt'>true</span></tt>, itâs still
possible that a call fails, but if itâs <tt><span style='font-size:10.0pt'>false</span></tt>,
the calling object never succeeds. Note that classes are callable (calling a
class returns a new instance); class instances are callable if they have a <tt><span
style='font-size:10.0pt'>_ _call__()</span></tt> method.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>chr(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>i</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>Returns a string of one character whose ASCII code
is the integer <tt><i><span style='font-size:10.0pt'>i</span></i></tt>, e.g., <tt><span
style='font-size:10.0pt'>chr(97)</span></tt> returns the string <tt><span
style='font-size:10.0pt'>a</span></tt>. This is the inverse of <tt><span
style='font-size:10.0pt'>ord()</span></tt>. The argument must be in the range
[0...255], inclusive.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>cmp(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>x</span></i></tt><span class=monofont1><span
style='color:#990000'>,</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span><tt><i><span style='font-size:10.0pt;color:#990000'>y</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Compares the two objects <tt><i><span
style='font-size:10.0pt'>x</span></i></tt> and <tt><i><span style='font-size:
10.0pt'>y</span></i></tt> and returns an integer according to the outcome. The
return value is negative if <tt><i><span style='font-size:10.0pt'>x</span></i></tt>
&lt; <tt><i><span style='font-size:10.0pt'>y</span></i></tt>, zero if <tt><i><span
style='font-size:10.0pt'>x</span></i></tt> <tt><span style='font-size:10.0pt'>==</span></tt>
<tt><i><span style='font-size:10.0pt'>y</span></i></tt>, and strictly positive
if <tt><i><span style='font-size:10.0pt'>x</span></i></tt> <tt><span
style='font-size:10.0pt'>&gt;</span></tt> <tt><i><span style='font-size:10.0pt'>y</span></i></tt>.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>coerce(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>x,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>y</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>Returns a tuple consisting of the two numeric
arguments converted to a common type, using the same rules used by arithmetic
operations.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>compile(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>string,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>filename,</span></i></tt><span style='font-family:Arial;
color:#990000'> </span><tt><i><span style='font-size:10.0pt;color:#990000'>kind</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Compiles the <tt><i><span style='font-size:10.0pt'>string</span></i></tt>
into a code object. Code objects can be executed by an <tt><span
style='font-size:10.0pt'>exec</span></tt> statement or evaluated by a call to <tt><span
style='font-size:10.0pt'>eval()</span></tt>. The <tt><i><span style='font-size:
10.0pt'>filename</span></i></tt> argument should give the file from which the
code was read; pass <tt><i><span style='font-size:10.0pt'>string</span></i></tt>
if it wasnât read from a file. The <tt><i><span style='font-size:10.0pt'>kind</span></i></tt>
argument specifies what kind of code must be compiled; it can be <tt><span
style='font-size:10.0pt'>exec</span></tt> if <tt><i><span style='font-size:
10.0pt'>string</span></i></tt> consists of a sequence of statements, <tt><span
style='font-size:10.0pt'>eval</span></tt> if it consists of a single
expression, or <tt><span style='font-size:10.0pt'>single</span></tt> if it
consists of a single interactive statement (in the latter case, expression
statements that evaluate to something other than <tt><span style='font-size:
10.0pt'>None</span></tt> will print).</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>complex(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>real[,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>imag]</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>Creates a complex number with the value <tt><i><span
style='font-size:10.0pt'>real</span></i></tt> <tt><span style='font-size:10.0pt'>+</span></tt>
<tt><i><span style='font-size:10.0pt'>imag</span></i></tt><tt><span
style='font-size:10.0pt'>*j</span></tt> or converts a string or number to a
complex number. Each argument may be any numeric type (including complex). If <tt><i><span
style='font-size:10.0pt'>imag</span></i></tt> is omitted, it defaults to zero,
and the function serves as a numeric conversion function like <tt><span
style='font-size:10.0pt'>int()</span></tt>, <tt><span style='font-size:10.0pt'>long()</span></tt>,
and <tt><span style='font-size:10.0pt'>float()</span></tt>; in this case it
also accepts a string argument that should be a valid complex number.</p>

<p class=MsoNormal style='page-break-after:avoid'><span class=monofont1><span
style='color:#990000'>delattr(</span></span><span style='font-family:Arial;
color:#990000'> &nbsp; </span><tt><i><span style='font-size:10.0pt;color:#990000'>object,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>name</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>A relative of <tt><span style='font-size:10.0pt'>setattr()</span></tt>.
The arguments are an <tt><i><span style='font-size:10.0pt'>object</span></i></tt>
and a string. The string must be the <tt><i><span style='font-size:10.0pt'>name</span></i></tt>
of one of the objectâs attributes. The function deletes the named attribute,
provided the object allows it. For example, <tt><span style='font-size:10.0pt'>delattr(x,</span></tt>
<tt><span style='font-size:10.0pt'>'foobar')</span></tt> is equivalent to <tt><span
style='font-size:10.0pt'>del</span></tt> <tt><span style='font-size:10.0pt'>x.foobar</span></tt>.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>dir(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>[object]</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Without arguments, returns the list of names in the
current local symbol table. With an argument, attempts to return a list of
valid attribute for that object. This information is gleaned from the objectâs <tt><span
style='font-size:10.0pt'>__dict__ </span></tt>, <tt><span style='font-size:
10.0pt'>__methods__ </span></tt>, and <tt><span style='font-size:10.0pt'>__members__</span></tt>
attributes, if defined. The list is not necessarily complete; e.g., for
classes, attributes defined in base classes arenât included, and for class
instances, methods arenât included. The resulting list is sorted
alphabetically. For example:</p>

<pre style='margin-left:.5in'>&gt;&gt;&gt; import sys</pre><pre
style='margin-left:.5in'>&gt;&gt;&gt; dir()</pre><pre style='margin-left:.5in'>['sys']</pre><pre
style='margin-left:.5in'>&gt;&gt;&gt; dir(sys)</pre><pre style='margin-left:
.5in'>['argv', 'exit', 'modules', 'path', 'stderr', 'stdin', 'stdout']</pre><pre
style='margin-left:.5in'>&gt;&gt;&gt;</pre>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>divmod(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>a</span></i></tt><span class=monofont1><span
style='color:#990000'>,</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span><tt><i><span style='font-size:10.0pt;color:#990000'>b</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Takes two numbers as arguments and returns a pair
of numbers consisting of their quotient and remainder when using long division.
With mixed operand types, the rules for binary arithmetic operators apply. For
plain and long integers, the result is the same as <tt><span style='font-size:
10.0pt'>(<i>a</i></span></tt> <tt><span style='font-size:10.0pt'>/</span></tt> <tt><i><span
style='font-size:10.0pt'>b</span></i></tt><tt><span style='font-size:10.0pt'>,</span></tt>
<tt><i><span style='font-size:10.0pt'>a</span></i></tt> <tt><span
style='font-size:10.0pt'>%</span></tt> <tt><i><span style='font-size:10.0pt'>b</span></i></tt><tt><span
style='font-size:10.0pt'>)</span></tt>. For floating-point numbers, the result
is the same as <tt><span style='font-size:10.0pt'>(math.floor(<i>a</i></span></tt>
<tt><span style='font-size:10.0pt'>/</span></tt> <tt><i><span style='font-size:
10.0pt'>b</span></i></tt><tt><span style='font-size:10.0pt'>),</span></tt> <tt><i><span
style='font-size:10.0pt'>a</span></i></tt> <tt><span style='font-size:10.0pt'>%</span></tt>
<tt><i><span style='font-size:10.0pt'>b</span></i></tt><tt><span
style='font-size:10.0pt'>)</span></tt>.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>eval(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>expression[,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><span class=monofont1><span
style='color:#990000'>globals</span></span><span style='font-family:Arial;
color:#990000'> &nbsp; </span><tt><i><span style='font-size:10.0pt;color:#990000'>[,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><span class=monofont1><span
style='color:#990000'>locals</span></span><span style='font-family:Arial;
color:#990000'> &nbsp; </span><tt><i><span style='font-size:10.0pt;color:#990000'>]]</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>The arguments are a string and two optional
dictionaries. The <tt><i><span style='font-size:10.0pt'>expression</span></i></tt>
argument is parsed and evaluated as a Python expression (technically speaking,
a condition list) using the <tt><span style='font-size:10.0pt'>globals</span></tt>
and <tt><span style='font-size:10.0pt'>locals</span></tt> dictionaries as
global and local namespace. If the <tt><span style='font-size:10.0pt'>locals</span></tt>
dictionary is omitted, it defaults to the <tt><span style='font-size:10.0pt'>globals</span></tt>
dictionary. If both dictionaries are omitted, the expression is executed in the
environment where <tt><span style='font-size:10.0pt'>eval</span></tt> is
called. The return value is the result of the evaluated expression. Syntax
errors are reported as exceptions. Example:</p>

<pre style='margin-left:.5in'>&gt;&gt;&gt; x = 1</pre><pre style='margin-left:
.5in'>&gt;&gt;&gt; print eval('x+1')</pre><pre style='margin-left:.5in'>2</pre>

<p style='margin-left:.5in'>This function can also execute arbitrary code
objects (e.g., created by <tt><span style='font-size:10.0pt'>compile())</span></tt>.
In this case, it passes a code object instead of a string. The code object must
have been compiled passing <tt><span style='font-size:10.0pt'>eval</span></tt>
to the kind argument.</p>

<p style='margin-left:.5in'>Hints: dynamic execution of statements is supported
by the <tt><span style='font-size:10.0pt'>exec</span></tt> statement. Execution
of statements from a file is supported by the <tt><span style='font-size:10.0pt'>execfile()</span></tt>
function. The <tt><span style='font-size:10.0pt'>globals()</span></tt> and <tt><span
style='font-size:10.0pt'>locals()</span></tt> functions returns the current
global and local dictionary, respectively, which may be useful to pass around
for use by <tt><span style='font-size:10.0pt'>eval()</span></tt> or <tt><span
style='font-size:10.0pt'>execfile()</span></tt>.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>execfile(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>file[,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><span class=monofont1><span
style='color:#990000'>globals</span></span><span style='font-family:Arial;
color:#990000'> &nbsp; </span><tt><i><span style='font-size:10.0pt;color:#990000'>[,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><span class=monofont1><span
style='color:#990000'>locals</span></span><span style='font-family:Arial;
color:#990000'> &nbsp; </span><tt><i><span style='font-size:10.0pt;color:#990000'>]]</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Similar to the <tt><span style='font-size:10.0pt'>exec</span></tt>
statement, but parses a file instead of a string. Itâs different from the <tt><span
style='font-size:10.0pt'>import</span></tt> statement in that it doesnât use
the module administration; it reads the file unconditionally and doesnât create
a new module.<a name="_ftnref27"></a><a href="#_ftn27"><span class=atitlechar><sup><span
style='font-size:9.0pt'>[G]</span></sup></span></a></p>

<p style='margin-left:.5in'>The arguments are a filename and two optional
dictionaries. The file is parsed and evaluated as a sequence of Python
statements (similar to a module) using the <tt><span style='font-size:10.0pt'>globals</span></tt>
and <tt><span style='font-size:10.0pt'>locals</span></tt> dictionaries as
global and local namespace. If the <tt><span style='font-size:10.0pt'>locals</span></tt>
dictionary is omitted, it defaults to the <tt><span style='font-size:10.0pt'>globals</span></tt>
dictionary. If both dictionaries are omitted, the expression is executed in the
environment where <tt><span style='font-size:10.0pt'>execfile()</span></tt> is
called. The return value is <tt><span style='font-size:10.0pt'>None</span></tt>.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>filter(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>function,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>list</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>Constructs a list from those elements of <tt><i><span
style='font-size:10.0pt'>list</span></i></tt> for which <tt><i><span
style='font-size:10.0pt'>function</span></i></tt> returns <tt><span
style='font-size:10.0pt'>true</span></tt>. If <tt><i><span style='font-size:
10.0pt'>list</span></i></tt> is a string or a tuple, the result also has that
type; otherwise itâs always a list. If <tt><i><span style='font-size:10.0pt'>function</span></i></tt>
is <tt><span style='font-size:10.0pt'>None</span></tt>, the identity function
is assumed, i.e., all elements of <tt><i><span style='font-size:10.0pt'>list</span></i></tt>
that are <tt><span style='font-size:10.0pt'>false</span></tt> (zero or empty)
are removed.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>float(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>x</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>Converts a string or a number to floating point. If
the argument is a string, it must contain a possibly signed decimal or
floating-point number, possibly embedded in whitespace; this behaves
identically to <tt><span style='font-size:10.0pt'>string.atof(<i>x</i>)</span></tt>.
Otherwise, the argument may be a plain or long integer or a floating-point
number, and a floating-point number with the same value (within Pythonâs
floating-point precision) is returned.</p>

<p style='margin-left:.5in'>When passing in a string, values for <tt><span
style='font-size:10.0pt'>NaN</span></tt> and <tt><span style='font-size:10.0pt'>Infinity</span></tt>
may be returned, depending on the underlying C library. The specific set of
strings accepted that cause these values to be returned depends entirely on the
C library and is known to vary.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>getattr(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>object,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>name</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>The arguments are an object and a string. The
string must be the name of one of the objectâs attributes. The result is the
value of that attribute. For example, <tt><span style='font-size:10.0pt'>getattr(<i>x,</i></span></tt>
<tt><i><span style='font-size:10.0pt'>'foobar'</span></i></tt><tt><span
style='font-size:10.0pt'>)</span></tt> is equivalent to <tt><i><span
style='font-size:10.0pt'>x</span></i></tt><tt><span style='font-size:10.0pt'>.foobar</span></tt>.</p>

<p class=MsoNormal style='page-break-after:avoid'><span class=monofont1><span
style='color:#990000'>globals()</span></span><span style='font-family:Arial;
color:#990000'> </span></p>

<p style='margin-left:.5in'>Returns a dictionary representing the current
global symbol table. This is always the dictionary of the current module
(inside a function or method, this is the module where it is defined, not the
module from which it is called).</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>hasattr(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>object,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>name</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>The arguments are an object and a string. The
result is 1 if the string is the name of one of the objectâs attributes, if
not. (This is implemented by calling <tt><span style='font-size:10.0pt'>getattr(<i>object,</i></span></tt>
<tt><i><span style='font-size:10.0pt'>name</span></i></tt><tt><span
style='font-size:10.0pt'>)</span></tt> and seeing whether it raises an
exception.)</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>hash(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>object</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Returns the hash value of the object (if it has
one). Hash values are integers. They can quickly compare dictionary keys during
a dictionary lookup. Numeric values that compare equal have the same hash value
(even if they are of different types, e.g., 1 and 1.0).</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>hex(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>x</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>Converts an integer number (of any size) to a
hexadecimal string. The result is a valid Python expression. This always yields
an unsigned literal, e.g., on a 32-bit machine, <tt><span style='font-size:
10.0pt'>hex(-1)</span></tt> yields â<tt><span style='font-size:10.0pt'>0xffffffff</span></tt>â.
When evaluated on a machine with the same word size, this literal is evaluated
as -1; at a different word size, it may be a large positive number or raise an <tt><span
style='font-size:10.0pt'>OverflowError</span></tt> exception.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>id(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>object</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Returns the identity of an object. This is an
integer thatâs guaranteed to be unique and constant for this object during its
lifetime. Two objects whose lifetimes donât overlap may have the same <tt><span
style='font-size:10.0pt'>id()</span></tt> value. (Implementation note: this is
the address of the object.)</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>input(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>[prompt]</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Equivalent to <tt><span style='font-size:10.0pt'>eval(raw_input(<i>prompt</i>))</span></tt>.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>intern(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>string</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Enters <tt><i><span style='font-size:10.0pt'>string</span></i></tt>
in the table of interned strings and returns the interned string, which is <tt><i><span
style='font-size:10.0pt'>string</span></i></tt> itself or a copy. Interning
strings is useful to gain a little performance on dictionary lookup; if the
keys in a dictionary are interned, and the lookup key is interned, the key
comparisons (after hashing) can be done by a pointer compare instead of a
string compare. Normally, the names used in Python programs are automatically
interned, and the dictionaries that hold module, class, or instance attributes
have interned keys. Interned strings are immortal (i.e., never get
garbage-collected).</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>int(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>x</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>Converts a string or number to a plain integer. If
the argument is a string, it must contain a possibly signed decimal number
representable as a Python integer, possibly embedded in whitespace; this
behaves identically to <tt><span style='font-size:10.0pt'>string.atoi(<i>x</i>).</span></tt>
Otherwise, the argument may be a plain or long integer or a floating-point
number. Conversion of floating-point numbers to integers is defined by the C
semantics; normally the conversion truncates towards zero.<a name="_ftnref28"></a><a
href="#_ftn28"><span class=atitlechar><sup><span style='font-size:9.0pt'>[H]</span></sup></span></a></p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>isinstance(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>object,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>class</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>Returns <tt><span style='font-size:10.0pt'>true</span></tt>
if the <tt><i><span style='font-size:10.0pt'>object</span></i></tt> argument is
an instance of the <tt><i><span style='font-size:10.0pt'>class</span></i></tt>
argument or of a (direct or indirect) subclass thereof. Also returns <tt><span
style='font-size:10.0pt'>true</span></tt> if <tt><i><span style='font-size:
10.0pt'>class</span></i></tt> is a type object and <tt><i><span
style='font-size:10.0pt'>object</span></i></tt> is an object of that type. If <tt><i><span
style='font-size:10.0pt'>object</span></i></tt> is not a class instance or an
object of the given type, the function always returns <tt><span
style='font-size:10.0pt'>false</span></tt>. If <tt><i><span style='font-size:
10.0pt'>class</span></i></tt> is neither a class object nor a type object, a <tt><span
style='font-size:10.0pt'>TypeError</span></tt> exception is raised.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>issubclass(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>class1</span></i></tt><span
class=monofont1><span style='color:#990000'>,</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>class2</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Returns <tt><span style='font-size:10.0pt'>true</span></tt>
if <tt><i><span style='font-size:10.0pt'>class1</span></i></tt> is a subclass
(direct or indirect) of <tt><i><span style='font-size:10.0pt'>class2</span></i></tt>.
A class is considered a subclass of itself. If either argument isnât a class
object, a <tt><span style='font-size:10.0pt'>TypeError</span></tt> exception is
raised.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>len(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>s</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>Returns the length (the number of items) of an
object. The argument may be a sequence (string, tuple, or list) or a mapping (dictionary).</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>list(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>sequence</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Returns a list whose items are the same and in the
same order as <tt><i><span style='font-size:10.0pt'>sequence </span></i></tt>âs
items. If <tt><i><span style='font-size:10.0pt'>sequence</span></i></tt> is
already a list, a copy is made and returned, similar to <tt><i><span
style='font-size:10.0pt'>sequence</span></i></tt><tt><span style='font-size:
10.0pt'>[:]</span></tt>. For instance, <tt><span style='font-size:10.0pt'>list('abc')</span></tt>
returns <tt><span style='font-size:10.0pt'>['a',</span></tt> <tt><span
style='font-size:10.0pt'>'b',</span></tt> <tt><span style='font-size:10.0pt'>'c']</span></tt>,
and <tt><span style='font-size:10.0pt'>list(</span></tt> <tt><span
style='font-size:10.0pt'>(1,</span></tt> <tt><span style='font-size:10.0pt'>2,</span></tt>
<tt><span style='font-size:10.0pt'>3)</span></tt> <tt><span style='font-size:
10.0pt'>)</span></tt> returns <tt><span style='font-size:10.0pt'>[1,</span></tt>
<tt><span style='font-size:10.0pt'>2,</span></tt> <tt><span style='font-size:
10.0pt'>3]</span></tt>.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>locals()</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Returns a dictionary representing the current local
symbol table. Warning: the contents of this dictionary should not be modified;
changes may not affect the values of local variables used by the interpreter.</p>

<p class=MsoNormal style='page-break-after:avoid'><span class=monofont1><span
style='color:#990000'>long(</span></span><span style='font-family:Arial;
color:#990000'> &nbsp; </span><tt><i><span style='font-size:10.0pt;color:#990000'>x</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Converts a string or number to a long integer. If
the argument is a string, it must contain a possibly signed decimal number of
arbitrary size, possibly embedded in whitespace; this behaves identically to <tt><span
style='font-size:10.0pt'>string.atol(<i>x</i>)</span></tt>. Otherwise, the
argument may be a plain or long integer or a floating-point number, and a long
integer with the same value is returned. Conversion of floating-point numbers
to integers is defined by the C semantics; see the description of <tt><span
style='font-size:10.0pt'>int()</span></tt>.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>map(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>function,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>list</span></i></tt><span class=monofont1><span
style='color:#990000'>,</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span><span class=monofont1><span style='color:#990000'>...)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Applies <tt><i><span style='font-size:10.0pt'>function</span></i></tt>
to every item of <tt><i><span style='font-size:10.0pt'>list</span></i></tt> and
returns a list of the results. If additional list arguments are passed, <tt><i><span
style='font-size:10.0pt'>function</span></i></tt> must take that many arguments
and is applied to the items of all lists in parallel; if a list is shorter than
another, itâs assumed to be extended with <tt><span style='font-size:10.0pt'>None</span></tt>
items. If <tt><i><span style='font-size:10.0pt'>function</span></i></tt> is <tt><span
style='font-size:10.0pt'>None</span></tt>, the identity function is assumed; if
there are multiple <tt><i><span style='font-size:10.0pt'>list</span></i></tt>
arguments, <tt><span style='font-size:10.0pt'>map()</span></tt> returns a list
consisting of tuples containing the corresponding items from all lists (i.e., a
kind of transpose operation). The list arguments may be any kind of sequence;
the result is always a list.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>max(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>s[,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>args...]</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>With a single argument <tt><i><span
style='font-size:10.0pt'>s</span></i></tt>, returns the largest item of a
nonempty sequence (e.g., a string, tuple, or list). With more than one
argument, returns the largest of the arguments.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>min(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>s[,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>args...]</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>With a single argument <tt><i><span
style='font-size:10.0pt'>s</span></i></tt>, returns the smallest item of a
nonempty sequence (e.g., a string, tuple, or list). With more than one
argument, returns the smallest of the arguments.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>oct(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>x</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>Converts an integer number (of any size) to an
octal string. The result is a valid Python expression. This always yields an
unsigned literal, e.g., on a 32-bit machine, <tt><span style='font-size:10.0pt'>oct(-1)</span></tt>
yields <tt><span style='font-size:10.0pt'>'037777777777'</span></tt>. When
evaluated on a machine with the same word size, this literal is evaluated as <tt><span
style='font-size:10.0pt'>-1</span></tt>; at a different word size, it may be a
large positive number or raise an <tt><span style='font-size:10.0pt'>OverflowError</span></tt>
exception.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>open(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>filename[,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>mode[,</span></i></tt><span style='font-family:Arial;
color:#990000'> </span><tt><i><span style='font-size:10.0pt;color:#990000'>bufsize]]</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Returns a new file object (described earlier in the
section<i> </i><a href="28.htm#_A.1_Built-in_Types">Section A.1</a>). The first
two arguments are the same as for <tt><span style='font-size:10.0pt'>stdio</span></tt>âs
<tt><span style='font-size:10.0pt'>fopen()</span></tt>: <tt><i><span
style='font-size:10.0pt'>filename</span></i></tt> is the filename to be opened,
<tt><i><span style='font-size:10.0pt'>mode</span></i></tt> indicates how the
file is to be opened: <tt><span style='font-size:10.0pt'>'r'</span></tt> for
reading, <tt><span style='font-size:10.0pt'>'w'</span></tt> for writing
(truncating an existing file), and <tt><span style='font-size:10.0pt'>'a'</span></tt>
opens it for appending (which on some Unix systems means that all writes append
to the end of the file, regardless of the current seek position).</p>

<p style='margin-left:.5in'>Modes <tt><span style='font-size:10.0pt'>'r+'</span></tt>,
<tt><span style='font-size:10.0pt'>'w+'</span></tt>, and <tt><span
style='font-size:10.0pt'>'a+'</span></tt> open the file for updating (note that
<tt><span style='font-size:10.0pt'>'w+'</span></tt> truncates the file). Append
<tt><span style='font-size:10.0pt'>'b'</span></tt> to the mode to open the file
in binary mode, on systems that differentiate between binary and text files
(else it is ignored). If the file canât be opened, <tt><span style='font-size:
10.0pt'>IOError</span></tt> is raised.</p>

<p style='margin-left:.5in'>If <tt><i><span style='font-size:10.0pt'>mode</span></i></tt>
is omitted, it defaults to <tt><span style='font-size:10.0pt'>'r'</span></tt>.
When opening a binary file, you should append <tt><span style='font-size:10.0pt'>'b'</span></tt>
to the mode value for improved portability. (Itâs useful even on systems that
donât treat binary and text files differently, where it serves as
documentation.) The optional <tt><i><span style='font-size:10.0pt'>bufsize</span></i></tt>
argument specifies the fileâs desired buffer size: <tt><span style='font-size:
10.0pt'>0</span></tt> means unbuffered, <tt><span style='font-size:10.0pt'>1</span></tt>
means line buffered, any other positive value means use a buffer of
(approximately) that size. A negative <tt><i><span style='font-size:10.0pt'>bufsize</span></i></tt>
means to use the system default, which is usually line buffered for tty devices
and fully buffered for other files. If omitted, the system default is used.<a
name="_ftnref29"></a><a href="#_ftn29" title=""><span class=atitlechar><sup><span
style='font-size:9.0pt'>[I]</span></sup></span></a></p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>ord(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>c</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>Returns the ASCII value of a string of one
character. For example, <tt><span style='font-size:10.0pt'>ord('a')</span></tt>
returns the integer 97. This is the inverse of <tt><span style='font-size:10.0pt'>chr()</span></tt>.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>pow(x,</span></span><span
style='font-family:Arial;color:#990000'> </span><span class=monofont1><span
style='color:#990000'>y[,</span></span><span style='font-family:Arial;
color:#990000'> </span><span class=monofont1><span style='color:#990000'>z])</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Returns <tt><span style='font-size:10.0pt'>x</span></tt>
to the power <tt><span style='font-size:10.0pt'>y</span></tt>; if <tt><span
style='font-size:10.0pt'>z</span></tt> is present, return <tt><span
style='font-size:10.0pt'>x</span></tt> to the power <tt><span style='font-size:
10.0pt'>y</span></tt>, modulo <tt><span style='font-size:10.0pt'>z</span></tt>
(computed more efficiently than <tt><span style='font-size:10.0pt'>pow(x,</span></tt>
<tt><span style='font-size:10.0pt'>y)</span></tt> <tt><span style='font-size:
10.0pt'>%</span></tt> <tt><span style='font-size:10.0pt'>z)</span></tt>. The
arguments must have numeric types. With mixed operand types, the rules for
binary arithmetic operators apply. The effective operand type is also the type
of the result; if the result isnât expressible in this type, the function
raises an exception; e.g., <tt><span style='font-size:10.0pt'>pow(2,</span></tt>
<tt><span style='font-size:10.0pt'>-1)</span></tt> or <tt><span
style='font-size:10.0pt'>pow(2,</span></tt> <tt><span style='font-size:10.0pt'>35000)</span></tt>
isnât allowed.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>range(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>[start,]</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>stop[,</span></i></tt><span style='font-family:Arial;
color:#990000'> </span><tt><i><span style='font-size:10.0pt;color:#990000'>step]</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>This is a versatile function to create lists containing
arithmetic progressions. It is most often used in <tt><span style='font-size:
10.0pt'>for</span></tt> loops. The arguments must be plain integers. If the <tt><i><span
style='font-size:10.0pt'>step</span></i></tt> argument is omitted, it defaults
to 1. If the <tt><i><span style='font-size:10.0pt'>start</span></i></tt>
argument is omitted, it defaults to 0. The full form returns a list of plain
integers <tt><span style='font-size:10.0pt'>[<i>start</i>,</span></tt> <tt><i><span
style='font-size:10.0pt'>start</span></i></tt> <tt><span style='font-size:10.0pt'>+</span></tt>
<tt><i><span style='font-size:10.0pt'>step</span></i></tt><tt><span
style='font-size:10.0pt'>,</span></tt> <tt><i><span style='font-size:10.0pt'>start</span></i></tt>
<tt><span style='font-size:10.0pt'>+</span></tt> <tt><span style='font-size:
10.0pt'>2</span></tt> <tt><span style='font-size:10.0pt'>*</span></tt> <tt><i><span
style='font-size:10.0pt'>step</span></i></tt><tt><span style='font-size:10.0pt'>,</span></tt>
<tt><span style='font-size:10.0pt'>...]</span></tt>. If <tt><i><span
style='font-size:10.0pt'>step</span></i></tt> is positive, the last element is
the largest <tt><i><span style='font-size:10.0pt'>start</span></i></tt> <tt><span
style='font-size:10.0pt'>+</span></tt> <tt><span style='font-size:10.0pt'>i</span></tt>
<tt><span style='font-size:10.0pt'>*</span></tt> <tt><i><span style='font-size:
10.0pt'>step</span></i></tt> less than <tt><i><span style='font-size:10.0pt'>stop
</span></i></tt>; if <tt><i><span style='font-size:10.0pt'>step</span></i></tt>
is negative, the last element is the largest <tt><i><span style='font-size:
10.0pt'>start</span></i></tt> <tt><span style='font-size:10.0pt'>+</span></tt> <tt><span
style='font-size:10.0pt'>i</span></tt> <tt><span style='font-size:10.0pt'>*</span></tt>
<tt><i><span style='font-size:10.0pt'>step</span></i></tt> greater than <tt><i><span
style='font-size:10.0pt'>stop</span></i></tt>. <tt><i><span style='font-size:
10.0pt'>step</span></i></tt> must not be zero (or else <tt><span
style='font-size:10.0pt'>ValueError</span></tt> is raised). Hereâs an example:</p>

<pre style='margin-left:.5in'>&gt;&gt;&gt; range(10)</pre><pre
style='margin-left:.5in'>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</pre><pre
style='margin-left:.5in'>&gt;&gt;&gt; range(1, 11)</pre><pre style='margin-left:
.5in'>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</pre><pre style='margin-left:.5in'>&gt;&gt;&gt; range(0, 30, 5)</pre><pre
style='margin-left:.5in'>[0, 5, 10, 15, 20, 25]</pre><pre style='margin-left:
.5in'>&gt;&gt;&gt; range(0, 10, 3)</pre><pre style='margin-left:.5in'>[0, 3, 6, 9]</pre><pre
style='margin-left:.5in'>&gt;&gt;&gt; range(0, -10, -1)</pre><pre
style='margin-left:.5in'>[0, -1, -2, -3, -4, -5, -6, -7, -8, -9]</pre><pre
style='margin-left:.5in'>&gt;&gt;&gt; range(0)</pre><pre style='margin-left:
.5in'>[]</pre><pre style='margin-left:.5in'>&gt;&gt;&gt; range(1, 0)</pre><pre
style='margin-left:.5in'>[]</pre><pre style='margin-left:.5in'>&gt;&gt;&gt;</pre>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>raw_input(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>[prompt]</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>If the <tt><i><span style='font-size:10.0pt'>prompt</span></i></tt>
argument is present, itâs written to standard output without a trailing
newline. The function then reads a line from input, converts it to a string
(stripping a trailing newline), and returns that. When EOF is read, <tt><span
style='font-size:10.0pt'>EOFError</span></tt> is raised. Hereâs an example:</p>

<pre style='margin-left:.5in'>&gt;&gt;&gt; s = raw_input('--&gt; ')</pre><pre
style='margin-left:.5in'>--&gt; Monty Python's Flying Circus</pre><pre
style='margin-left:.5in'>&gt;&gt;&gt; s</pre><pre style='margin-left:.5in'>&quot;Monty Python's Flying Circus&quot;</pre><pre
style='margin-left:.5in'>&gt;&gt;&gt;</pre>

<p style='margin-left:.5in'>If the <tt><span style='font-size:10.0pt'>readline</span></tt>
module was loaded, then <tt><span style='font-size:10.0pt'>raw_input()</span></tt>
uses it to provide elaborate line-editing and history features.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>reduce(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>function,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>sequence[,</span></i></tt><span style='font-family:Arial;
color:#990000'> </span><tt><i><span style='font-size:10.0pt;color:#990000'>initializer]</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Applies <tt><i><span style='font-size:10.0pt'>function</span></i></tt>
of two arguments cumulatively to the items of <tt><i><span style='font-size:
10.0pt'>sequence</span></i></tt>, from left to right, so as to reduce the
sequence to a single value. For example, <tt><span style='font-size:10.0pt'>reduce(lambda</span></tt>
<tt><span style='font-size:10.0pt'>x,</span></tt> <tt><span style='font-size:
10.0pt'>y:</span></tt> <tt><span style='font-size:10.0pt'>x+y,</span></tt> <tt><span
style='font-size:10.0pt'>[1,</span></tt> <tt><span style='font-size:10.0pt'>2,</span></tt>
<tt><span style='font-size:10.0pt'>3,</span></tt> <tt><span style='font-size:
10.0pt'>4,</span></tt> <tt><span style='font-size:10.0pt'>5])</span></tt>
calculates <tt><span style='font-size:10.0pt'>((((1+2)+3)+4)+5)</span></tt>. If
the optional <tt><i><span style='font-size:10.0pt'>initializer</span></i></tt>
is present, itâs placed before the items of the sequence in the calculation and
serves as a default when the sequence is empty.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>reload(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>module</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Reparses and reinitializes an already imported <tt><i><span
style='font-size:10.0pt'>module</span></i></tt>. The argument must be a module
object, so it must have been successfully imported before. This is useful if
you have edited the module source file using an external editor and want to try
out the new version without leaving the Python interpreter. The return value is
the module object (i.e., the same as the <tt><span style='font-size:10.0pt'>mo<i>d</i>ule</span></tt>
argument). There are a number of caveats:</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>Â·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>If a module is syntactically correct but its initialization fails, the
first <tt><span style='font-size:10.0pt'>import</span></tt> statement for it
doesnât bind its name locally, but does store a (partially initialized) module
object in <tt><span style='font-size:10.0pt'>sys.modules</span></tt>. To reload
the module you must first import it again (this binds the name to the partially
initialized module object) before you can <tt><span style='font-size:10.0pt'>reload()</span></tt>
it.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>Â·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>When a module is reloaded, its dictionary (containing the moduleâs
global variables) is retained. Redefinitions of names override the old definitions,
so this is generally not a problem. If the new version of a module doesnât
define a name that was defined by the old version, the old definition remains.
This feature can be used to the moduleâs advantage if it maintains a global
table or cache of objects; with a <tt><span style='font-size:10.0pt'>try</span></tt>
statement it can test for the tableâs presence and skip its initialization if
desired.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>Â·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>It is legal though generally not useful to reload built-in or
dynamically loaded modules, except for <tt><span style='font-size:10.0pt'>sys</span></tt>,
<tt><span style='font-size:10.0pt'>__main__</span></tt> , and <tt><span
style='font-size:10.0pt'>__builtin__</span></tt>. In certain cases, however,
extension modules arenât designed to be initialized more than once, and may
fail in arbitrary ways when reloaded.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>Â·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>If a module imports objects from another module using <tt><span
style='font-size:10.0pt'>from</span></tt> <tt><span style='font-size:10.0pt'>...
import</span></tt> <tt><span style='font-size:10.0pt'>...</span></tt>, calling <tt><span
style='font-size:10.0pt'>reload()</span></tt> for the other module doesnât
redefine the objects imported from it; one way around this is to reexecute the <tt><span
style='font-size:10.0pt'>from</span></tt> statement, another is to use <tt><span
style='font-size:10.0pt'>import</span></tt> and qualified names (<tt><i><span
style='font-size:10.0pt'>module.name</span></i></tt>) instead.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>Â·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>If a module instantiates instances of a class, reloading the module that
defines the class doesnât affect the method definitions of the instances; they
continue to use the old class definition. The same is true for derived classes.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>repr(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>object</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Returns a string containing a printable
representation of an object. This is the same value yielded by conversions
(reverse quotes). Itâs sometimes useful to be able to access this operation as
an ordinary function. For many types, this function makes an attempt to return
a string that would yield an object with the same value when passed to <tt><span
style='font-size:10.0pt'>eval()</span></tt>.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>round(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>x[,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>n]</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>Returns the floating-point value <tt><i><span
style='font-size:10.0pt'>x</span></i></tt> rounded to <tt><i><span
style='font-size:10.0pt'>n</span></i></tt> digits after the decimal point. If <tt><i><span
style='font-size:10.0pt'>n</span></i></tt> is omitted, it defaults to zero. The
result is a floating-point number. Values are rounded to the closest multiple
of 10 to the power minus <tt><i><span style='font-size:10.0pt'>n</span></i></tt>
; if two multiples are equally close, rounding is done away from (e.g., <tt><span
style='font-size:10.0pt'>round(0.5)</span></tt> is 1.0 and <tt><span
style='font-size:10.0pt'>round(-0.5)</span></tt> is -1.0).</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>setattr(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>object</span></i></tt><span
class=monofont1><span style='color:#990000'>,</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>name</span></i></tt><span
class=monofont1><span style='color:#990000'>,</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>value</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>The counterpart of <tt><span style='font-size:10.0pt'>getattr()</span></tt>.
The arguments are an object, a string, and an arbitrary value. The string may
name an existing attribute or a new attribute. The function assigns the value
to the attribute, provided the object allows it. For example, <tt><span
style='font-size:10.0pt'>setattr(x,</span></tt> <tt><span style='font-size:
10.0pt'>'foobar',</span></tt> <tt><span style='font-size:10.0pt'>123)</span></tt>
is equivalent to <tt><span style='font-size:10.0pt'>x.foobar</span></tt> <tt><span
style='font-size:10.0pt'>=</span></tt> <tt><span style='font-size:10.0pt'>123</span></tt>.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>slice(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>[start,]</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>stop[,</span></i></tt><span style='font-family:Arial;
color:#990000'> </span><tt><i><span style='font-size:10.0pt;color:#990000'>step]</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Returns a slice object representing the set of
indexes specified by <tt><span style='font-size:10.0pt'>range(<i>start,</i></span></tt>
<tt><i><span style='font-size:10.0pt'>stop,</span></i></tt> <tt><i><span
style='font-size:10.0pt'>step</span></i></tt>). The <tt><i><span
style='font-size:10.0pt'>start</span></i></tt> and <tt><i><span
style='font-size:10.0pt'>step</span></i></tt> arguments default to <tt><span
style='font-size:10.0pt'>None</span></tt>. Slice objects have read-only data
attributes <tt><i><span style='font-size:10.0pt'>start</span></i></tt>, <tt><i><span
style='font-size:10.0pt'>stop</span></i></tt>, and <tt><i><span
style='font-size:10.0pt'>step</span></i></tt>, which merely return the argument
values (or their default). They have no other explicit functionality; however,
they are used by Numerical Python and other third-party extensions. Slice
objects are also generated when extended indexing syntax is used, e.g., for <tt><span
style='font-size:10.0pt'>a[start:stop:step]</span></tt> or <tt><span
style='font-size:10.0pt'>a[start:stop,</span></tt> <tt><span style='font-size:
10.0pt'>i]</span></tt>.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>str(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>object</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Returns a string containing a nicely printable
representation of an object. For strings, this returns the string itself. The
difference with <tt><span style='font-size:10.0pt'>repr(<i>object</i>)</span></tt>
is that <tt><span style='font-size:10.0pt'>str(<i>object</i>)</span></tt>
doesnât always attempt to return a string that is acceptable to <tt><span
style='font-size:10.0pt'>eval()</span></tt>; its goal is to return a printable
string.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>tuple(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>sequence</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Returns a tuple whose items are the same and in the
same order as <tt><i><span style='font-size:10.0pt'>sequence</span></i></tt>âs
items. If <tt><i><span style='font-size:10.0pt'>sequence</span></i></tt> is
already a tuple, itâs returned unchanged. For instance, <tt><span
style='font-size:10.0pt'>tuple('abc')</span></tt> returns <tt><span
style='font-size:10.0pt'>('a',</span></tt> <tt><span style='font-size:10.0pt'>'b',</span></tt>
<tt><span style='font-size:10.0pt'>'c')</span></tt>, and <tt><span
style='font-size:10.0pt'>tuple([1,</span></tt> <tt><span style='font-size:10.0pt'>2,</span></tt>
<tt><span style='font-size:10.0pt'>3])</span></tt> returns <tt><span
style='font-size:10.0pt'>(1,</span></tt> <tt><span style='font-size:10.0pt'>2,</span></tt>
<tt><span style='font-size:10.0pt'>3)</span></tt>.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>type(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>object</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Returns the type of an object. The return value is
a type object. The standard module types defines names for all built-in types.
For instance:</p>

<pre style='margin-left:.5in'>&gt;&gt;&gt; import types</pre><pre
style='margin-left:.5in'>&gt;&gt;&gt; if type(x) == types.StringType: print &quot;It's a string&quot;</pre><pre
style='margin-left:.5in'>&gt;&gt;&gt;</pre>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>vars([</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>object</span></i></tt><span
class=monofont1><span style='color:#990000'>])</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Without arguments, returns a dictionary
corresponding to the current local symbol table. With a module, class, or class
instance object as argument (or anything else that has a <tt><span
style='font-size:10.0pt'>__dict__</span></tt> attribute), returns a dictionary
corresponding to the objectâs symbol table. The returned dictionary should not
be modified: the effects on the corresponding symbol table are undefined.<a
name="_ftnref30"></a><a href="#_ftn30" title=""><span class=atitlechar><sup><span
style='font-size:9.0pt'>[J]</span></sup></span></a></p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>xrange([</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>start</span></i></tt><span
class=monofont1><span style='color:#990000'>,]</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>stop</span></i></tt><span
class=monofont1><span style='color:#990000'>[,</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>step</span></i></tt><span
class=monofont1><span style='color:#990000'>])</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Similar to <tt><span style='font-size:10.0pt'>range()</span></tt>,
but returns an <tt><span style='font-size:10.0pt'>xrange</span></tt> object
instead of a list. This is an opaque sequence type that yields the same values
as the corresponding list, without actually storing them all simultaneously.
The advantage of <tt><span style='font-size:10.0pt'>xrange()</span></tt> over <tt><span
style='font-size:10.0pt'>range()</span></tt> is minimal (since <tt><span
style='font-size:10.0pt'>xrange()</span></tt> still has to create the values
when asked for them) except when a large range is used on a memory-starved
machine (e.g., MS-DOS) or when all of the rangeâs elements are never used
(e.g., when the loop is usually terminated with break).</p>

<h3 style='page-break-after:avoid'><a
name="_A.4_module_sys:_System-Specific_Par"></a>A.4 module sys: System-Specific
Parameters and Functions</h3>

<p>This module is always available and provides access to some variables used
or maintained by the interpreter and to functions that interact strongly with
the interpreter.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>argv</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>The list of command-line arguments passed to a
Python script. <tt><span style='font-size:10.0pt'>argv[0]</span></tt> is the
script name (itâs operating system-dependent, whether this is a full pathname
or not). If the command is executed using the <tt><span style='font-size:10.0pt'>-c</span></tt>
command-line option to the interpreter, <tt><span style='font-size:10.0pt'>argv[0]</span></tt>
is set to the string <tt><span style='font-size:10.0pt'>-c</span></tt>. If no
script name is passed to the Python interpreter, <tt><span style='font-size:
10.0pt'>argv</span></tt> has zero length.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>builtin_module_names</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>A tuple of strings giving the names of all modules
that are compiled into this Python interpreter. (This information isnât
available in any other way: <tt><span style='font-size:10.0pt'>modules.keys()</span></tt>
lists only the imported modules.)</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>copyright</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>A string containing the copyright pertaining to the
Python interpreter.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>exc_info()</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Returns a tuple of three values that give
information about the exception thatâs currently being handled. The information
returned is specific both to the current thread and to the current stack frame.
If the current stack frame is not handling an exception, the information is
taken from the calling stack frame, or its caller, and so on until a stack frame
is found that is handling an exception. Here, handling an exception is defined
as executing or having executed an except clause. For any stack frame, only
information about the most recently handled exception is accessible.</p>

<p style='margin-left:.5in'>If no exception is being handled anywhere on the
stack, a tuple containing three <tt><span style='font-size:10.0pt'>None</span></tt>
values is returned. Otherwise, the values returned are <tt><span
style='font-size:10.0pt'>(<i>type,</i></span></tt> <tt><i><span
style='font-size:10.0pt'>value,</span></i></tt> <tt><i><span style='font-size:
10.0pt'>traceback</span></i></tt><tt><span style='font-size:10.0pt'>)</span></tt>.
Their meaning is: <tt><i><span style='font-size:10.0pt'>type</span></i></tt>
gets the exception type of the exception being handled (a string or class
object); <tt><i><span style='font-size:10.0pt'>value</span></i></tt> gets the
exception parameter (its associated value or the second argument to raise,
which is always a class instance if the exception type is a class object); <tt><i><span
style='font-size:10.0pt'>traceback</span></i></tt> gets a traceback object (see
the reference manual) that encapsulates the call stack at the point where the
exception originally occurred.</p>

<p style='margin-left:.5in'>Note that assigning the <tt><i><span
style='font-size:10.0pt'>traceback</span></i></tt> return value to a local
variable in a function that is handling an exception causes a circular
reference. This prevents anything referenced by a local variable in the same function
or by the traceback from being garbage-collected. Since most functions donât
need access to the traceback, the best solution is to use something like <tt><span
style='font-size:10.0pt'>type,</span></tt> <tt><span style='font-size:10.0pt'>value</span></tt>
<tt><span style='font-size:10.0pt'>=</span></tt> <tt><span style='font-size:
10.0pt'>sys.exc_info()[:2]</span></tt>to extract only the exception type and
value. If you do need the traceback, make sure to delete it after use (best
done with a <tt><span style='font-size:10.0pt'>try ... finally</span></tt>
statement) or to call <tt><span style='font-size:10.0pt'>exc_info()</span></tt>
in a function that doesnât itself handle an exception.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>exc_type</span></span><span
style='font-family:Arial;color:#990000'> , </span><span class=monofont1><span
style='color:#990000'>exc_value</span></span><span style='font-family:Arial;
color:#990000'> , </span><span class=monofont1><span style='color:#990000'>exc_traceback</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Deprecated since Release 1.5. Use <tt><span
style='font-size:10.0pt'>exc_info()</span></tt> instead. Since they are global
variables, they arenât specific to the current thread, and their use is not
safe in a multithreaded program. When no exception is being handled, <tt><span
style='font-size:10.0pt'>exc_type</span></tt> is set to <tt><span
style='font-size:10.0pt'>None</span></tt>, and the other two are undefined.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>exec_prefix</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>A string giving the site-specific directory prefix
where the platform-dependent Python files are installed; by default, this is
also <i>/usr/local</i>. This can be set at build time with the <tt><span
style='font-size:10.0pt'>--exec-prefix</span></tt> argument to the configure
script. Specifically, all configuration files (e.g., the <i>config.h</i> header
file) are installed in the directory <tt><span style='font-size:10.0pt'>exec_prefix</span></tt>
<tt><span style='font-size:10.0pt'>+</span></tt> <tt><span style='font-size:
10.0pt'>'/lib/pythonversion/config'</span></tt>, and shared library modules are
installed in <tt><span style='font-size:10.0pt'>exec_prefix</span></tt> <tt><span
style='font-size:10.0pt'>+</span></tt> <tt><span style='font-size:10.0pt'>'/lib/pythonversion/lib-dynload'</span></tt>,
where version is equal to <tt><i><span style='font-size:10.0pt'>version </span></i></tt><tt><span
style='font-size:10.0pt'>[:3]</span></tt>.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>executable</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>A string giving the name of the executable binary
for the Python interpreter, on systems that support it.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>exit(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>[arg]</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Exits from Python. This is implemented by raising
the <tt><span style='font-size:10.0pt'>SystemExit</span></tt> exception, so
cleanup actions specified by <tt><span style='font-size:10.0pt'>finally</span></tt>
clauses of <tt><span style='font-size:10.0pt'>try</span></tt> statements are
honored, and itâs possible to intercept the exit attempt at an outer level. The
optional argument <tt><i><span style='font-size:10.0pt'>arg</span></i></tt> can
be an integer giving the exit status (defaulting to zero) or another type of
object. If itâs an integer, zero is considered successful termination, and any
nonzero value is considered abnormal termination by shells and the like. Most
systems require it to be in the range 0-127 and produce undefined results
otherwise. Some systems have a convention for assigning specific meanings to
specific exit codes, but these are generally underdeveloped; Unix programs
generally use 2 for command-line syntax errors and 1 for all other kind of
errors. If another type of object is passed, <tt><span style='font-size:10.0pt'>None</span></tt>
is equivalent to passing zero, and any other object is printed to <tt><span
style='font-size:10.0pt'>sys.stderr</span></tt> and results in an exit code of
1. In particular, <tt><span style='font-size:10.0pt'>sys.exit(&quot;<i>some
error message</i>&quot;)</span></tt> is a quick way to exit a program when an
error occurs.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>exitfunc</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>This value is not actually defined by the module
but can be set by the user (or by a program) to specify a cleanup action at
program exit. When set, it should be a parameterless function. This function is
called when the interpreter exits. The <tt><span style='font-size:10.0pt'>exit</span></tt>
function is not called when the program is killed by a signal, when a Python
fatal internal error is detected, or when <tt><span style='font-size:10.0pt'>os._exit()</span></tt>
is called.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>getrefcount(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>object</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Returns the reference count of the object. The
count returned is generally one higher than you might expect, because it
includes the (temporary) reference as an argument to <tt><span
style='font-size:10.0pt'>getrefcount()</span></tt>.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>last_type</span></span><span
style='font-family:Arial;color:#990000'> , </span><span class=monofont1><span
style='color:#990000'>last_value</span></span><span style='font-family:Arial;
color:#990000'> , </span><span class=monofont1><span style='color:#990000'>last_traceback</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>These three variables arenât always defined; they
are set when an exception is not handled, and the interpreter prints an error
message and a stack traceback. Their intended use is to allow an interactive
user to import a debugger module and engage in postmortem debugging without
having to reexecute the command that caused the error. (Typical use is <tt><span
style='font-size:10.0pt'>import</span></tt> <tt><span style='font-size:10.0pt'>pdb;</span></tt>
<tt><span style='font-size:10.0pt'>pdb.pm()</span></tt> to enter the postmortem
debugger.)</p>

<p style='margin-left:.5in'>The meaning of the variables is the same as that of
the return values from <tt><span style='font-size:10.0pt'>exc_info()</span></tt>,
as seen in the previous entry. (Since there is only one interactive thread,
thread-safety is not a concern for these variables, unlike for <tt><span
style='font-size:10.0pt'>exc_type</span></tt>, etc.)</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>maxint</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>The largest positive integer supported by Pythonâs
regular integer type. This is at least 231-1. The largest negative integer is <tt><span
style='font-size:10.0pt'>-maxint-1</span></tt>: the asymmetry results from the
use of 2âs complement binary arithmetic.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>modules</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>A dictionary that maps module names to modules that
have already been loaded. This can be manipulated to force reloading of modules
and other tricks. Removing a module from this dictionary is not the same as
calling <tt><span style='font-size:10.0pt'>reload()</span></tt> on the
corresponding module object.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>path</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>A list of strings that specifies the search path
for modules. Initialized from the environment variable $PYTHONPATH or an
installation-dependent default.</p>

<p style='margin-left:.5in'>The first item of this list, <tt><span
style='font-size:10.0pt'>path[0]</span></tt>, is the directory containing the
script that invoked the Python interpreter. If the script directory isnât
available (e.g., if the interpreter is invoked interactively or if the script
is read from standard input), <tt><span style='font-size:10.0pt'>path[0]</span></tt>
is the empty string, which directs Python to search modules in the current
directory first. Notice that the script directory is inserted before the
entries inserted as a result of $PYTHONPATH.</p>

<p class=MsoNormal style='page-break-after:avoid'><span class=monofont1><span
style='color:#990000'>platform</span></span><span style='font-family:Arial;
color:#990000'> </span></p>

<p style='margin-left:.5in'>Contains a platform identifier, e.g., <tt><span
style='font-size:10.0pt'>sunos5</span></tt> or <tt><span style='font-size:10.0pt'>linux1</span></tt>.
This can append platform-specific components to <tt><span style='font-size:
10.0pt'>path</span></tt>, for instance.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>prefix</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>A string giving the site-specific directory prefix
where the platform-independent Python files are installed; by default, this is
the string <i>/usr/local</i>. This can be set at build time with the <tt><span
style='font-size:10.0pt'>--prefix</span></tt> argument to the configure script.
The main collection of Python library modules is installed in the directory <tt><span
style='font-size:10.0pt'>prefix</span></tt> <tt><span style='font-size:10.0pt'>+</span></tt>
<tt><span style='font-size:10.0pt'>'/lib/pythonversion'</span></tt> while the
platform-independent header files (all except <i>config.h</i>) are stored in <tt><span
style='font-size:10.0pt'>prefix</span></tt> <tt><span style='font-size:10.0pt'>+</span></tt>
<tt><span style='font-size:10.0pt'>'/include/pythonversion'</span></tt>, where
version is equal to <tt><i><span style='font-size:10.0pt'>version </span></i></tt><tt><span
style='font-size:10.0pt'>[:3]</span></tt>.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>ps1</span></span><span
style='font-family:Arial;color:#990000'> , </span><span class=monofont1><span
style='color:#990000'>ps2</span></span><span style='font-family:Arial;
color:#990000'> </span></p>

<p style='margin-left:.5in'>Strings specifying the primary and secondary prompt
of the interpreter. These are defined only if the interpreter is in interactive
mode. Their initial values in this case are <tt><span style='font-size:10.0pt'>&gt;&gt;&gt;</span></tt>
and <tt><span style='font-size:10.0pt'>...</span></tt> . If a nonstring object
is assigned to either variable, its <tt><span style='font-size:10.0pt'>str()</span></tt>
is reevaluated each time the interpreter prepares to read a new interactive
command; this can implement a dynamic prompt.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>setcheckinterval(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>interval</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Sets the interpreterâs check interval. This integer
value determines how often the interpreter checks for periodic things such as
thread switches and signal handlers. The default is 10, meaning the check is
performed every 10 Python virtual instructions. Setting it to a larger value
may increase performance for programs using threads. Setting it to a value <tt><span
style='font-size:10.0pt'>&lt;=</span></tt> <tt><span style='font-size:10.0pt'>0</span></tt>
checks every virtual instruction, maximizing responsiveness as well as
overhead.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>setprofile(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>profilefunc</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Sets the systemâs <tt><span style='font-size:10.0pt'>profile</span></tt>
function, which allows you to implement a Python source code profiler in
Python. The systemâs <tt><span style='font-size:10.0pt'>profile</span></tt>
function is called similarly to the systemâs <tt><span style='font-size:10.0pt'>trace</span></tt>
function (see <tt><span style='font-size:10.0pt'>settrace()</span></tt>), but
it isnât called for each executed line of code (only on call and return and
when an exception occurs). Also, its return value isnât used, so it can just
return <tt><span style='font-size:10.0pt'>None</span></tt>.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>settrace(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>tracefunc</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Sets the systemâs <tt><span style='font-size:10.0pt'>trace</span></tt>
function, which allows you to implement a Python source code debugger in
Python.</p>

<p class=MsoNormal style='page-break-after:avoid'><span class=monofont1><span
style='color:#990000'>stdin</span></span><span style='font-family:Arial;
color:#990000'> , </span><span class=monofont1><span style='color:#990000'>stdout</span></span><span
style='font-family:Arial;color:#990000'> , </span><span class=monofont1><span
style='color:#990000'>stderr</span></span><span style='font-family:Arial;
color:#990000'> </span></p>

<p style='margin-left:.5in'>File objects corresponding to the interpreterâs
standard input, output, and error streams. <tt><span style='font-size:10.0pt'>stdin</span></tt>
is used for all interpreter input except for scripts but including calls to <tt><span
style='font-size:10.0pt'>input()</span></tt> and <tt><span style='font-size:
10.0pt'>raw_input()</span></tt>. <tt><span style='font-size:10.0pt'>stdout</span></tt>
is used for the output of <tt><span style='font-size:10.0pt'>print</span></tt>
and <tt><span style='font-size:10.0pt'>expression</span></tt> statements and
for the prompts of <tt><span style='font-size:10.0pt'>input()</span></tt> and <tt><span
style='font-size:10.0pt'>raw_input()</span></tt>. The interpreterâs own prompts
and (almost all of ) its error messages go to <tt><span style='font-size:10.0pt'>stderr</span></tt>.
<tt><span style='font-size:10.0pt'>stdout</span></tt> and <tt><span
style='font-size:10.0pt'>stderr</span></tt> neednât be built-in file objects:
any object is acceptable as long as it has a <tt><span style='font-size:10.0pt'>write()</span></tt>
method that takes a string argument. (Changing these objects doesnât affect the
standard I/O streams of processes executed by <tt><span style='font-size:10.0pt'>os.popen()</span></tt>,
<tt><span style='font-size:10.0pt'>os.system()</span></tt>, or the <tt><span
style='font-size:10.0pt'>exec*()</span></tt> family of functions in the <tt><span
style='font-size:10.0pt'>os</span></tt> module.)</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>__stdin__</span></span><span
style='font-family:Arial;color:#990000'> , </span><span class=monofont1><span
style='color:#990000'>__stdout__</span></span><span style='font-family:Arial;
color:#990000'> , </span><span class=monofont1><span style='color:#990000'>__stderr__</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Contain the original values of <tt><span
style='font-size:10.0pt'>stdin</span></tt>, <tt><span style='font-size:10.0pt'>stderr</span></tt>,
and <tt><span style='font-size:10.0pt'>stdout</span></tt> at the start of the
program. They are used during finalization and can restore the actual files to
known working file objects in case they have been overwritten with a broken
object.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>tracebacklimit</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>When this variable is set to an integer value, it
determines the maximum number of levels of traceback information printed when
an unhandled exception occurs. The default is 1000. When set to or less, all
traceback information is suppressed, and only the exception type and value are
printed.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>version</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>A string containing the version number of the
Python interpreter.</p>

<h3><a name="_A.5_module_string:_Common_String_Op"></a>A.5 module string:
Common String Operations</h3>

<p>This module defines some constants that can check character classes, and
some useful string functions. See the module <tt><span style='font-size:10.0pt'>re</span></tt>
for string functions based on regular expressions. The constants defined in
this module are: </p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>digits</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>The string â<tt><span style='font-size:10.0pt'>0123456789</span></tt>â.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>hexdigits</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>The string <tt><span style='font-size:10.0pt'>'0123456789abcdefABCDEF'</span></tt>.</p>

<p class=MsoNormal style='page-break-after:avoid'><span class=monofont1><span
style='color:#990000'>letters</span></span><span style='font-family:Arial;
color:#990000'> </span></p>

<p style='margin-left:.5in'>The concatenation of the strings <tt><span
style='font-size:10.0pt'>lowercase()</span></tt> and <tt><span
style='font-size:10.0pt'>uppercase()</span></tt> (check their entries in this
list).</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>lowercase</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>A string containing all characters considered
lowercase letters. On most systems this is the string <tt><span
style='font-size:10.0pt'>'abcdefghijklmnopqrstuvwxyz'</span></tt>. Donât change
its definition: the effect on the routines <tt><span style='font-size:10.0pt'>upper()</span></tt>
and <tt><span style='font-size:10.0pt'>swapcase()</span></tt> is undefined.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>octdigits</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>The string <tt><span style='font-size:10.0pt'>'01234567'</span></tt>.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>uppercase</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>A string containing all characters considered
uppercase letters. On most systems this is the string <tt><span
style='font-size:10.0pt'>'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span></tt>. Donât change
its definition: the effect on the routines <tt><span style='font-size:10.0pt'>lower()</span></tt>
and <tt><span style='font-size:10.0pt'>swapcase()</span></tt> is undefined.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>whitespace</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>A string containing all characters that are
considered whitespace. On most systems this includes the characters space, tab,
linefeed, return, formfeed, and vertical tab. Donât change its definition: the
effect on the routines <tt><span style='font-size:10.0pt'>strip()</span></tt>
and <tt><span style='font-size:10.0pt'>split()</span></tt> is undefined.</p>

<p>The functions defined in this module are:</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>atof(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>s</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>Converts a string to a floating-point number. The
string must have the standard syntax for a floating-point literal in Python,
optionally preceded by a sign (+ or -). Note that this behaves identically to
the built-in function <tt><span style='font-size:10.0pt'>float()</span></tt>
when passed a string.</p>

<p style='margin-left:.5in'>When passing in a string, values for <tt><span
style='font-size:10.0pt'>NaN</span></tt> and <tt><span style='font-size:10.0pt'>Infinity</span></tt>
may be returned, depending on the underlying C library. The specific set of
strings accepted that cause these values to be returned depends entirely on the
C library and is known to vary.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>atoi(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>s[,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>base]</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>Converts string <tt><i><span style='font-size:10.0pt'>s</span></i></tt>
to an integer in the given <tt><i><span style='font-size:10.0pt'>base</span></i></tt>.
The string must consist of one or more digits, optionally preceded by a sign (+
or -). The <tt><i><span style='font-size:10.0pt'>base</span></i></tt> defaults
to 10. If itâs 0, a default base is chosen depending on the leading characters
of the string (after stripping the sign): 0x or 0X means 16, means 8, anything
else means 10. If base is 16, a leading 0x or 0X is always accepted. When
invoked without base or with base set to 10, this behaves identically to the
built-in function <tt><span style='font-size:10.0pt'>int()</span></tt> when
passed a string. (Also note: for a more flexible interpretation of numeric
literals, use the built-in function <tt><span style='font-size:10.0pt'>eval()</span></tt>.)</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>atol(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>s[,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>base]</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>Converts string <tt><i><span style='font-size:10.0pt'>s</span></i></tt>
to a long integer in the given <tt><i><span style='font-size:10.0pt'>base</span></i></tt>.
The string must consist of one or more digits, optionally preceded by a sign (+
or -). The <tt><i><span style='font-size:10.0pt'>base</span></i></tt> argument
has the same meaning as for <tt><span style='font-size:10.0pt'>atoi()</span></tt>.
A trailing <tt><span style='font-size:10.0pt'>l</span></tt> or <tt><span
style='font-size:10.0pt'>L</span></tt> isnât allowed, except if the base is 0.
When invoked without base or with base set to 10, this behaves identically to
the built-in function <tt><span style='font-size:10.0pt'>long()</span></tt>
when passed a string.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>capitalize(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>word</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Capitalizes the first character of the argument.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>capwords(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>s</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>Splits the argument into words using <tt><span
style='font-size:10.0pt'>split()</span></tt>, capitalizes each word using <tt><span
style='font-size:10.0pt'>capitalize()</span></tt>, and joins the capitalized
words using <tt><span style='font-size:10.0pt'>join()</span></tt>. This
replaces runs of whitespace characters by a single space and removes leading
and trailing whitespace.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>expandtabs(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>s,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>[tabsize]</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>Expands tabs in a string, i.e., replaces them by
one or more spaces, depending on the current column and the given tab size. The
column number is reset to zero after each newline occurring in the string. This
doesnât understand other nonprinting characters or escape sequences. The tab
size defaults to 8.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>find(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>s,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>sub[,</span></i></tt><span style='font-family:Arial;
color:#990000'> </span><tt><i><span style='font-size:10.0pt;color:#990000'>start[,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>end]]</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>Returns the lowest index in <tt><i><span
style='font-size:10.0pt'>s</span></i></tt> where the substring <tt><i><span
style='font-size:10.0pt'>sub</span></i></tt> is found such that <tt><i><span
style='font-size:10.0pt'>sub</span></i></tt> is wholly contained in <tt><i><span
style='font-size:10.0pt'>s</span></i></tt><tt><span style='font-size:10.0pt'>[<i>start</i>:<i>end</i>]</span></tt>.
Returns -1 on failure. Defaults for <tt><i><span style='font-size:10.0pt'>start</span></i></tt>
and <tt><i><span style='font-size:10.0pt'>end</span></i></tt>, and
interpretation of negative values is the same as for slices.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>rfind(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>s,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>sub[,</span></i></tt><span style='font-family:Arial;
color:#990000'> </span><tt><i><span style='font-size:10.0pt;color:#990000'>start[,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>end]]</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>Like <tt><span style='font-size:10.0pt'>find()</span></tt>
but finds the highest index.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>index(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>s,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>sub[,</span></i></tt><span style='font-family:Arial;
color:#990000'> </span><tt><i><span style='font-size:10.0pt;color:#990000'>start[,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>end]]</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>Like <tt><span style='font-size:10.0pt'>find()</span></tt>
but raises <tt><span style='font-size:10.0pt'>ValueError</span></tt> when the substring
isnât found.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>rindex(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>s,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>sub[,</span></i></tt><span style='font-family:Arial;
color:#990000'> </span><tt><i><span style='font-size:10.0pt;color:#990000'>start[,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>end]]</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>Like <tt><span style='font-size:10.0pt'>rfind()</span></tt>
but raises <tt><span style='font-size:10.0pt'>ValueError</span></tt> when the
substring isnât found.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>count(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>s,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>sub[,</span></i></tt><span style='font-family:Arial;
color:#990000'> </span><tt><i><span style='font-size:10.0pt;color:#990000'>start[,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>end]]</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>Returns the number of (nonoverlapping) occurrences
of substring <tt><i><span style='font-size:10.0pt'>sub</span></i></tt> in
string <tt><i><span style='font-size:10.0pt'>s</span></i></tt><tt><span
style='font-size:10.0pt'>[<i>start</i>:<i>end</i>]</span></tt>. Defaults for <tt><i><span
style='font-size:10.0pt'>start</span></i></tt> and <tt><i><span
style='font-size:10.0pt'>end</span></i></tt>, and interpretation of negative
values is the same as for slices.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>lower(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>s</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>Returns a copy of <tt><i><span style='font-size:
10.0pt'>s</span></i></tt>, but with uppercase letters converted to lowercase.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>maketrans(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>from,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>to</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>Returns a translation table suitable for passing to
<tt><span style='font-size:10.0pt'>translate()</span></tt> or <tt><span
style='font-size:10.0pt'>regex.compile()</span></tt> that maps each character
in <tt><i><span style='font-size:10.0pt'>from</span></i></tt> into the
character at the same position in <tt><i><span style='font-size:10.0pt'>to</span></i></tt>
; <tt><i><span style='font-size:10.0pt'>from</span></i></tt> and <tt><i><span
style='font-size:10.0pt'>to</span></i></tt> must have the same length.</p>

<p style='margin-left:.5in'>Donât use strings derived from <tt><span
style='font-size:10.0pt'>lowercase</span></tt> and <tt><span style='font-size:
10.0pt'>uppercase</span></tt> as arguments; in some locales, these donât have the
same length. For case conversions, always use <tt><span style='font-size:10.0pt'>lower()</span></tt>
and <tt><span style='font-size:10.0pt'>upper()</span></tt>.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>split(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>s[,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>sep[,</span></i></tt><span style='font-family:Arial;
color:#990000'> </span><tt><i><span style='font-size:10.0pt;color:#990000'>maxsplit]]</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Returns a list of the words of the string <tt><i><span
style='font-size:10.0pt'>s</span></i></tt>. If the optional second argument <tt><i><span
style='font-size:10.0pt'>sep</span></i></tt> is absent or <tt><span
style='font-size:10.0pt'>None</span></tt>, the words are separated by arbitrary
strings of whitespace characters (space, tab, newline, return, formfeed). If
the second argument <tt><i><span style='font-size:10.0pt'>sep</span></i></tt>
is present and not <tt><span style='font-size:10.0pt'>None</span></tt>, it
specifies a string to be used as the word separator. The returned list then has
one more item than the number of nonoverlapping occurrences of the separator in
the string. The optional third argument <tt><i><span style='font-size:10.0pt'>maxsplit</span></i></tt>
defaults to 0. If itâs nonzero, at most <tt><i><span style='font-size:10.0pt'>maxsplit</span></i></tt>
number of splits occur, and the remainder of the string is returned as the
final element of the list (thus, the list has at most <tt><i><span
style='font-size:10.0pt'>maxsplit</span></i></tt><tt><span style='font-size:
10.0pt'>+1</span></tt> elements).</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>splitfields(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>s[,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>sep[,</span></i></tt><span style='font-family:Arial;
color:#990000'> </span><tt><i><span style='font-size:10.0pt;color:#990000'>maxsplit]]</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>This function behaves identically to <tt><span
style='font-size:10.0pt'>split()</span></tt>. In the past, <tt><span
style='font-size:10.0pt'>split()</span></tt> was used with only one argument; <tt><span
style='font-size:10.0pt'>splitfields()</span></tt> was used with two.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>join(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>words[,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>sep]</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>Concatenates a list or tuple of words with
intervening occurrences of <tt><i><span style='font-size:10.0pt'>sep</span></i></tt>.
The default value for <tt><i><span style='font-size:10.0pt'>sep</span></i></tt>
is a single space character. Itâs always true that <tt><span style='font-size:
10.0pt'>string.join(string.split(<i>s</i>,</span></tt> <tt><i><span
style='font-size:10.0pt'>sep</span></i></tt><tt><span style='font-size:10.0pt'>),</span></tt>
<tt><i><span style='font-size:10.0pt'>sep</span></i></tt><tt><span
style='font-size:10.0pt'>)</span></tt> equals <tt><i><span style='font-size:
10.0pt'>s</span></i></tt>.</p>

<p class=MsoNormal style='page-break-after:avoid'><span class=monofont1><span
style='color:#990000'>joinfields(</span></span><span style='font-family:Arial;
color:#990000'> &nbsp; </span><tt><i><span style='font-size:10.0pt;color:#990000'>words[,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>sep]</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>This function behaves identically to <tt><span
style='font-size:10.0pt'>join()</span></tt>. In the past, <tt><span
style='font-size:10.0pt'>join()</span></tt> was used with only one argument,
while <tt><span style='font-size:10.0pt'>joinfields()</span></tt> was used with
two arguments.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>lstrip(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>s</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>Returns a copy of <tt><i><span style='font-size:
10.0pt'>s</span></i></tt> but without leading whitespace characters.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>rstrip(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>s</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>Returns a copy of <tt><i><span style='font-size:
10.0pt'>s</span></i></tt> but without trailing whitespace characters.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>strip(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>s</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>Returns a copy of <tt><i><span style='font-size:
10.0pt'>s</span></i></tt> without leading or trailing whitespace.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>swapcase(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>s</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>Returns a copy of <tt><i><span style='font-size:
10.0pt'>s</span></i></tt>, but with lowercase letters converted to uppercase
and vice versa.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>translate(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>s,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>table[,</span></i></tt><span style='font-family:Arial;
color:#990000'> </span><tt><i><span style='font-size:10.0pt;color:#990000'>deletechars]</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Deletes all characters from <tt><i><span
style='font-size:10.0pt'>s</span></i></tt> that are in <tt><i><span
style='font-size:10.0pt'>deletechars</span></i></tt> (if present) and then
translates the characters using <tt><i><span style='font-size:10.0pt'>table</span></i></tt>,
which must be a 256-character string giving the translation for each character
value, indexed by its ordinal.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>upper(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>s</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>Returns a copy of <tt><i><span style='font-size:
10.0pt'>s</span></i></tt>, but with lowercase letters converted to uppercase.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>ljust(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>s,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>width</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; , </span><span class=monofont1><span style='color:#990000'>rjust(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>s,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>width</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; , </span><span class=monofont1><span style='color:#990000'>center(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>s,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>width</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>Respectively left justifies, right justifies, and
centers a string in a field of given width. They return a string that is at
least <tt><i><span style='font-size:10.0pt'>width</span></i></tt> characters
wide, created by padding the string <tt><i><span style='font-size:10.0pt'>s</span></i></tt>
with spaces until the given width on the right, left, or both sides. The string
is never truncated.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>zfill(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>s,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>width</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>Pads a numeric string on the left with zero digits
until the given width is reached. Strings starting with a sign are handled
correctly.</p>

<p class=MsoNormal style='page-break-after:avoid'><span class=monofont1><span
style='color:#990000'>replace(</span></span><span style='font-family:Arial;
color:#990000'> &nbsp; </span><tt><i><span style='font-size:10.0pt;color:#990000'>str,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>old,</span></i></tt><span style='font-family:Arial;
color:#990000'> </span><tt><i><span style='font-size:10.0pt;color:#990000'>new[,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>maxsplit]</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>Returns a copy of string <tt><i><span
style='font-size:10.0pt'>str</span></i></tt> with all occurrences of substring <tt><i><span
style='font-size:10.0pt'>old</span></i></tt> replaced by <tt><i><span
style='font-size:10.0pt'>new</span></i></tt>. If the optional argument <tt><i><span
style='font-size:10.0pt'>maxsplit</span></i></tt> is given, the first <tt><i><span
style='font-size:10.0pt'>maxsplit</span></i></tt> occurrences are replaced.</p>

<p>This module is implemented in Python. Much of its functionality has been
reimplemented in the built-in module <tt><span style='font-size:10.0pt'>strop</span></tt>.
However, you should never import the latter module directly. When <tt><span
style='font-size:10.0pt'>string</span></tt> discovers that <tt><span
style='font-size:10.0pt'>strop</span></tt> exists, it transparently replaces
parts of itself with the implementation from <tt><span style='font-size:10.0pt'>strop</span></tt>.
After initialization, there is no overhead in using <tt><span style='font-size:
10.0pt'>string</span></tt> instead of <tt><span style='font-size:10.0pt'>strop</span></tt>.</p>

<h3><a name="_A.6_module_os:_Miscellaneous_OS_Int"></a>A.6 module os:
Miscellaneous OS Interfaces </h3>

<p>This module provides a more portable way to use operating system-dependent
functionality than importing an OS-dependent built-in module such as <tt><span
style='font-size:10.0pt'>posix</span></tt> or <tt><span style='font-size:10.0pt'>nt</span></tt>.</p>

<p>This module searches for an OS-dependent built-in module such as <tt><span
style='font-size:10.0pt'>mac</span></tt> or <tt><span style='font-size:10.0pt'>posix</span></tt>
and exports the same functions and data as found there. The design of all
Pythonâs built-in OS dependent modules is such that as long as the same
functionality is available, it uses the same interface; e.g., the function <tt><span
style='font-size:10.0pt'>os.stat(<i>path</i>)</span></tt> returns <tt><i><span
style='font-size:10.0pt'>stat</span></i></tt> information about <tt><span
style='font-size:10.0pt'>path</span></tt> in the same format (which happens to
have originated with the POSIX interface).</p>

<p>Extensions peculiar to a particular OS are also available through the <tt><span
style='font-size:10.0pt'>os</span></tt> module, but using them is, of course, a
threat to portability.</p>

<p>After <tt><span style='font-size:10.0pt'>os</span></tt> is imported for the
first time, thereâs no performance penalty in using functions from <tt><span
style='font-size:10.0pt'>os</span></tt> instead of directly from the
OS-dependent built-in module, so there should be no reason not to use <tt><span
style='font-size:10.0pt'>os</span></tt>.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>error</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Raised when a function returns a system-related
error (e.g., not for illegal argument types). This is also known as the
built-in exception <tt><span style='font-size:10.0pt'>OSError</span></tt>. The
accompanying value is a pair containing the numeric error code from <tt><span
style='font-size:10.0pt'>errno</span></tt> and the corresponding string, as
would be printed by the C function <tt><span style='font-size:10.0pt'>perror()</span></tt>.
See the <tt><span style='font-size:10.0pt'>errno</span></tt> module, which
contains names for the error codes defined by the underlying operating system.</p>

<p style='margin-left:.5in'>When exceptions are classes, this exception carries
two attributes, <tt><span style='font-size:10.0pt'>errno</span></tt> and <tt><span
style='font-size:10.0pt'>strerror</span></tt>. The first holds the value of the
C <tt><span style='font-size:10.0pt'>errno</span></tt> variable, and the latter
holds the corresponding error message from <tt><span style='font-size:10.0pt'>strerror()</span></tt>.
For exceptions that involve a filesystem path (e.g., <tt><span
style='font-size:10.0pt'>chdir()</span></tt> or <tt><span style='font-size:
10.0pt'>unlink()</span></tt>), the exception instance contains a third
attribute, <tt><span style='font-size:10.0pt'>filename</span></tt>, which is
the filename passed to the function.</p>

<p style='margin-left:.5in'>When exceptions are strings, the string for the
exception is <tt><span style='font-size:10.0pt'>'OSError'</span></tt>.</p>

<p class=MsoNormal style='page-break-after:avoid'><span class=monofont1><span
style='color:#990000'>name</span></span><span style='font-family:Arial;
color:#990000'> </span></p>

<p style='margin-left:.5in'>The name of the OS-dependent module imported. The
following names have currently been registered: <tt><span style='font-size:
10.0pt'>'posix'</span></tt>, <tt><span style='font-size:10.0pt'>'nt'</span></tt>,
<tt><span style='font-size:10.0pt'>'dos'</span></tt>, <tt><span
style='font-size:10.0pt'>'mac'</span></tt>, <tt><span style='font-size:10.0pt'>'os2'</span></tt>.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>path</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>The corresponding OS-dependent standard module for
pathname operations, e.g., <tt><span style='font-size:10.0pt'>posixpath</span></tt>
or <tt><span style='font-size:10.0pt'>macpath</span></tt>. Thus, given the
proper imports, <tt><span style='font-size:10.0pt'>os.path.split(<i>file</i>)</span></tt>
is equivalent to but more portable than <tt><span style='font-size:10.0pt'>posixpath.split(<i>file</i>)</span></tt>.
This is also a valid module: it may be imported directly as <tt><span
style='font-size:10.0pt'>os.path</span></tt>.</p>

<h4>A.6.1 Process Parameters </h4>

<p>These functions and data items provide information and operate on the
current process and user:</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>chdir(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>path</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Changes the current working directory to <tt><i><span
style='font-size:10.0pt'>path</span></i></tt>. Availability: Macintosh, Unix,
Windows.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>environ</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>A mapping representing the string environment. For
example, <tt><span style='font-size:10.0pt'>environ['HOME']</span></tt> is the
pathname of your home directory, equivalent to <tt><span style='font-size:10.0pt'>getenv(&quot;HOME&quot;)</span></tt>
in C.</p>

<p style='margin-left:.5in'>If the platform supports the <tt><span
style='font-size:10.0pt'>putenv()</span></tt> function, this mapping can modify
the environment as well as query the environment. <tt><span style='font-size:
10.0pt'>putenv()</span></tt> is called automatically when the mapping is
modified.</p>

<p style='margin-left:.5in'>If <tt><span style='font-size:10.0pt'>putenv()</span></tt>
isnât provided, this mapping can be passed to the appropriate process-creation
functions to cause child processes to use a modified environment.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>getcwd()</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Returns a string representing the current working
directory. Availability: Macintosh, Unix, Windows.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>getegid()</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Returns the current processâs effective group ID.
Availability: Unix.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>geteuid()</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Returns the current processâs effective user ID.
Availability: Unix.</p>

<p class=MsoNormal style='page-break-after:avoid'><span class=monofont1><span
style='color:#990000'>getgid()</span></span><span style='font-family:Arial;
color:#990000'> </span></p>

<p style='margin-left:.5in'>Returns the current processâs group ID.
Availability: Unix.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>getpgrp()</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Returns the current processâs group ID.
Availability: Unix.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>getpid()</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Returns the current process ID. Availability: Unix,
Windows.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>getppid()</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Returns the parentâs process ID. Availability:
Unix.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>getuid()</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Returns the current processâs user ID.
Availability: Unix.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>putenv(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>varname,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>value</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>Sets the environment variable, <tt><i><span
style='font-size:10.0pt'>varname</span></i></tt>, to the string value. Such
changes to the environment affect subprocesses started with <tt><span
style='font-size:10.0pt'>os.system()</span></tt>, <tt><span style='font-size:
10.0pt'>popen()</span></tt>, or <tt><span style='font-size:10.0pt'>fork()</span></tt>
and <tt><span style='font-size:10.0pt'>execv()</span></tt>. Availability: most
flavors of Unix, Windows.</p>

<p style='margin-left:.5in'>When <tt><span style='font-size:10.0pt'>putenv()</span></tt>
is supported, assignments to items in <tt><span style='font-size:10.0pt'>os.environ</span></tt>
are automatically translated into corresponding calls to <tt><span
style='font-size:10.0pt'>putenv()</span></tt>; however, calls to <tt><span
style='font-size:10.0pt'>putenv()</span></tt> donât update <tt><span
style='font-size:10.0pt'>os.environ</span></tt>, so itâs actually preferable to
assign to items of <tt><span style='font-size:10.0pt'>os.environ</span></tt>.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>setgid(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>gid</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Sets the current processâs group ID. Availability:
Unix.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>setpgrp()</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Calls the system call <tt><span style='font-size:
10.0pt'>setpgrp()</span></tt> or <tt><span style='font-size:10.0pt'>setpgrp(0,</span></tt>
<tt><span style='font-size:10.0pt'>0)</span></tt> depending on which version is
implemented (if any). See the Unix manual for the semantics. Availability:
Unix.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>setpgid(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>pid,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>pgrp</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>Calls the system call <tt><span style='font-size:
10.0pt'>setpgid()</span></tt>. See the Unix manual for the semantics.
Availability: Unix.</p>

<p class=MsoNormal style='page-break-after:avoid'><span class=monofont1><span
style='color:#990000'>setsid()</span></span><span style='font-family:Arial;
color:#990000'> </span></p>

<p style='margin-left:.5in'>Calls the system call <tt><span style='font-size:
10.0pt'>setsid()</span></tt>. See the Unix manual for the semantics.
Availability: Unix.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>setuid(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>uid</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Sets the current processâs user ID. Availability:
Unix.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>strerror(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>code</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Returns the error message corresponding to the
error code in code. Availability: Unix, Windows.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>umask(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>mask</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Sets the current numeric <tt><i><span
style='font-size:10.0pt'>umask</span></i></tt> and returns the previous <tt><i><span
style='font-size:10.0pt'>umask</span></i></tt>. Availability: Unix, Windows.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>uname()</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Returns a five-tuple containing information
identifying the current operating system. The tuple contains five strings: <tt><i><span
style='font-size:10.0pt'>(sysname,</span></i></tt> <tt><i><span
style='font-size:10.0pt'>nodename,</span></i></tt> <tt><i><span
style='font-size:10.0pt'>release,</span></i></tt> <tt><i><span
style='font-size:10.0pt'>version,</span></i></tt> <tt><i><span
style='font-size:10.0pt'>machine)</span></i></tt>. Some systems truncate the <tt><i><span
style='font-size:10.0pt'>nodename</span></i></tt> to eight characters or to the
leading component; a better way to get the hostname is <tt><span
style='font-size:10.0pt'>socket.gethostname()</span></tt> or even <tt><span
style='font-size:10.0pt'>socket.gethostbyaddr(socket.get-hostname())</span></tt>.
Availability: recent flavors of Unix.</p>

<h4>A.6.2 File Object Creation </h4>

<p>These functions create new file objects:</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>fdopen(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>fd[,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>mode[,</span></i></tt><span style='font-family:Arial;
color:#990000'> </span><tt><i><span style='font-size:10.0pt;color:#990000'>bufsize]]</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Returns an open file object connected to the file
descriptor <tt><i><span style='font-size:10.0pt'>fd</span></i></tt>. The <tt><i><span
style='font-size:10.0pt'>mode</span></i></tt> and <tt><i><span
style='font-size:10.0pt'>bufsize</span></i></tt> arguments have the same
meaning as the corresponding arguments to the built-in <tt><span
style='font-size:10.0pt'>open()</span></tt> function. Availability: Macintosh,
Unix, Windows.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>popen(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>command</span></i></tt><span
class=monofont1><span style='color:#990000'>[,</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>mode</span></i></tt><span
class=monofont1><span style='color:#990000'>[,</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>bufsize</span></i></tt><span
class=monofont1><span style='color:#990000'>]])</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Opens a pipe to or from <tt><i><span
style='font-size:10.0pt'>command</span></i></tt>. The return value is an open
file object connected to the pipe, which can be read or written depending on
whether mode is <tt><span style='font-size:10.0pt'>r</span></tt> (default) or <tt><span
style='font-size:10.0pt'>w</span></tt>. The <tt><i><span style='font-size:10.0pt'>bufsize</span></i></tt>
argument has the same meaning as the corresponding argument to the built-in <tt><span
style='font-size:10.0pt'>open()</span></tt> function. The exit status of the
command (encoded in the format specified for <tt><span style='font-size:10.0pt'>wait()</span></tt>)
is available as the return value of the <tt><span style='font-size:10.0pt'>close()</span></tt>
method of the file object, except that when the exit status is zero
(termination without errors), <tt><span style='font-size:10.0pt'>None</span></tt>
is returned. Availability: Unix, Windows.</p>

<h4>A.6.3 File Descriptor Operations </h4>

<p>These functions operate on I/O streams referred to with file descriptors:</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>close(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>fd</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>Closes file descriptor <tt><i><span
style='font-size:10.0pt'>fd</span></i></tt>. Availability: Macintosh, Unix,
Windows.</p>

<p style='margin-left:.5in'>This function is intended for low-level I/O and
must be applied to a file descriptor as returned by <tt><span style='font-size:
10.0pt'>open()</span></tt> or <tt><span style='font-size:10.0pt'>pipe()</span></tt>.
To close a file object returned by the built-in function <tt><span
style='font-size:10.0pt'>open()</span></tt>, by <tt><span style='font-size:
10.0pt'>popen()</span></tt>, or <tt><span style='font-size:10.0pt'>fdopen()</span></tt>,
use its <tt><span style='font-size:10.0pt'>close()</span></tt> method.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>dup(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>fd</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>Returns a duplicate of file descriptor <tt><i><span
style='font-size:10.0pt'>fd</span></i></tt>. Availability: Macintosh, Unix,
Windows.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>dup2(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>fd</span></i></tt><span class=monofont1><span
style='color:#990000'>,</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span><tt><i><span style='font-size:10.0pt;color:#990000'>fd2</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Duplicates file descriptor <tt><i><span
style='font-size:10.0pt'>fd</span></i></tt> to <tt><i><span style='font-size:
10.0pt'>fd2</span></i></tt>, closing the latter first if necessary.
Availability: Unix, Windows.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>fstat(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>fd</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>Returns status for file descriptor <tt><i><span
style='font-size:10.0pt'>fd </span></i></tt>, like <tt><i><span
style='font-size:10.0pt'>stat()</span></i></tt>. Availability: Unix, Windows.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>fstatvfs(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>fd</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>Returns information about the filesystem containing
the file associated with file descriptor <tt><i><span style='font-size:10.0pt'>fd
</span></i></tt>, like <tt><span style='font-size:10.0pt'>statvfs()</span></tt>.
Availability: Unix.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>ftruncate(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>fd,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>length</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>Truncates the file corresponding to file descriptor
<tt><i><span style='font-size:10.0pt'>fd </span></i></tt>, so that it is <tt><i><span
style='font-size:10.0pt'>length</span></i></tt> bytes in size. Availability:
Unix.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>lseek(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>fd</span></i></tt><span class=monofont1><span
style='color:#990000'>,</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span><tt><i><span style='font-size:10.0pt;color:#990000'>pos</span></i></tt><span
class=monofont1><span style='color:#990000'>,</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>how</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Sets the current position of file descriptor <tt><i><span
style='font-size:10.0pt'>fd</span></i></tt> to position <tt><i><span
style='font-size:10.0pt'>pos</span></i></tt>, modified by <tt><i><span
style='font-size:10.0pt'>how </span></i></tt>: to set the position relative to
the beginning of the file; 1 to set it relative to the current position; and 2
to set it relative to the end of the file. Availability: Macintosh, Unix,
Windows.</p>

<p class=MsoNormal style='page-break-after:avoid'><span class=monofont1><span
style='color:#990000'>open(</span></span><span style='font-family:Arial;
color:#990000'> &nbsp; </span><tt><i><span style='font-size:10.0pt;color:#990000'>file,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>flags[,</span></i></tt><span style='font-family:Arial;
color:#990000'> </span><tt><i><span style='font-size:10.0pt;color:#990000'>mode]</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Opens the file <tt><i><span style='font-size:10.0pt'>file</span></i></tt>
and sets various flags according to <tt><i><span style='font-size:10.0pt'>flags</span></i></tt>
and, possibly, its mode according to <tt><i><span style='font-size:10.0pt'>mode</span></i></tt>.
The default mode is 0777 (octal), and the current <tt><span style='font-size:
10.0pt'>umask</span></tt> value is first masked out. Returns the file
descriptor for the newly opened file. Availability: Macintosh, Unix, Windows.</p>

<p style='margin-left:.5in'>For a description of the <tt><i><span
style='font-size:10.0pt'>flag</span></i></tt> and <tt><i><span
style='font-size:10.0pt'>mode</span></i></tt> values, see the C runtime
documentation; flag constants (such as <tt><span style='font-size:10.0pt'>O_RDONLY</span></tt>
and <tt><span style='font-size:10.0pt'>O_WRONLY</span></tt>) are also defined
in this module (see later in this section).</p>

<p style='margin-left:.5in'>This function is intended for low-level I/O.
Normally, you should use the built-in function <tt><span style='font-size:10.0pt'>open()</span></tt>,
which returns a file object with <tt><span style='font-size:10.0pt'>read()</span></tt>
and <tt><span style='font-size:10.0pt'>write()</span></tt> methods (and many
more).</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>pipe()</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Creates a pipe. Returns a pair of file descriptors <tt><span
style='font-size:10.0pt'>(<i>r,</i></span></tt> <tt><i><span style='font-size:
10.0pt'>w</span></i></tt><tt><span style='font-size:10.0pt'>)</span></tt>
usable for reading and writing, respectively. Availability: Unix, Windows.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>read(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>fd,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>n</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>Reads at most <tt><i><span style='font-size:10.0pt'>n</span></i></tt>
bytes from file descriptor <tt><i><span style='font-size:10.0pt'>fd</span></i></tt>.
Returns a string containing the bytes read. Availability: Macintosh, Unix,
Windows.</p>

<p style='margin-left:.5in'>This function is intended for low-level I/O and
must be applied to a file descriptor as returned by <tt><span style='font-size:
10.0pt'>open()</span></tt> or <tt><span style='font-size:10.0pt'>pipe()</span></tt>.
To read a file object returned by the built-in function <tt><span
style='font-size:10.0pt'>open()</span></tt> or by <tt><span style='font-size:
10.0pt'>popen()</span></tt>, <tt><span style='font-size:10.0pt'>fdopen()</span></tt>,
or <tt><span style='font-size:10.0pt'>sys.stdin</span></tt>, use its <tt><span
style='font-size:10.0pt'>read()</span></tt> or <tt><span style='font-size:10.0pt'>readline()</span></tt>
methods.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>tcgetpgrp(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>fd</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>Returns the process group associated with the
terminal given by <tt><i><span style='font-size:10.0pt'>fd</span></i></tt> (an
open file descriptor as returned by <tt><i><span style='font-size:10.0pt'>open()</span></i></tt>).
Availability: Unix.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>tcsetpgrp(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>fd,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>pg</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>Sets the process group associated with the terminal
given by <tt><i><span style='font-size:10.0pt'>fd</span></i></tt> (an open file
descriptor as returned by <tt><span style='font-size:10.0pt'>open()</span></tt>)
to <tt><i><span style='font-size:10.0pt'>pg</span></i></tt>. Availability:
Unix.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>ttyname(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>fd</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>Returns a string that specifies the terminal device
associated with file-descriptor <tt><i><span style='font-size:10.0pt'>fd</span></i></tt>.
If <tt><i><span style='font-size:10.0pt'>fd</span></i></tt> isnât associated
with a terminal device, an exception is raised. Availability: Unix.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>write(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>fd,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>str</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>Writes the string <tt><i><span style='font-size:
10.0pt'>str</span></i></tt> to file descriptor <tt><i><span style='font-size:
10.0pt'>fd</span></i></tt>. Returns the number of bytes actually written.
Availability: Macintosh, Unix, Windows.</p>

<p style='margin-left:.5in'>This function is intended for low-level I/O and
must be applied to a file descriptor as returned by <tt><span style='font-size:
10.0pt'>open()</span></tt> or <tt><span style='font-size:10.0pt'>pipe()</span></tt>.
To write a file object returned by the built-in function <tt><span
style='font-size:10.0pt'>open()</span></tt> or by <tt><span style='font-size:
10.0pt'>popen()</span></tt>, <tt><span style='font-size:10.0pt'>fdopen()</span></tt>,
<tt><span style='font-size:10.0pt'>sys.stdout</span></tt>, or <tt><span
style='font-size:10.0pt'>sys.stderr</span></tt>, use its <tt><span
style='font-size:10.0pt'>write()</span></tt> method.</p>

<p style='margin-left:.5in'>The following data items are available for
constructing the flags parameter to the <tt><span style='font-size:10.0pt'>open()</span></tt>
function:</p>

<p class=MsoNormal><tt><span style='font-size:10.0pt'>O_RDONLY</span></tt><span
style='font-family:Arial'> </span></p>

<p class=MsoNormal><tt><span style='font-size:10.0pt'>O_WRONLY</span></tt><span
style='font-family:Arial'> </span></p>

<p class=MsoNormal><tt><span style='font-size:10.0pt'>O_RDWR</span></tt><span
style='font-family:Arial'> </span></p>

<p class=MsoNormal><tt><span style='font-size:10.0pt'>O_NDELAY</span></tt><span
style='font-family:Arial'> </span></p>

<p class=MsoNormal><tt><span style='font-size:10.0pt'>O_NONBLOCK</span></tt><span
style='font-family:Arial'> </span></p>

<p class=MsoNormal><tt><span style='font-size:10.0pt'>O_APPEND</span></tt><span
style='font-family:Arial'> </span></p>

<p class=MsoNormal><tt><span style='font-size:10.0pt'>O_DSYNC</span></tt><span
style='font-family:Arial'> </span></p>

<p class=MsoNormal><tt><span style='font-size:10.0pt'>O_RSYNC</span></tt><span
style='font-family:Arial'> </span></p>

<p class=MsoNormal><tt><span style='font-size:10.0pt'>O_SYNC</span></tt><span
style='font-family:Arial'> </span></p>

<p class=MsoNormal><tt><span style='font-size:10.0pt'>O_NOCTTY</span></tt><span
style='font-family:Arial'> </span></p>

<p class=MsoNormal><tt><span style='font-size:10.0pt'>O_CREAT</span></tt><span
style='font-family:Arial'> </span></p>

<p class=MsoNormal><tt><span style='font-size:10.0pt'>O_EXCL</span></tt><span
style='font-family:Arial'> </span></p>

<p class=MsoNormal><tt><span style='font-size:10.0pt'>O_TRUNC</span></tt><span
style='font-family:Arial'> </span></p>

<p>These can be bitwise ORâd together. Availability: Macintosh, Unix, Windows.</p>

<h4>A.6.4 Files and Directories </h4>

<p>These functions operate on files and directories.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>access</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>path,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>mode</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>Checks read/write/execute permissions for this
process or file <tt><i><span style='font-size:10.0pt'>path</span></i></tt>.
Returns 1 if access is granted, if not. See the Unix manual for the semantics.
Availability: Unix.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>chmod</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>path,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>mode</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>Changes the mode of <tt><i><span style='font-size:
10.0pt'>path</span></i></tt> to the numeric <tt><span style='font-size:10.0pt'>mode</span></tt>.
Availability: Unix, Windows.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>chown</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>path,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>uid,</span></i></tt><span style='font-family:Arial;
color:#990000'> </span><tt><i><span style='font-size:10.0pt;color:#990000'>gid</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Changes the owner and group ID of <tt><i><span
style='font-size:10.0pt'>path</span></i></tt> to the numeric <tt><i><span
style='font-size:10.0pt'>uid</span></i></tt> and <tt><i><span style='font-size:
10.0pt'>gid</span></i></tt>. Availability: Unix.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>link</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>src,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>dst</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>Creates a hard link pointing to <tt><i><span
style='font-size:10.0pt'>src</span></i></tt> named <tt><i><span
style='font-size:10.0pt'>dst</span></i></tt>. Availability: Unix.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>listdir</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>path</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Returns a list containing the names of the entries in
the directory. The list is in arbitrary order. It doesnât include the special
entries â<tt><span style='font-size:10.0pt'>.</span></tt>â and â<tt><span
style='font-size:10.0pt'>..</span></tt>â even if they are present in the
directory. Availability: Macintosh, Unix, Windows.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>lstat</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>path</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Like <tt><span style='font-size:10.0pt'>stat()</span></tt>,
but doesnât follow symbolic links. Availability: Unix.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>mkfifo</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>path[,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>mode]</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>Creates a FIFO (a named pipe) named <tt><i><span
style='font-size:10.0pt'>path</span></i></tt> with numeric mode <tt><i><span
style='font-size:10.0pt'>mode</span></i></tt>. The default mode is 0666
(octal). The current <tt><span style='font-size:10.0pt'>umask</span></tt> value
is first masked out from the mode. Availability: Unix.</p>

<p style='margin-left:.5in'>FIFOs are pipes that can be accessed like regular
files. FIFOs exist until they are deleted (for example with <tt><span
style='font-size:10.0pt'>os.unlink()</span></tt>). Generally, FIFOs are used as
rendezvous between client and server type processes: the server opens the FIFO
for reading, and the client opens it for writing. Note that <tt><span
style='font-size:10.0pt'>mkfifo()</span></tt> doesnât open the FIFO, it just
creates the rendezvous point.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>mkdir</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>path[,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>mode]</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>Creates a directory named <tt><i><span
style='font-size:10.0pt'>path</span></i></tt> with numeric mode <tt><i><span
style='font-size:10.0pt'>mode</span></i></tt>. The default mode is 0777
(octal). On some systems, mode is ignored. Where itâs used, the current <tt><span
style='font-size:10.0pt'>umask</span></tt> value is first masked out.
Availability: Macintosh, Unix, Windows.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>makedirs</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>path[,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>mode]</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>Recursive directory creation function. Like <tt><span
style='font-size:10.0pt'>mkdir()</span></tt>, but makes all intermediate-level
directories needed to contain the leaf directory. Throws an error exception if
the leaf directory already exists or canât be created. The default mode is 0777
(octal). New in version 1.5.2.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>readlink</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>path</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Returns a string representing the path to which the
symbolic link points. Availability: Unix.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>remove</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>path</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Removes the file <tt><i><span style='font-size:
10.0pt'>path</span></i></tt>. See the entry for <tt><span style='font-size:
10.0pt'>rmdir()</span></tt> to remove a directory. This is identical to the <tt><span
style='font-size:10.0pt'>unlink()</span></tt> function, documented later.
Availability: Macintosh, Unix, Windows.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>removedirs</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>path</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Recursive directory removal function. Works like <tt><span
style='font-size:10.0pt'>rmdir()</span></tt> except that, if the leaf directory
is successfully removed, directories corresponding to rightmost path segments
are pruned until either the whole path is consumed or an error is raised (which
is ignored, because it generally means that a parent directory isnât empty).
Throws an error exception if the leaf directory canât be successfully removed.
New in Version 1.5.2.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>rename</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>src,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>dst</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>Renames the file or directory <tt><i><span
style='font-size:10.0pt'>src</span></i></tt> to <tt><i><span style='font-size:
10.0pt'>dst</span></i></tt>. Availability: Macintosh, Unix, Windows.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>renames</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>old,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>new</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>Recursive directory or file renaming function.
Works like <tt><span style='font-size:10.0pt'>rename()</span></tt>, except that
the creation of any intermediate directories needed to make the new pathname
good is attempted first. After the rename, directories corresponding to
rightmost path segments of the old name are removed using <tt><span
style='font-size:10.0pt'>removedirs()</span></tt>.</p>

<p style='margin-left:.5in'>This function can fail after the new directory
structure is created if you lack permissions needed to remove the leaf
directory or file. New in Version 1.5.2.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>rmdir</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>path</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Removes the directory <tt><i><span
style='font-size:10.0pt'>path</span></i></tt>. Availability: Macintosh, Unix,
Windows.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>stat</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>path</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Performs a <tt><span style='font-size:10.0pt'>stat()</span></tt>
system call on the given path. The return value is a tuple of at least 10
integers giving the most important (and portable) members of the <tt><span
style='font-size:10.0pt'>stat</span></tt> structure, in the order <tt><span
style='font-size:10.0pt'>st_mode,</span></tt> <tt><span style='font-size:10.0pt'>st_ino,</span></tt>
<tt><span style='font-size:10.0pt'>st_dev,</span></tt> <tt><span
style='font-size:10.0pt'>st_nlink,</span></tt> <tt><span style='font-size:10.0pt'>st_uid,</span></tt>
<tt><span style='font-size:10.0pt'>st_gid,</span></tt> <tt><span
style='font-size:10.0pt'>st_size,</span></tt> <tt><span style='font-size:10.0pt'>st_atime,</span></tt>
<tt><span style='font-size:10.0pt'>st_mtime,</span></tt> <tt><span
style='font-size:10.0pt'>st_ctime</span></tt>. More items may be added at the
end by some implementations. (On MS Windows, some items are filled with dummy
values.) Availability: Macintosh, Unix, Windows.</p>

<p style='margin-left:.5in'>The standard module <tt><span style='font-size:
10.0pt'>stat</span></tt> defines functions and constants that are useful for
extracting information from a <tt><span style='font-size:10.0pt'>stat</span></tt>
structure.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>statvfs</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>path</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Performs a <tt><span style='font-size:10.0pt'>statvfs()</span></tt>
system call on the given path. The return value is a tuple of 10 integers giving
the most common members of the <tt><span style='font-size:10.0pt'>statvfs</span></tt>
structure, in the order <tt><span style='font-size:10.0pt'>f_bsize,</span></tt>
<tt><span style='font-size:10.0pt'>f_frsize,</span></tt> <tt><span
style='font-size:10.0pt'>f_blocks,</span></tt> <tt><span style='font-size:10.0pt'>f_bfree,</span></tt>
<tt><span style='font-size:10.0pt'>f_bavail,</span></tt> <tt><span
style='font-size:10.0pt'>f_files,</span></tt> <tt><span style='font-size:10.0pt'>f_ffree,</span></tt>
<tt><span style='font-size:10.0pt'>f_favail,</span></tt> <tt><span
style='font-size:10.0pt'>f_flag,</span></tt> <tt><span style='font-size:10.0pt'>f_namemax</span></tt>.
Availability: Unix.</p>

<p style='margin-left:.5in'>The standard module <tt><span style='font-size:
10.0pt'>statvfs</span></tt> defines constants that are useful for extracting
information from a <tt><span style='font-size:10.0pt'>statvfs</span></tt>
structure.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>symlink</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>src,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>dst</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>Creates a symbolic link pointing to <tt><i><span
style='font-size:10.0pt'>src</span></i></tt> named <tt><i><span
style='font-size:10.0pt'>dst</span></i></tt>. Availability: Unix.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>unlink</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>path</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Removes the file path. This is the same function as
<tt><span style='font-size:10.0pt'>remove()</span></tt>; the <tt><span
style='font-size:10.0pt'>unlink()</span></tt> name is its traditional Unix
name. Availability: Macintosh, Unix, Windows.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>utime</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>path,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>(atime,</span></i></tt><span style='font-family:Arial;
color:#990000'> </span><tt><i><span style='font-size:10.0pt;color:#990000'>mtime)</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Sets the access and modified time of the file to
the given values. (The second argument is a tuple of two items.) Availability:
Macintosh, Unix, Windows. </p>

<h4>A.6.5 Process Management </h4>

<p>These functions can create and manage additional processes:</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>execl</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>path,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>arg0,</span></i></tt><span style='font-family:Arial;
color:#990000'> </span><tt><i><span style='font-size:10.0pt;color:#990000'>arg1,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>...</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>This is quivalent to <tt><span style='font-size:
10.0pt'>execv(<i>path,</i></span></tt> <tt><i><span style='font-size:10.0pt'>(arg0,</span></i></tt>
<tt><i><span style='font-size:10.0pt'>arg1,</span></i></tt> <tt><i><span
style='font-size:10.0pt'>...)</span></i></tt><tt><span style='font-size:10.0pt'>)</span></tt>.
Availability: Unix, Windows.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>execle</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>path,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>arg0,</span></i></tt><span style='font-family:Arial;
color:#990000'> </span><tt><i><span style='font-size:10.0pt;color:#990000'>arg1,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>...,</span></i></tt><span style='font-family:Arial;
color:#990000'> </span><tt><i><span style='font-size:10.0pt;color:#990000'>env</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>This is equivalent to <tt><span style='font-size:
10.0pt'>execve(<i>path,</i></span></tt> <tt><i><span style='font-size:10.0pt'>(arg0,</span></i></tt>
<tt><i><span style='font-size:10.0pt'>arg1,</span></i></tt> <tt><i><span
style='font-size:10.0pt'>...),</span></i></tt> <tt><i><span style='font-size:
10.0pt'>env</span></i></tt><tt><span style='font-size:10.0pt'>)</span></tt>.
Availability: Unix, Windows.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>execlp</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>path,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>arg0,</span></i></tt><span style='font-family:Arial;
color:#990000'> </span><tt><i><span style='font-size:10.0pt;color:#990000'>arg1,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>...</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>This is equivalent to <tt><span style='font-size:
10.0pt'>execvp(<i>path,</i></span></tt> <tt><i><span style='font-size:10.0pt'>(arg0,</span></i></tt>
<tt><i><span style='font-size:10.0pt'>arg1,</span></i></tt> <tt><i><span
style='font-size:10.0pt'>...)</span></i></tt><tt><span style='font-size:10.0pt'>)</span></tt>.
Availability: Unix, Windows.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>execv</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>path,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>args</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>Executes the executable <tt><i><span
style='font-size:10.0pt'>path</span></i></tt> with argument list <tt><i><span
style='font-size:10.0pt'>args</span></i></tt>, replacing the current process
(i.e., the Python interpreter). The argument list may be a tuple or list of
strings. Availability: Unix, Windows.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>execve</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>path,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>args,</span></i></tt><span style='font-family:Arial;
color:#990000'> </span><tt><i><span style='font-size:10.0pt;color:#990000'>env</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Executes the executable <tt><i><span
style='font-size:10.0pt'>path</span></i></tt> with argument list <tt><i><span
style='font-size:10.0pt'>args</span></i></tt>, and environment <tt><i><span
style='font-size:10.0pt'>env</span></i></tt>, replacing the current process
(i.e., the Python interpreter). The argument list may be a tuple or list of
strings. The environment must be a dictionary mapping strings to strings.
Availability: Unix, Windows.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>execvp</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>path,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>args</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>Like <tt><span style='font-size:10.0pt'>execv(<i>path,</i></span></tt>
<tt><i><span style='font-size:10.0pt'>args</span></i></tt><tt><span
style='font-size:10.0pt'>)</span></tt> but duplicates the shellâs actions in
searching for an executable file in a list of directories. The directory list
is obtained from <tt><span style='font-size:10.0pt'>environ['PATH']</span></tt>.
Availability: Unix, Windows.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>execvpe</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>path,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>args,</span></i></tt><span style='font-family:Arial;
color:#990000'> </span><tt><i><span style='font-size:10.0pt;color:#990000'>env</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>A cross between <tt><span style='font-size:10.0pt'>execve()</span></tt>
and <tt><span style='font-size:10.0pt'>execvp()</span></tt>. The directory list
is obtained from <tt><span style='font-size:10.0pt'>env['PATH']</span></tt>.
Availability: Unix, Windows.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>_exit</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>n</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>Exits to the system with status <tt><i><span
style='font-size:10.0pt'>n</span></i></tt>, without calling cleanup handlers,
flushing stdio buffers, etc. Availability: Unix, Windows.</p>

<p style='margin-left:.5in'>The standard way to exit is <tt><span
style='font-size:10.0pt'>sys.exit(<i>n</i>)</span></tt>. _<tt><span
style='font-size:10.0pt'>exit()</span></tt> should normally be used only in the
child process after a <tt><span style='font-size:10.0pt'>fork()</span></tt>.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>fork</span></span><span
style='font-family:Arial;color:#990000'> (</span><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
</span></p>

<p style='margin-left:.5in'>Forks a child process. Returns in the child, the
childâs process ID in the parent. Availability: Unix.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>kill</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>pid,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>sig</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>Kills the process <tt><i><span style='font-size:
10.0pt'>pid</span></i></tt> with signal <tt><i><span style='font-size:10.0pt'>sig</span></i></tt>.
Availability: Unix.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>nice</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>increment</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Adds increment to the processâs âniceness.â Returns
the new niceness. Availability: Unix.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>plock</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>op</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>Locks program segments into memory. The value of <tt><i><span
style='font-size:10.0pt'>op</span></i></tt> (defined in <tt><span
style='font-size:10.0pt'>&lt;sys/lock.h&gt;</span></tt>) determines which
segments are locked. Availability: Unix.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>spawnv</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>mode,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>path,</span></i></tt><span style='font-family:Arial;
color:#990000'> </span><tt><i><span style='font-size:10.0pt;color:#990000'>args</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Executes the program <tt><i><span style='font-size:
10.0pt'>path</span></i></tt> in a new process, passing the arguments specified
in <tt><i><span style='font-size:10.0pt'>args</span></i></tt> as command-line
parameters. <tt><i><span style='font-size:10.0pt'>args</span></i></tt> may be a
list or a tuple. <tt><i><span style='font-size:10.0pt'>mode</span></i></tt> is
a magic operational constant. See the Visual C++ runtime library documentation
for further information. Availability: Windows. New in Version 1.5.2.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>spawnve</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>mode,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>path,</span></i></tt><span style='font-family:Arial;
color:#990000'> </span><tt><i><span style='font-size:10.0pt;color:#990000'>args,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>env</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>Executes the program <tt><i><span style='font-size:
10.0pt'>path</span></i></tt> in a new process, passing the arguments specified
in <tt><i><span style='font-size:10.0pt'>args</span></i></tt> as command-line
parameters and the contents of the mapping <tt><i><span style='font-size:10.0pt'>env</span></i></tt>
as the environment. <tt><i><span style='font-size:10.0pt'>args</span></i></tt>
may be a list or a tuple. <tt><i><span style='font-size:10.0pt'>mode</span></i></tt>
is a magic operational constant. See the Visual C++ runtime library
documentation for further information. Availability: Windows. New in Version
1.5.2.</p>

<p class=MsoNormal style='margin-left:.5in'><tt><span style='font-size:10.0pt'>P_WAIT</span></tt><span
style='font-family:Arial'> </span></p>

<p class=MsoNormal style='margin-left:.5in'><tt><span style='font-size:10.0pt'>P_NOWAIT</span></tt><span
style='font-family:Arial'> </span></p>

<p class=MsoNormal style='margin-left:.5in'><tt><span style='font-size:10.0pt'>P_NOWAITO</span></tt><span
style='font-family:Arial'> </span></p>

<p class=MsoNormal style='margin-left:.5in'><tt><span style='font-size:10.0pt'>P_OVERLAY</span></tt><span
style='font-family:Arial'> </span></p>

<p class=MsoNormal style='margin-left:.5in'><tt><span style='font-size:10.0pt'>P_DETACH</span></tt><span
style='font-family:Arial'> </span></p>

<p style='margin-left:.5in'>Possible values for the mode parameter to <tt><span
style='font-size:10.0pt'>spawnv()</span></tt> and <tt><span style='font-size:
10.0pt'>spawnve()</span></tt>. Availability: Windows. New in Version 1.5.2.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>system</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>command</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Executes the <tt><i><span style='font-size:10.0pt'>command</span></i></tt>
(a string) in a subshell. This is implemented by calling the standard C
function <tt><span style='font-size:10.0pt'>system()</span></tt> and has the
same limitations. Changes to <tt><span style='font-size:10.0pt'>posix.environ</span></tt>,
<tt><span style='font-size:10.0pt'>sys.stdin</span></tt>, etc., arenât
reflected in the environment of the executed command. The return value is the
exit status of the process encoded in the format specified for <tt><span
style='font-size:10.0pt'>wait()</span></tt>. Availability: Unix, Windows.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>times</span></span><span
style='font-family:Arial;color:#990000'> (</span><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
</span></p>

<p style='margin-left:.5in'>Returns a five-tuple of floating-point numbers
indicating accumulated (CPU or other) times, in seconds. The items are: user
time, system time, childrenâs user time, childrenâs system time, and elapsed
real time since a fixed point in the past, in that order. See the Unix manpage <tt><span
style='font-size:10.0pt'>times(2)</span></tt> or the corresponding Windows
Platform API documentation. Availability: Unix, Windows.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>wait</span></span><span
style='font-family:Arial;color:#990000'> (</span><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
</span></p>

<p style='margin-left:.5in'>Waits for completion of a child process and returns
a tuple containing its process ID and exit status indication: a 16-bit number,
whose low byte is the signal number that killed the process and whose high byte
is the exit status (if the signal number is zero); the high bit of the low byte
is set if a core file was produced. Availability: Unix.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>waitpid</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>pid</span></i></tt><span
class=monofont1><span style='color:#990000'>,</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>options</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Waits for completion of a child process given by
process ID and returns a tuple containing its process ID and exit status
indication (encoded as for <tt><span style='font-size:10.0pt'>wait()</span></tt>).
The semantics of the call are affected by the value of the integer options,
which should be for normal operation. Availability: Unix.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>WNOHANG</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>The option for <tt><span style='font-size:10.0pt'>waitpid()</span></tt>
to avoid hanging if no child process status is available immediately.
Availability: Unix.</p>

<p>The following functions take a process status code as returned by <tt><span
style='font-size:10.0pt'>waitpid()</span></tt> as a parameter. They can
determine the disposition of a process.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>WIFSTOPPED</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>status</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Returns <tt><span style='font-size:10.0pt'>true</span></tt>
if the process has been stopped. Availability: Unix.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>WIFSIGNALED</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>status</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Returns <tt><span style='font-size:10.0pt'>true</span></tt>
if the process exited due to a signal. Availability: Unix.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>WIFEXITED</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>status</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Returns <tt><span style='font-size:10.0pt'>true</span></tt>
if the process exited using the <tt><span style='font-size:10.0pt'>exit(2)</span></tt>
system call. Availability: Unix.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>WEXITSTATUS</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>status</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>If <tt><span style='font-size:10.0pt'>WIFEXITED(<i>status</i>)</span></tt>
is <tt><span style='font-size:10.0pt'>true</span></tt>, returns the integer
parameter to the <tt><span style='font-size:10.0pt'>exit(2)</span></tt> system
call. Otherwise, the return value is meaningless. Availability: Unix.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>WSTOPSIG</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>status</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Returns the signal that caused the process to stop.
Availability: Unix.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>WTERMSIG</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>status</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Returns the signal that caused the process to exit.
Availability: Unix.</p>

<h4>A.6.6 Miscellaneous System Data </h4>

<p>The follow data values can support path-manipulation operations. These are
defined for all platforms. Higher-level operations on pathnames are defined in
the <tt><span style='font-size:10.0pt'>os.path</span></tt> module.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>curdir</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>The constant string used by the OS to refer to the
current directory, e.g., â.â for POSIX or â:â for the Macintosh.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>pardir</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>The constant string used by the OS to refer to the
parent directory, e.g., â..â for POSIX or â::â for the Macintosh.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>sep</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>The character used by the OS to separate pathname
components, e.g., â/â for POSIX or â:â for the Macintosh. This character isnât
sufficient to parse or concatenate pathnames (use <tt><span style='font-size:
10.0pt'>os.path.split()</span></tt> and <tt><span style='font-size:10.0pt'>os.path.join()</span></tt>)
but itâs occasionally useful.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>altsep</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>An alternative character used by the OS to separate
pathname components or <tt><span style='font-size:10.0pt'>None</span></tt> if
only one separator character exists. This is set to â/ â on DOS and Windows
systems where <tt><span style='font-size:10.0pt'>sep</span></tt> is a
backslash.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>pathsep</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>The character conventionally used by the OS to
separate search patch components (as in $PATH), e.g., â:â for POSIX or â;â for
DOS and Windows.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>defpath</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>The default search path used by <tt><span
style='font-size:10.0pt'>exec*p*()</span></tt> if the environment doesnât have
a <tt><span style='font-size:10.0pt'>'PATH'</span></tt> key.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>linesep</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>The string that separates (or, rather, terminates) lines
on the current platform. This may be a single character, e.g., <tt><span
style='font-size:10.0pt'>\n</span></tt> for POSIX or <tt><span
style='font-size:10.0pt'>\r</span></tt> for MacOS, or multiple characters,
e.g., <tt><span style='font-size:10.0pt'>\r\n</span></tt> for MS-DOS and MS
Windows.</p>

<h4>A.6.7 module os.path: Common Pathname Manipulations </h4>

<p>This module implements some useful functions on pathnames:</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>abspath</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>path</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Returns a normalized, absolute version of the
pathname <tt><i><span style='font-size:10.0pt'>path</span></i></tt>. On most
platforms, this is equivalent to <tt><span style='font-size:10.0pt'>normpath(join(os.getcwd()),</span></tt>
<tt><i><span style='font-size:10.0pt'>path</span></i></tt><tt><span
style='font-size:10.0pt'>)</span></tt>. New in Version 1.5.2.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>basename</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>path</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Returns the base name of pathname <tt><i><span
style='font-size:10.0pt'>path</span></i></tt>. This is the second half of the
pair returned by <tt><span style='font-size:10.0pt'>split(<i>path</i>)</span></tt>.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>commonprefix</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>list</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Returns the longest string that is a prefix of all
strings in <tt><i><span style='font-size:10.0pt'>list</span></i></tt>. If <tt><i><span
style='font-size:10.0pt'>list</span></i></tt> is empty, returns the empty
string <tt><span style='font-size:10.0pt'>(' ')</span></tt>.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>dirname</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>path</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Returns the directory name of pathname <tt><i><span
style='font-size:10.0pt'>path</span></i></tt>. This is the first half of the
pair returned by <tt><span style='font-size:10.0pt'>split(<i>path</i>)</span></tt>.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>exists</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>path</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Returns <tt><span style='font-size:10.0pt'>true</span></tt>
if <tt><i><span style='font-size:10.0pt'>path</span></i></tt> refers to an
existing path.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>expanduser</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>path</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Returns the argument with an initial component of â<tt><span
style='font-size:10.0pt'>~</span></tt>â or â<tt><span style='font-size:10.0pt'>~user</span></tt>â
replaced by that userâs home directory. An initial â~â is replaced by the
environment variable $HOME; an initial â<tt><span style='font-size:10.0pt'>~user</span></tt>â
is looked up in the password directory through the built-in module <tt><span
style='font-size:10.0pt'>pwd</span></tt>. If the expansion fails, or if the
path doesnât begin with a tilde, the path is returned unchanged. On the
Macintosh, this always returns <tt><i><span style='font-size:10.0pt'>path</span></i></tt>
unchanged.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>expandvars</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>path</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Returns the argument with environment variables
expanded. Substrings of the form <tt><span style='font-size:10.0pt'>$name</span></tt>
or <tt><span style='font-size:10.0pt'>${name}</span></tt> are replaced by the value
of environment variable name. Malformed variable names and references to
nonexisting variables are left unchanged. On the Macintosh, this always returns
<tt><i><span style='font-size:10.0pt'>path</span></i></tt> unchanged.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>getatime</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>path</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Returns the time of last access of a filename
identified by <tt><i><span style='font-size:10.0pt'>path</span></i></tt>. The
return value is an integer giving the number of seconds since the epoch (see
the <tt><span style='font-size:10.0pt'>time</span></tt> module). Raise <tt><span
style='font-size:10.0pt'>os.error</span></tt> if the file doesnât exist or is
inaccessible. New in Version 1.5.2.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>getmtime</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>path</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Returns the time of last modification of a filename
identified by <tt><i><span style='font-size:10.0pt'>path</span></i></tt>. The
return value is an integer giving the number of seconds since the epoch (see
the <tt><span style='font-size:10.0pt'>time</span></tt> module). Raise <tt><span
style='font-size:10.0pt'>os.error</span></tt> if the file doesnât exist or is
inaccessible. New in Version 1.5.2.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>getsize</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>path</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Returns the size, in bytes, of filename identified
by <tt><i><span style='font-size:10.0pt'>path</span></i></tt>. Raise <tt><span
style='font-size:10.0pt'>os.error</span></tt> if the file doesnât exist or is
inaccessible. New in Version 1.5.2.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>isabs</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>path</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Returns <tt><span style='font-size:10.0pt'>true</span></tt>
if <tt><i><span style='font-size:10.0pt'>path</span></i></tt> is an absolute
pathname (begins with a slash).</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>isfile</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>path</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Returns <tt><span style='font-size:10.0pt'>true</span></tt>
if <tt><i><span style='font-size:10.0pt'>path</span></i></tt> is an existing regular
file. This follows symbolic links, so both <tt><span style='font-size:10.0pt'>islink()</span></tt>
and <tt><span style='font-size:10.0pt'>isfile()</span></tt> can be <tt><span
style='font-size:10.0pt'>true</span></tt> for the same path.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>isdir</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>path</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Returns <tt><span style='font-size:10.0pt'>true</span></tt>
if <tt><i><span style='font-size:10.0pt'>path</span></i></tt> is an existing
directory. This follows symbolic links, so both <tt><span style='font-size:
10.0pt'>islink()</span></tt> and <tt><span style='font-size:10.0pt'>isdir()</span></tt>
can be <tt><span style='font-size:10.0pt'>true</span></tt> for the same path.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>islink</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>path</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Returns <tt><span style='font-size:10.0pt'>true</span></tt>
if <tt><i><span style='font-size:10.0pt'>path</span></i></tt> refers to a
directory entry thatâs a symbolic link. Always <tt><span style='font-size:10.0pt'>false</span></tt>
if symbolic links arenât supported.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>ismount</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>path</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Returns <tt><span style='font-size:10.0pt'>true</span></tt>
if pathname <tt><i><span style='font-size:10.0pt'>path</span></i></tt> is a mount
point: a point in a filesystem where a different filesystem has been mounted.
The function checks whether <tt><i><span style='font-size:10.0pt'>path</span></i></tt>
âs parent, <tt><span style='font-size:10.0pt'>path/..</span></tt>, is on a
different device than <tt><i><span style='font-size:10.0pt'>path</span></i></tt>,
or whether <tt><i><span style='font-size:10.0pt'>path</span></i></tt><tt><span
style='font-size:10.0pt'>/..</span></tt> and <tt><i><span style='font-size:
10.0pt'>path</span></i></tt> point to the same i-node on the same device; this
detects mount points for all Unix and POSIX variants.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>join</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>path1[,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>path2[,</span></i></tt><span style='font-family:Arial;
color:#990000'> </span><tt><i><span style='font-size:10.0pt;color:#990000'>...]]</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Joins one or more <tt><i><span style='font-size:
10.0pt'>path</span></i></tt> components intelligently. If any component is an
absolute path, all previous components are thrown away, and joining continues.
The return value is the concatenation of <tt><i><span style='font-size:10.0pt'>path1</span></i></tt>,
and optionally <tt><i><span style='font-size:10.0pt'>path2</span></i></tt>,
etc., with exactly one slash (<tt><span style='font-size:10.0pt'>/</span></tt>)
inserted between components, unless <tt><i><span style='font-size:10.0pt'>path</span></i></tt>
is empty.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>normcase</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>path</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Normalizes the case of a pathname. On Unix, this
returns the path unchanged; on case-insensitive filesystems, it converts the
path to lowercase. On Windows, it also converts forward slashes to backward
slashes.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>normpath</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>path</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Normalizes a pathname. This collapses redundant
separators and up-level references, e.g., <tt><span style='font-size:10.0pt'>A//B</span></tt>,
<tt><span style='font-size:10.0pt'>A/./B</span></tt> and <tt><span
style='font-size:10.0pt'>A/foo/../B</span></tt> all become <tt><span
style='font-size:10.0pt'>A/B</span></tt>. It doesnât normalize the case (use <tt><span
style='font-size:10.0pt'>normcase()</span></tt> for that). On Windows, it
converts forward slashes to backward slashes.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>samefile</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>path1,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>path2</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>Returns <tt><span style='font-size:10.0pt'>true</span></tt>
if both pathname arguments refer to the same file or directory (as indicated by
device number and i-node number). It raises an exception if an <tt><span
style='font-size:10.0pt'>os.stat()</span></tt> call on either pathname fails.
Availability: Macintosh, Unix.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>sameopenfile</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>fp1,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>fp2</span></i></tt><span class=monofont1><span
style='color:#990000'>)</span></span><span style='font-family:Arial;color:#990000'>
&nbsp; </span></p>

<p style='margin-left:.5in'>Returns <tt><span style='font-size:10.0pt'>true</span></tt>
if the file objects <tt><i><span style='font-size:10.0pt'>fp1</span></i></tt>
and <tt><i><span style='font-size:10.0pt'>fp2</span></i></tt> refer to the same
file. The two file objects may represent different file descriptors.
Availability: Macintosh, Unix.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>samestat</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>stat1</span></i></tt><span
class=monofont1><span style='color:#990000'>,</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>stat2</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Returns <tt><span style='font-size:10.0pt'>true</span></tt>
if the <tt><i><span style='font-size:10.0pt'>stat</span></i></tt> tuples <tt><i><span
style='font-size:10.0pt'>stat1</span></i></tt> and <tt><i><span
style='font-size:10.0pt'>stat2</span></i></tt> refer to the same file. These
structures may have been returned by <tt><span style='font-size:10.0pt'>fstat()</span></tt>,
<tt><span style='font-size:10.0pt'>lstat()</span></tt>, or <tt><span
style='font-size:10.0pt'>stat()</span></tt>. This function implements the
underlying comparison used by <tt><span style='font-size:10.0pt'>samefile()</span></tt>
and <tt><span style='font-size:10.0pt'>sameopenfile()</span></tt>.
Availability: Macintosh, Unix.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>split</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>path</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Splits the pathname <tt><i><span style='font-size:
10.0pt'>path</span></i></tt> into a pair, <tt><i><span style='font-size:10.0pt'>(head,</span></i></tt>
<tt><i><span style='font-size:10.0pt'>tail)</span></i></tt> where <tt><i><span
style='font-size:10.0pt'>tail</span></i></tt> is the last pathname component,
and <tt><i><span style='font-size:10.0pt'>head</span></i></tt> is everything
leading up to that. The <tt><i><span style='font-size:10.0pt'>tail</span></i></tt>
part never contains a slash; if <tt><i><span style='font-size:10.0pt'>path</span></i></tt>
ends in a slash, <tt><i><span style='font-size:10.0pt'>tail</span></i></tt> is
empty. If there is no slash in <tt><i><span style='font-size:10.0pt'>path</span></i></tt>,
<tt><i><span style='font-size:10.0pt'>head</span></i></tt> is empty. If <tt><i><span
style='font-size:10.0pt'>path</span></i></tt> is empty, both <tt><i><span
style='font-size:10.0pt'>head</span></i></tt> and <tt><i><span
style='font-size:10.0pt'>tail</span></i></tt> are empty. Trailing slashes are
stripped from <tt><i><span style='font-size:10.0pt'>head</span></i></tt> unless
itâs the root (one or more slashes only). In nearly all cases, <tt><span
style='font-size:10.0pt'>join(<i>head,</i></span></tt> <tt><i><span
style='font-size:10.0pt'>tail</span></i></tt><tt><span style='font-size:10.0pt'>)</span></tt>
equals <tt><i><span style='font-size:10.0pt'>path</span></i></tt> (the only
exception being when there were multiple slashes separating <tt><i><span
style='font-size:10.0pt'>head</span></i></tt> from <tt><i><span
style='font-size:10.0pt'>tail</span></i></tt>).</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>splitdrive</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>path</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Splits the pathname path into a pair <tt><i><span
style='font-size:10.0pt'>(drive,</span></i></tt> <tt><i><span style='font-size:
10.0pt'>tail)</span></i></tt> where <tt><i><span style='font-size:10.0pt'>drive</span></i></tt>
is either a drive specification or the empty string. On systems that donât use
drive specifications, <tt><i><span style='font-size:10.0pt'>drive</span></i></tt>
is always the empty string. In all cases, <tt><i><span style='font-size:10.0pt'>drive</span></i></tt>
<tt><i><span style='font-size:10.0pt'>+</span></i></tt> <tt><i><span
style='font-size:10.0pt'>tail</span></i></tt> is the same as <tt><i><span
style='font-size:10.0pt'>path</span></i></tt>.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>splitext</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>path</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Splits the pathname path into a pair <tt><i><span
style='font-size:10.0pt'>(root,</span></i></tt> <tt><i><span style='font-size:
10.0pt'>ext)</span></i></tt> such that <tt><i><span style='font-size:10.0pt'>root</span></i></tt>
<tt><span style='font-size:10.0pt'>+</span></tt> <tt><i><span style='font-size:
10.0pt'>ext</span></i></tt> <tt><span style='font-size:10.0pt'>==</span></tt> <tt><i><span
style='font-size:10.0pt'>path </span></i></tt>, and <tt><i><span
style='font-size:10.0pt'>ext</span></i></tt> is empty or begins with a period
and contains at most one period.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>walk</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; (</span><tt><i><span
style='font-size:10.0pt;color:#990000'>path,</span></i></tt><span
style='font-family:Arial;color:#990000'> </span><tt><i><span style='font-size:
10.0pt;color:#990000'>visit,</span></i></tt><span style='font-family:Arial;
color:#990000'> </span><tt><i><span style='font-size:10.0pt;color:#990000'>arg</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>Calls the function <tt><i><span style='font-size:
10.0pt'>visit</span></i></tt> with arguments <tt><i><span style='font-size:
10.0pt'>(arg,</span></i></tt> <tt><i><span style='font-size:10.0pt'>dirname,</span></i></tt>
<tt><i><span style='font-size:10.0pt'>names)</span></i></tt> for each directory
in the directory tree rooted at <tt><i><span style='font-size:10.0pt'>path</span></i></tt>
(including <tt><i><span style='font-size:10.0pt'>path</span></i></tt> itself,
if itâs a directory). The argument <tt><i><span style='font-size:10.0pt'>dirname</span></i></tt>
specifies the visited directory, the argument <tt><i><span style='font-size:
10.0pt'>names</span></i></tt> lists the files in the directory (from <tt><span
style='font-size:10.0pt'>os.listdir(<i>dirname</i>))</span></tt>. The <tt><i><span
style='font-size:10.0pt'>visit</span></i></tt> function may modify <tt><i><span
style='font-size:10.0pt'>names</span></i></tt> to influence the set of
directories visited below <tt><i><span style='font-size:10.0pt'>dirname</span></i></tt>,
e.g., to avoid visiting certain parts of the tree. The object referred to by <tt><i><span
style='font-size:10.0pt'>names</span></i></tt> must be modified in place, using
<tt><span style='font-size:10.0pt'>del</span></tt> or slice assignment .</p>

<p class=MsoFootnoteText><a name="_ftn21"></a><a
href="28.htm#_ftnref21" title=""><span
class=MsoFootnoteReference>[A]</span></a> <span style='font-size:7.5pt'>As a
consequence, the list </span><tt>[1,</tt><span style='font-size:7.5pt'> </span><tt>2</tt><span
style='font-size:7.5pt'>] is considered equal to </span><tt>[1.0,</tt><span
style='font-size:7.5pt'> </span><tt>2.0]</tt><span style='font-size:7.5pt'> and
similar for tuples.</span></p>

<p class=MsoFootnoteText><a name="_ftn22"></a><a
href="28.htm#_ftnref22" title=""><span
class=MsoFootnoteReference>[B]</span></a> <span style='font-size:7.5pt'>They
must have since the parser canât tell the type of the operands.</span></p>

<p class=MsoFootnoteText><a name="_ftn23"></a><a
href="28.htm#_ftnref23" title=""><span
class=MsoFootnoteReference>[C]</span></a> <span style='font-size:7.5pt'>A tuple
object in this case should be a singleton.</span></p>

<p class=MsoFootnoteText><a name="_ftn24"></a><a
href="28.htm#_ftnref24" title=""><span
class=MsoFootnoteReference>[D]</span></a> <span style='font-size:7.5pt'>These
numbers are fairly arbitrary. They are intended to avoid printing endless strings
of meaningless digits without hampering correct use and without having to know
the exact precision of floating-point values on a particular machine.</span></p>

<p class=MsoFootnoteText><a name="_ftn25"></a><a
href="28.htm#_ftnref25" title=""><span
class=MsoFootnoteReference>[E]</span></a> <span style='font-size:7.5pt'>The
advantage of leaving the newline on is that an empty string can be returned to
mean </span><tt>EOF</tt><span style='font-size:7.5pt'> without being ambiguous.
Another advantage is that (in cases where it might matter, e.g., if you want to
make an exact copy of a file while scanning its lines) you can tell whether the
last line of a file ended in a newline or not (yes, this happens!).</span></p>

<p class=MsoFootnoteText><a name="_ftn26"></a><a
href="28.htm#_ftnref26" title=""><span
class=MsoFootnoteReference>[F]</span></a> <span style='font-size:7.5pt'>For
forward-compatibility the new exceptions </span><tt>Exception</tt><span
style='font-size:7.5pt'>, </span><tt>LookupError</tt><span style='font-size:
7.5pt'>, </span><tt>ArithmeticError</tt><span style='font-size:7.5pt'>, </span><tt>EnvironmentError</tt><span
style='font-size:7.5pt'>, and </span><tt>StandardError</tt><span
style='font-size:7.5pt'> are tuples.</span></p>

<p class=MsoFootnoteText><a name="_ftn27"></a><a
href="28.htm#_ftnref27" title=""><span
class=MsoFootnoteReference>[G]</span></a> <span style='font-size:7.5pt'>Itâs
used relatively rarely so it doesnât warrant being made into a statement.</span></p>

<p class=MsoFootnoteText><a name="_ftn28"></a><a
href="28.htm#_ftnref28" title=""><span
class=MsoFootnoteReference>[H]</span></a> <span style='font-size:7.5pt'>This is
ugly: the language definition should require truncation towards zero.</span></p>

<p class=MsoFootnoteText><a name="_ftn29"></a><a
href="28.htm#_ftnref29" title=""><span
class=MsoFootnoteReference>[I]</span></a> <span style='font-size:7.5pt'>Specifying
a buffer size currently has no effect on systems that donât have </span><tt>setvbuf()</tt><span
style='font-size:7.5pt'>. The interface to specify the buffer size is not done
using a method that calls </span><tt>setvbuf()</tt><span style='font-size:7.5pt'>,
because that may dump core when called after any I/O has been performed, and
thereâs no reliable way to determine whether this is the case.</span></p>

<p class=MsoFootnoteText><a name="_ftn30"></a><a
href="28.htm#_ftnref30" title=""><span
class=MsoFootnoteReference>[J]</span></a> <span style='font-size:7.5pt'>In the
current implementation, local variable bindings canât normally be affected this
way, but variables retrieved from other scopes (e.g., modules) can. This may
change.</span></p>

<p class=MsoNormal>&nbsp;</p>

<div align=center>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 width="90%"
 style='width:90.0%;background:#ECECD9;border-collapse:collapse;border:none'>
 <tr>
  <td width="33%" style='width:33.0%;border:inset #111111 1.0pt;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><a href="27.htm"><span style='text-decoration:none'><img
  border=0 width=37 height=34 src="leftarrw.gif"></span></a></p>
  </td>
  <td width="33%" style='width:33.0%;border:inset #111111 1.0pt;border-left:
  none;padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><a href="0.htm"><span
  style='font-size:13.5pt'>Table of Contents</span></a></p>
  </td>
  <td width="34%" style='width:34.0%;border:inset #111111 1.0pt;border-left:
  none;padding:.75pt .75pt .75pt .75pt'>
  <p align=right style='text-align:right'><a href="29.htm"><span
  style='text-decoration:none'><img border=0 width=37 height=34
  src="rightarrw.gif"></span></a></p>
  </td>
 </tr>
</table>

</div>

<p class=MsoNormal>&nbsp;</p>

</div>

</body>

</html>
