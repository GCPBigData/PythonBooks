<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=utf-8">
<meta name=Generator content="Microsoft Word 10 (filtered)">
<title> </title>

<link rel=Stylesheet type="text/css" media=all href="1.css">
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Tahoma;
	panose-1:2 11 6 4 3 5 4 4 2 4;}
@font-face
	{font-family:Verdana;
	panose-1:2 11 6 4 3 5 4 4 2 4;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;}
h1
	{margin-top:1.0in;
	margin-right:0in;
	margin-bottom:.5in;
	margin-left:0in;
	text-align:center;
	page-break-before:always;
	font-size:24.0pt;
	font-weight:bold;}
h2
	{page-break-before:always;
	font-size:18.0pt;
	font-weight:bold;}
h3
	{font-size:13.5pt;
	font-weight:bold;}
h4
	{font-size:12.0pt;
	font-weight:bold;}
h5
	{font-size:10.0pt;
	font-weight:bold;}
p.MsoFootnoteText, li.MsoFootnoteText, div.MsoFootnoteText
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;}
p.MsoTitle, li.MsoTitle, div.MsoTitle
	{font-size:12.0pt;
	font-weight:bold;}
p.MsoBodyText3, li.MsoBodyText3, div.MsoBodyText3
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:0in;
	font-size:8.0pt;}
p.MsoDocumentMap, li.MsoDocumentMap, div.MsoDocumentMap
	{margin:0in;
	margin-bottom:.0001pt;
	background:navy;
	font-size:12.0pt;}
p
	{font-size:12.0pt;}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;}
p.footnote, li.footnote, div.footnote
	{font-size:12.0pt;}
p.monofont, li.monofont, div.monofont
	{font-size:12.0pt;}
p.romanfont, li.romanfont, div.romanfont
	{font-size:12.0pt;}
p.atitle, li.atitle, div.atitle
	{font-size:9.0pt;
	font-weight:bold;}
p.chaptertitle, li.chaptertitle, div.chaptertitle
	{margin-top:0in;
	margin-right:7.5pt;
	margin-bottom:0in;
	margin-left:7.5pt;
	margin-bottom:.0001pt;
	font-size:12.0pt;}
p.sectiontitle, li.sectiontitle, div.sectiontitle
	{margin-top:0in;
	margin-right:15.0pt;
	margin-bottom:0in;
	margin-left:15.0pt;
	margin-bottom:.0001pt;
	font-size:12.0pt;}
p.itable, li.itable, div.itable
	{font-size:12.0pt;}
p.tiny, li.tiny, div.tiny
	{font-size:7.0pt;}
p.multiselect, li.multiselect, div.multiselect
	{font-size:7.5pt;}
p.safnavoff, li.safnavoff, div.safnavoff
	{font-size:8.5pt;}
p.safnavon, li.safnavon, div.safnavon
	{font-size:8.5pt;
	font-weight:bold;}
p.navtopbg, li.navtopbg, div.navtopbg
	{background:#990000;
	font-size:12.0pt;}
p.navleftbg, li.navleftbg, div.navleftbg
	{background:#666666;
	font-size:12.0pt;}
p.navleftbgalt, li.navleftbgalt, div.navleftbgalt
	{background:#666666;
	font-size:12.0pt;}
p.navtitle, li.navtitle, div.navtitle
	{font-size:9.0pt;
	font-weight:bold;}
p.nonavtitle, li.nonavtitle, div.nonavtitle
	{font-size:9.0pt;
	font-weight:bold;}
p.bimodoff, li.bimodoff, div.bimodoff
	{font-size:12.0pt;}
p.bimodon, li.bimodon, div.bimodon
	{font-size:12.0pt;}
p.btblinks, li.btblinks, div.btblinks
	{font-size:8.5pt;}
p.btlinksactive, li.btlinksactive, div.btlinksactive
	{font-size:12.0pt;
	font-weight:bold;}
p.inputtext, li.inputtext, div.inputtext
	{font-size:12.0pt;}
p.inputbutton, li.inputbutton, div.inputbutton
	{font-size:12.0pt;
	font-weight:bold;}
p.endsearch, li.endsearch, div.endsearch
	{font-size:12.0pt;
	font-weight:bold;}
p.dropdown, li.dropdown, div.dropdown
	{font-size:12.0pt;}
p.navtoptoolbg, li.navtoptoolbg, div.navtoptoolbg
	{background:black;
	font-size:12.0pt;}
p.headingbarbg, li.headingbarbg, div.headingbarbg
	{background:#333333;
	font-size:12.0pt;}
p.headingsubbarbg, li.headingsubbarbg, div.headingsubbarbg
	{background:#CCCCCC;
	font-size:12.0pt;}
p.headingbartitle, li.headingbartitle, div.headingbartitle
	{font-size:10.5pt;
	font-weight:bold;}
p.headingsubbartitle, li.headingsubbartitle, div.headingsubbartitle
	{font-size:9.0pt;
	font-weight:bold;}
p.tablestripe, li.tablestripe, div.tablestripe
	{background:#EEEEEE;
	font-size:12.0pt;}
p.pgtitle, li.pgtitle, div.pgtitle
	{font-size:12.0pt;
	font-weight:bold;}
p.buyprint, li.buyprint, div.buyprint
	{font-size:7.5pt;}
p.resulthighlight, li.resulthighlight, div.resulthighlight
	{background:lightblue;
	font-size:12.0pt;}
p.pgsubtitle, li.pgsubtitle, div.pgsubtitle
	{font-size:12.0pt;
	font-weight:bold;}
p.helphead, li.helphead, div.helphead
	{font-size:12.0pt;
	font-weight:bold;}
p.helpsubhead, li.helpsubhead, div.helpsubhead
	{font-size:10.0pt;}
p.helpcaption, li.helpcaption, div.helpcaption
	{font-size:10.0pt;}
p.helptab, li.helptab, div.helptab
	{font-size:10.0pt;}
p.sm, li.sm, div.sm
	{font-size:6.0pt;}
p.gowild, li.gowild, div.gowild
	{font-size:13.5pt;
	font-weight:bold;
	font-style:italic;}
p.getstarted, li.getstarted, div.getstarted
	{font-size:10.0pt;
	font-weight:bold;
	font-style:italic;}
@page Section1
	{size:8.5in 11.0in;
	margin:1.0in 1.25in 1.0in 1.25in;}
div.Section1
	{page:Section1;}
-->
</style>

</head>

<body lang=EN-US link="#990000" vlink=purple>

<div class=Section1>

<div align=center>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 width="90%"
 style='width:90.0%;background:#ECECD9;border-collapse:collapse;border:none'>
 <tr>
  <td width="33%" style='width:33.0%;border:inset #111111 1.0pt;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><a href="4.htm"><span style='text-decoration:none'><img
  border=0 width=37 height=34 src="leftarrw.gif"></span></a></p>
  </td>
  <td width="33%" style='width:33.0%;border:inset #111111 1.0pt;border-left:
  none;padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><a href="0.htm"><span
  style='font-size:13.5pt'>Table of Contents</span></a></p>
  </td>
  <td width="34%" style='width:34.0%;border:inset #111111 1.0pt;border-left:
  none;padding:.75pt .75pt .75pt .75pt'>
  <p align=right style='text-align:right'><a href="6.htm"><span
  style='text-decoration:none'><img border=0 width=37 height=34
  src="rightarrw.gif"></span></a></p>
  </td>
 </tr>
</table>

</div>

<h2><a name="_Chapter_3._Python_on_Windows"></a>Chapter 3. Python on Windows</h2>

<p>This chapter introduces using Python on Windows. Rather than describe how to
use Python on Windows, we discuss the architecture and briefly cover some of
the extension modules available.</p>

<p>When you install the Python binaries for Windows, you install a fully
functional version of Python that runs under Windows. This version of Python is
similar to what you would find on any installation of Python, regardless of the
platform, and we begin by briefly discussing how to take full advantage of the
standard Python on Windows.</p>

<p>Although this standard version of Python is fully functional, you don’t
obtain much Windows-specific functionality. To fill the gap, there is a
standard set of extensions for Python known collectively as the Python for
Windows extensions. These extensions provide access to many Windows-specific
features, such as a GUI and IDE environment, Microsoft’s COM, the raw Win32
API, Windows NT-specific features, and so forth. We assume you have already
installed the Python for Windows extensions, so these extensions are covered in
detail. As discussed in <a href="3.htm#_Chapter_1._What_Is_Python?">Chapter 1</a>,
you can find the latest official version of these extensions at <a
href="http://www.python.org/windows" target="_blank">http://www.python.org/windows</a>
(look for the Windows 95/NT-specific extensions entry).</p>

<p>To complete the picture, we also discuss some other extension modules
available for Python on Windows. Many of these are not Windows-specific, but do
support Windows, so they are worthy of discussion. Extensions falling into this
category include OpenGL, mxTools, Zope, PIL, and others.</p>

<h3><a name="_3.1_The_Python_Core_on_Windows"></a>3.1 The Python Core on
Windows</h3>

<p>Python is an Open Source tool, and on many platforms, the standard way to
install Python is to download the Python sources and run an automated procedure
for compiling Python on the machine, resulting in Python binaries that are
installed and ready to use. The key advantage of this process is that it can be
customized for a particular installation; if you have a specific requirement,
it can normally be accommodated.</p>

<p>Under Microsoft Windows, however, this strategy doesn’t work. Most people
don’t have C compilers, and probably would not be happy with the arrangements
even if they did. Therefore, Python provides an installation package that
contains a version of Python built with useful default options. The
installation allows you to choose which components are installed from the
following:</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>The Python core implemented in a Windows DLL named <i>Python1x.dll</i>
(e.g., <i>Python15.dll</i> for the Python 1.5 family). This DLL is installed
into your PC’s Windows system directory.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>The standard Python executable, <i>Python.exe</i> . This provides the
default interactive prompt and allows you to run Python programs. Additionally,
<i>Pythonw.exe</i> is also installed, which allows you to write GUI
applications using Python. Only advanced users should employ <i>Pythonw.exe</i>,
because Python errors aren’t printed; this means that <i>Pythonw.exe</i>
usually appears to do nothing, and this is intentional. You should avoid using <i>Pythonw.exe</i>
until you are proficient with Python itself.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>A few useful Python extension modules providing an interface to such
things as <i>.zip</i> compatible compression, the Tkinter GUI library, and so
forth. Python extension modules are implemented as Windows DLLs, but are
typically provided as <i>.pyd</i> files. For example, the interface to the zlib
compression tool is a DLL named <i>zlib.pyd</i>.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>The Python library as Python source files (<i>.py</i>). The Python library
contains many useful cross-platform modules for working with Python. These
include the basic Python library (such as the <tt><span style='font-size:10.0pt'>string</span></tt>
and <tt><span style='font-size:10.0pt'>os</span></tt> modules), as well as
advanced modules, such as web servers or modules for inspecting and decoding
various audio format files.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>The Python test suite. This is a set of Python source files that test
the Python installation. In general, you don’t need to run these tests: they
are designed primarily to test ports of Python to new architectures, or by the
creators of Python to test major changes to Python itself. If you really feel a
need to run this, you can start the Python interpreter and execute the command:</p>

<pre>&gt;&gt;&gt; import test.autotest</pre>

<p>Python responds with:</p>

<pre>test_grammar</pre><pre>test_opcodes</pre><pre>test_operations</pre><pre>test_builtin</pre><pre>test_exceptions</pre><pre>test_types</pre><pre>test_al</pre><pre>test test_al skipped -- an optional feature could not be imported</pre><pre>...</pre>

<p>A hundred or so lines will print over the next few minutes; it takes some
time to complete. Note the last message printed; you will see many of these
warnings, and they can be safely ignored.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>The Python documentation in HTML format, accessible from the Windows
Start Menu.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Headers (<i>.h</i> files) and libraries (<i>.lib</i> files) for the C
components needed to build your own extension modules. This is covered in <a
href="26.htm#_Chapter_22._Extending_and_Embedding">Chapter 22</a><i>.</i></p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>The portable GUI environment Tkinter and a Python IDE known as IDLE.
Tkinter is discussed in more detail in <a href="#_Chapter_20._GUI_Development">Chapter
20</a>, while IDLE is discussed in <a
href="6.htm#_Chapter_4._Integrated_Development_E">Chapter 4</a><i>.</i></p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Various Python scripts and utility programs. Browse the <i>\tools</i>
subdirectory of your Python installation.</p>

<p>You should browse the supplied Python documentation. You will find a
reference guide for most of the standard library, as well as the language
tutorial and reference. Additionally, you should check for later documentation
at <a href="http://www.python.org/doc/" target="_blank">http://www.python.org/doc/</a>;
it’s quite common for new documentation to be written between major Python
releases, and the latest documentation is always available for online browsing
or download in both HTML and printable (PostScript/PDF) formats.</p>

<h4>3.1.1 The Windows Registry</h4>

<p>When Python is installed, a number of configuration options are stored in
the Windows registry. The Windows registry provides a central location where
programs can store their preferences and settings and provides more features
than traditional techniques of saving configuration information. The Windows
registry also has some limitations, and many people would dearly like to see it
suffer a slow and painful death! Whatever your views, good Windows
applications, and therefore Python, store their information in the Windows
registry.</p>

<p>In general, it isn’t necessary for you to understand or edit the registry;
Python and any extensions you install normally manages this for you. Indeed, if
you are unfamiliar with the Windows registry, you should avoid it completely:
it’s all too easy to do serious damage to your PC’s configuration. However, if
you are experienced with the Windows registry or are curious to see how
everything works, read on.</p>

<p>The most important configuration option stored in the registry is the
PythonPath, the list of directories where Python looks to find modules, which
can be viewed at runtime via <i>sys.path</i> . Under Unix, the common way of
storing this option is by setting a PYTHONPATH environment variable. Under
Windows, this information is stored in the registry rather than in the
environment.<a name="_ftnref1"></a><a href="#_ftn1"><span class=atitlechar><sup><span
style='font-size:9.0pt'>[1]</span></sup></span></a></p>

<p>Python also stores other configuration data in the registry, including the
location where Python was installed, a list of Python help files, and so forth.
For full details on Python’s use of the registry, please see the Python
documentation.</p>

<p>Let’s take a quick look at the Python registry information using the
standard Windows Registry Editor. Start the Registry Editor by executing the program
<i>regedit.exe</i> (or possibly <i>regedt32.exe</i> on Windows 95, depending on
the configuration). You should see a window that looks similar to the Windows
Explorer: a list of folders on the left, and data on the right.</p>

<p>Locate the folder named HKEY_LOCAL_MACHINE, and expand it. Locate the
sub-folder named Software, and expand it, then continue down through the
Python, PythonCore, 1.5, and PythonPath subfolders. Your screen should look
something like <a href="5.htm#_Figure_3.1._The_Windows_Registry_Ed">Figure 3.1</a>,
which shows the default PythonPath (i.e., the path used by the Python core) has
been installed in <i>E:\Program Files\Python</i>, and the three existing path
subkeys: PythonWin, win32, and win32com. These entries have been added by the
Python for Windows extensions and contain the additional PythonPath entries
required by the respective packages.</p>

<p>If you need to add your own PythonPath entry, you can create a subkey under
the PythonPath key and add your new path entries to the key. The names of the
keys are for documentation purposes only; they are the name of the package that
requires the path entry. Only the key values are actually used by Python
itself.</p>

<div align=center>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 width="90%"
 style='width:90.0%;background:black'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 width="100%"
   style='width:100.0%;background:white'>
   <tr>
    <td width=60 valign=top style='width:45.0pt;padding:4.5pt 4.5pt 4.5pt 4.5pt'>
    <p class=MsoNormal><span style='font-family:Arial'><img border=0 width=51
    height=36 src="images\image003.gif"></span></p>
    </td>
    <td valign=top style='padding:4.5pt 4.5pt 4.5pt 4.5pt'>
    <p>The registry is a system-level tool that allows you freedom to do
    irreparable damage to your operating system, requiring complete
    re-installation. Be careful with any changes you make to the registry and
    make no changes unless you are certain of their impact.</p>
    </td>
   </tr>
  </table>
  <p class=MsoNormal></p>
  </td>
 </tr>
</table>

</div>

<h5 align=center style='text-align:center'><a
name="_Figure_3.1._The_Windows_Registry_Ed"></a>Figure 3.1. The Windows
Registry Editor</h5>

<p class=MsoNormal align=center style='text-align:center'><span
style='font-family:Arial'><img border=0 width=502 height=309
src="images\image007.gif" alt="figs/ppw.0301.gif"></span></p>

<h4>3.1.2 Windows Explorer Integration</h4>

<p>If you open the Windows Explorer after installing Python, you might notice
that all <i>.py</i> and <i>.pyc</i> files have their own cute Python icon! If
you right-click on a <i>.py </i>file, notice the default menu entry is Run; you
can select this entry from the menu or double-click on the <i>.py</i> file to
run the program using the standard <i>Python.exe</i>. It’s possible that other
Python extensions will install new items in this menu; for example, PythonWin
(discussed later in this chapter) adds an Edit item, allowing you to open the
Python source file for editing.</p>

<p>In addition, you can drag these <i>.py</i> files to your favorite text
editor (including PythonWin) for editing. This can be any editor of your
choice, or even the standard Windows <i>notepad</i> tool.<a name="_ftnref2"></a><a
href="#_ftn2"><span class=atitlechar><sup><span style='font-size:9.0pt'>[2]</span></sup></span></a></p>

<p>Running Python programs from the Windows Explorer has one major problem: a
new window is created for the Python program, and when it terminates, the
window closes immediately. This means that any messages displayed by the
program (either informational or error messages) usually vanish just as you are
trying to read them. For this reason, most Windows users don’t execute their
Python programs in this manner; they do so either from the Windows command
prompt or from a Python integrated development environment (IDE), such as
PythonWin or IDLE.</p>

<h4>3.1.3 Using the Windows Command Prompt</h4>

<p>Both the Windows 95/98 and NT/2000 families come with a command prompt
allowing users to run programs from a command-line interface. The Windows
command prompt has a long and not-so-glorious history; it has grown from the
first versions of MS-DOS and still uses the same basic syntax.</p>

<h5>3.1.3.1 Running Python programs</h5>

<p>For these discussions, let’s assume you have a file named <i>C:\Scripts\hello.py</i>,
and this file consists of the single line:</p>

<pre>print &quot;Hello from Python&quot;</pre>

<p>A first attempt to run this program may surprise you:</p>

<pre>C:\Scripts&gt;python.exe hello.py</pre><pre>The name specified is not recognized as an</pre><pre>internal or external command, operable program or batch file.</pre><pre>&nbsp;</pre><pre>C:\Scripts&gt;</pre>

<p>Although <i>Python.exe</i> has been installed, it hasn’t modified the system
environment variable PATH: Windows doesn’t know how to find <i>Python.exe</i>.
Windows NT does, however, know how to run <i>.py</i> files directly. Thus, if
you ask the command prompt to execute <i>hello.py</i>, it will:</p>

<pre>C:\Scripts&gt;hello.py</pre><pre>Hello from Python</pre><pre>&nbsp;</pre><pre>C:\Scripts&gt;</pre>

<p>Take this one step further and avoid the use of the <i>.py</i> extension,
making a Python program appear like a <i>.exe</i>, <i>.com</i>, or <i>.bat</i>
file. Windows NT supports this using the PATHEXT environment variable. You can
view the current settings of this variable by entering the command:</p>

<pre>C:\Scripts&gt;echo %PATHEXT%</pre><pre>.exe;.bat;.cmd</pre><pre>&nbsp;</pre><pre>C:\Scripts&gt;</pre>

<p>This is a list of the default extensions Windows searches for when a command
is executed. You can add Python files to this list (and check the change was
successful) by executing:</p>

<pre>C:\Scripts&gt;set PATHEXT=%PATHEXT%;.py</pre><pre>&nbsp;</pre><pre>C:\Scripts&gt;echo %PATHEXT%</pre><pre>.exe;.bat;.cmd;.py</pre><pre>&nbsp;</pre><pre>C:\Scripts&gt;</pre>

<p>Now execute your Python programs by specifying the base name of the file:</p>

<pre>C:\Scripts&gt;hello</pre><pre>Hello from Python</pre><pre>&nbsp;</pre><pre>C:\Scripts&gt;</pre>

<p>For more information, please see the Windows NT documentation.</p>

<p>Unfortunately, none of this applies to Windows 95 or 98, only to Windows NT
and 2000. Users of Windows 95 or 98 often take one of the following actions:</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Add the Python directory to the system environment variable PATH by
modifying their <i>autoexec.bat</i> file.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Copy <i>Python.exe</i> to the Windows system directory. The biggest
problems with this are that it’s one more file in an already overused
directory, and when Python is upgraded, this file may cause some conflicts.</p>

<p>The facilities we described that are available under Windows NT usually make
these changes unnecessary.</p>

<p>Finally, both operating systems support using the <tt><span
style='font-size:10.0pt'>start</span></tt> command to start Python in a
separate window. For example, you could use the command <tt><span
style='font-size:10.0pt'>start</span></tt> <tt><span style='font-size:10.0pt'>python.exe</span></tt>
to start an interactive <i>Python.exe</i> in a new window or the command <tt><span
style='font-size:10.0pt'>start</span></tt> <tt><span style='font-size:10.0pt'>hello.py</span></tt>
to run your script in a new window. However, just as with Windows Explorer,
this window closes as the program exits, meaning you don’t get a chance to read
the message printed by your script.</p>

<h5>3.1.3.2 Command-line editing</h5>

<p>All versions of Windows have some capability for command-line editing: that
is, recalling previous commands that have been entered, so they can be
reexecuted without retyping them.</p>

<p>Windows NT supports command-line editing by default, but Windows 95 and 98
require you to execute a program named <i>doskey</i> before this functionality
is available. Windows 95 and 98 users often configure their environment so that
<i>doskey</i> is automatically executed whenever a command prompt is started.</p>

<p>To operate the command-line editing tools, use the arrow keys on the
keyboard. The up and down arrows scroll between the commands you executed
recently, while the left and right arrow keys allow you to edit the current
command. In addition, Windows NT also provides command-line editing for <i>Python.exe
</i>; once you start Python, you can recall previous commands in the same way
you can at the command prompt. Unfortunately, Windows 95 or 98 doesn’t offer
this feature.</p>

<p>The <i>doskey</i> program can also provide command macros. A <i>command</i> <i>macro</i>
is a shortcut you assign to a program, so when the shortcut is executed the
command prompt, the program is executed.</p>

<p>You can use this to your advantage when working with Python. For example,
Windows 95 users who can’t take advantage of the Windows NT command prompt can
use the following command to assign the shortcut <tt><span style='font-size:
10.0pt'>p</span></tt> to execute Python:</p>

<pre>C:\Scripts&gt; doskey p=&quot;C:\Program Files\Python\Python.exe&quot; $*</pre>

<p>The $* at the end of the command indicates that any command-line parameters
should be passed to the program, in this case, Python. Thus, you could execute:</p>

<pre>C:\Scripts&gt;p hello.py</pre><pre>Hello from Python</pre><pre>&nbsp;</pre><pre>C:\Scripts&gt;</pre>

<p>Users of Windows NT and Windows 95 may also like to use these shortcuts to
execute their favorite editor. For example, if you execute the following
commands:</p>

<pre>C:\Scripts&gt;doskey n=start notepad.exe $*</pre><pre>C:\Scripts&gt;doskey pw=start pythonwin.exe $*</pre>

<p>you could use:</p>

<pre>C:\Scripts&gt;n hello.py</pre>

<p>to edit the file using <i>notepad</i>, or:</p>

<pre>C:\Scripts&gt;pw hello.py</pre>

<p>to edit the file using PythonWin.</p>

<p>To take advantage of these <i>doskey</i> macros, you can place them all in a
single batch file that can be configured to be run whenever a command prompt is
opened. There are many techniques, but a simple one is to place all the
commands in a batch file, then modify the shortcut you use to execute the
command prompt to include the parameter <tt><span style='font-size:10.0pt'>/k</span></tt>
<tt><i><span style='font-size:10.0pt'>your_batchfile.bat</span></i></tt>. This
forces the command prompt to execute your batch file, but remains open,
allowing you to continue entering commands.</p>

<h5>3.1.3.3 Copy and Paste from the command prompt</h5>

<p>Although fairly minor, there are a couple of other features that can help
you work with Python.</p>

<p>The first is Copy and Paste. Both Windows 95 and NT support an option that
allows you to copy text from the command prompt using the mouse. Windows NT
also allows you to paste information into your command prompt with a simple
right-click of the mouse. This can be handy when you need to paste a string or
sample code into your Python prompt. You can enable this by selecting the Quick
Edit option from the command prompt’s properties.</p>

<p>Another nice feature for all versions is that you can drag a file from
Windows Explorer and drop it into a command prompt, pasting the full filename
to the prompt. This can be a handy way to execute Python programs from Windows
Explorer without losing the output when the program completes: simply drop the
filename onto an existing command prompt and press Enter. </p>

<h4>3.1.4 Windows Gotchas</h4>

<p>As we have stressed a number of times, Python is cross-platform. Although
the sheer market penetration of Windows makes it one of Python’s most popular
platforms, it’s still only one of the many operating systems Python has to work
with.</p>

<p>Accordingly, there are some features available on other platforms that don’t
exist on Windows. To make matters worse, there are a number of features that do
work on both platforms, but not in exactly the same way.</p>

<p>Most people who use Python only on Windows never need to worry about these
features; they have probably never heard of these functions anyway, and they
won’t find further comment on them in this book. But for people moving to
Windows from the Unix and Linux worlds, seemingly trivial things can cause much
aggravation. Although far from exhaustive, some of the more common gotchas are
detailed here.</p>

<h5>3.1.4.1 Text-mode versus binary-mode files</h5>

<p>Since the early days of computing (well before Unix), lines in text files
were terminated with <i>carriage-return</i> and <i>line-feed</i> characters.
This is directly attributable to the early teletype devices that required a
command to move the printhead (or carriage) back to the left, and another to
eject a new line. The creators of Unix decided the convention was pointless and
terminated all lines in text files by the line-feed character, which by then
had become known as the <i>newline</i> character. Then the C language came up
with a new technique for opening files, such that regardless of the local
line-ending conventions, your program would always see a consistent single
newline character at the end of each line. A differentiation was made between binary-
and text-mode files, which was specified when opening the file.</p>

<p>Unfortunately, over time many Unix programmers became somewhat lazy. As Unix
uses a single newline character to terminate lines anyway, there was no
difference on that operating system between text- and binary-mode files; the
program always worked identically on Unix, regardless of the mode used to open
the file. Over time, it became common practice for programmers to omit the
binary- or text-mode specifiers completely. To add to the confusion, we also
have the Apple Macintosh, which uses a single carriage return.</p>

<p>Windows traces its roots right back to the old teletype days. Every version
of Windows, including the most recent, has had to retain some level of
compatibility with early versions of MS-DOS, and MS-DOS itself strove to retain
some compatibility with CP/M. As a direct result of this history, the common
default-line terminator on Windows is a carriage-return character followed by a
newline character. This is the file format editors such as <i>notepad</i> use.
Most modern editors (including most you are likely to use with Python) support
either line convention.</p>

<p>The end result of all this discussion comes down to two points:</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>If you open a file and wish to see a single newline character
terminating each line (regardless of what really terminates the lines), the
file should be opened in text mode. You should open in text mode on all
operating systems, including Unix where it will have no effect; you never know
when some poor soul will try to run your code on a different operating system!</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>If you open a file and need to see the raw, binary data, you should
specify binary mode.</p>

<p>If you open a file in text mode, but it contains binary data, the data often
appears corrupt due to the newline and carriage-return mapping. If you open a
file in binary mode but you process it as if it contained text data, each line
may have additional (or missing) carriage returns at the end of each line.</p>

<p>To open a file in binary mode, append a <tt><span style='font-size:10.0pt'>b</span></tt>
to the mode in the <tt><span style='font-size:10.0pt'>open()</span></tt> call.
The default is text mode, but on Windows, you can also specify this by
appending a <tt><span style='font-size:10.0pt'>t</span></tt>. Thus, to open a
file for reading in text mode, use this:</p>

<pre>file = open(filename, &quot;r&quot;)</pre>

<p>Or to open a file for writing in binary mode, use this:</p>

<pre>file = open(filename, &quot;wb&quot;)</pre>

<h5>3.1.4.2 Fork</h5>

<p>Unix provides a function called <tt><span style='font-size:10.0pt'>fork()</span></tt>
to spawn subprocesses. <tt><span style='font-size:10.0pt'>fork()</span></tt> is
often used in situations where Windows programmers would consider using
threads. Until recently, some of the more popular Unix systems didn’t have
support for threads, and those that did frequently had their own proprietary
API, making it difficult to write portable, threaded code for Unix. <tt><span
style='font-size:10.0pt'>fork()</span></tt> has a number of subtleties and
features that make it particularly useful in this context, and thus <tt><span
style='font-size:10.0pt'>fork()</span></tt> is widespread in the Unix world.</p>

<p>Windows doesn’t support <tt><span style='font-size:10.0pt'>fork()</span></tt>
and, unfortunately, doesn’t support anything that comes close. If you have a
Unix program that uses <tt><span style='font-size:10.0pt'>fork()</span></tt>,
then porting it to run under Windows is likely to be significant work and
requires fairly intimate understanding of the program.</p>

<p>In many cases, the best solution is to rebuild this part of the application
for Windows. On a typical Unix machine, creating new processes (as <tt><span
style='font-size:10.0pt'>fork()</span></tt> does) is a relatively cheap
operation. On Windows, however, the overhead of creating a new process is
significant, so solutions using this architecture on Windows won’t often scale
or perform as you would hope. Rewriting this portion of the application to use
multiple threads instead of multiple processes is often the best solution for
Windows.</p>

<p>Python exposes the <tt><span style='font-size:10.0pt'>fork()</span></tt>
function in the <tt><span style='font-size:10.0pt'>os</span></tt> module (i.e.,
<tt><span style='font-size:10.0pt'>os.fork()</span></tt> ) on platforms that
support it. As Windows isn’t one of these supporting platforms, using <tt><span
style='font-size:10.0pt'>os.fork()</span></tt> yields an <tt><span
style='font-size:10.0pt'>AttributeError</span></tt> exception.</p>

<h5>3.1.4.3 Select</h5>

<p>Another common Unixism that causes problems on Windows is the use of the <tt><span
style='font-size:10.0pt'>select()</span></tt> function. Under Unix, the <tt><span
style='font-size:10.0pt'>select()</span></tt> function determines when more
input is available from a file. When your program is reading a file on a disk,
you won’t have much use for this function. However, it’s common for programs to
be reading from files that are not on disk: for example, reading the output of
another process (i.e., a pipe) or reading data from a network connection. By
being notified when a particular file has more data available to read, using <tt><span
style='font-size:10.0pt'>select()</span></tt> allows a program to read from
multiple files concurrently.</p>

<p>Windows does provide the <tt><span style='font-size:10.0pt'>select()</span></tt>
function, but it can be used only with sockets (see <a
href="#_Chapter_19._Communications">Chapter 19</a>). Attempting to use <tt><span
style='font-size:10.0pt'>select()</span></tt> with a regular Python file object
will fail.</p>

<p>The most common technique on Windows for simple asynchronous input/output is
to use threads; and indeed threads are the only portable technique to perform this
style of I/O in Python. A simple thread-based solution doesn’t scale well once
the number of threads becomes large, so Windows provides other native
techniques for performing asynchronous I/O. Although these techniques are
beyond the scope of this book, they are all fully supported by Python on
Windows.</p>

<h5>3.1.4.4 Pipes</h5>

<p>This issue is similar to the one outlined previously for <tt><span
style='font-size:10.0pt'>os.fork()</span></tt>: a feature for working with
subprocesses that doesn’t work as you may hope on Windows.</p>

<p>Quite often, Unix programs use a function called <tt><span style='font-size:
10.0pt'>os.popen()</span></tt> to create a child process and establish a pipe
between your process and the new child. Depending on the direction of the pipe,
you can read the output from the process or supply input to the process. The
most common use of <tt><span style='font-size:10.0pt'>os.popen()</span></tt> is
to execute a program and capture its output. When you read from the pipe, you
are actually reading the output of the child process.</p>

<p>Although provided under Windows, the <tt><span style='font-size:10.0pt'>os.popen()</span></tt>
function is practically useless. Due to various bugs in Windows, <tt><span
style='font-size:10.0pt'>os.popen()</span></tt> works only on Windows NT from a
console (i.e., DOS prompt) program. Windows 95, 98, and Windows NT GUI programs
all fail when attempting to use <tt><span style='font-size:10.0pt'>os.popen()</span></tt>.</p>

<p>Bill Tutt has come to the rescue with his various <tt><span
style='font-size:10.0pt'>popen()</span></tt> replacement functions for Windows.
These functions are exposed in the <tt><span style='font-size:10.0pt'>win32pipe</span></tt>
module and documented in the standard Win32 Extensions Help file.</p>

<h3><a name="_3.2_The_Python_for_Windows_Extensio"></a>3.2 The Python for
Windows Extensions</h3>

<p>To supplement the standard Python distribution, there is a set of extensions
specific to Microsoft Win32 platforms (currently Windows NT/2000, Windows
95/98, and Windows CE).</p>

<p>These extensions actually consist of three discrete Python extensions:
access to the native Win32 API, interfaces to COM, and the PythonWin GUI
extensions. These are currently released as a single unit, in an installation
package named <i>win32all</i> . Each specific release is given a build number
that is incorporated into the installation name; at time of printing, the
current build number is 128, so the installation package is named <i>win32all-128.exe</i>.
By the time you read this, the build number is likely to have advanced, so
install the version recommended by the web page when you connect. For obvious
reasons, this package is also known as the “win32all package.”</p>

<p>The Python for Windows extensions can be found at <a
href="http://www.python.org/windows" target="_blank">http://www.python.org/windows</a>
and also at <a href="http://starship.python.net/crew/mhammond" target="_blank">http://starship.python.net/crew/mhammond</a>.</p>

<h4>3.2.1 Win32 Extensions</h4>

<p>The most fundamental interface to Windows features is provided by the Win32
extensions. In most cases, these modules provide access similar to the Win32
API that C or C++ programmers would have, such as access to Windows handles and
other low-level concepts.</p>

<p><a href="5.htm#_Table_3.1._Win32_Extension_Modules">Table 3.1</a> displays
the Win32 extension modules.</p>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 width="100%"
 style='width:100.0%'>
 <tr>
  <td colspan=2 style='border:none;padding:.75pt .75pt .75pt .75pt'>
  <h5 align=center style='text-align:center'><a
  name="_Table_3.1._Win32_Extension_Modules"></a>Table&nbsp;3.1. Win32
  Extension Modules</h5>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><b><span style='font-size:10.0pt'>Module</span></b></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><b><span style='font-size:10.0pt'>Description</span></b></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>mmapfile</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Interfaces to Windows memory-mapped files, a
  mechanism that allows data to be shared among multiple processes.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>odbc</span></tt><span style='font-size:
  10.0pt'> </span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>An interface to the Open DataBase
  Connectivity API, a portable API for connecting to multiple databases. We
  discuss ODBC and other database techniques in <a
  href="#_Chapter_13._Databases">Chapter 13</a>.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>win32api</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Accesses many of the common and simple
  Windows APIs; a general-purpose module with a cross section of API support.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>win32event</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Accesses the Windows event and signaling API.
  This module allows you to manipulate and wait for Windows events, semaphores,
  mutexes, etc.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>win32evtlog</span></tt></p>
  <p><tt><span style='font-size:10.0pt'>win32evtlogutil</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>An interface to the Windows NT Event Log.
  The </span><tt><span style='font-size:10.0pt'>win32evtlog</span></tt><span
  style='font-size:10.0pt'> module provides a raw interface to the Windows NT
  API, while the </span><tt><span style='font-size:10.0pt'>win32evtlogutil</span></tt><span
  style='font-size:10.0pt'> module provides utilities to simplify working with
  the module. This is discussed in <a
  href="22.htm#_Chapter_18._Windows_NT_Services">Chapter 18</a><i>.</i></span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>win32pdh</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>An interface to the Windows NT Performance
  Monitor. This module uses a helper DLL provided by Microsoft known as the
  Performance Data Helper or PDH. We discuss the Windows NT Performance Monitor
  in <a href="22.htm#_Chapter_18._Windows_NT_Services">Chapter 18</a>.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>win32pipe</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Accesses the pipe-related Win32 functions,
  such as functions for creating and using pipes, including named pipes. We
  discuss pipes briefly in <a href="21.htm#_Chapter_17._Processes_and_Files">Chapter
  17</a>, and use a pipe from the </span><tt><span style='font-size:10.0pt'>win32pipe</span></tt><span
  style='font-size:10.0pt'> module in <a
  href="#_Chapter_18._Windows_NT_Services">Chapter 18</a>.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>win32file</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Accesses the file-related Win32 functions.
  This module exposes a low-level, raw interface to files on Windows and is
  used only when the standard Python file object isn’t suitable. Python files
  and the </span><tt><span style='font-size:10.0pt'>win32file</span></tt><span
  style='font-size:10.0pt'> module are discussed in <a
  href="#_Chapter_17._Processes_and_Files">Chapter 17</a>.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>win32lz</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>An interface to the Windows LZ compression
  library. Note that since this module was created, Python now ships with support
  for the <i>gzip</i> compression format, so in most cases </span><tt><span
  style='font-size:10.0pt'>win32lz</span></tt><span style='font-size:10.0pt'>
  is no longer used.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>win32net</span></tt></p>
  <p><tt><span style='font-size:10.0pt'>win32wnet</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Interface to the Windows networking API. </span><tt><span
  style='font-size:10.0pt'>win32net</span></tt><span style='font-size:10.0pt'>
  provides an interface to Windows NT-specific server networking, while </span><tt><span
  style='font-size:10.0pt'>win32wnet</span></tt><span style='font-size:10.0pt'>
  provides client-networking functions available to all versions. We discuss
  the Windows networking functions in <a
  href="#_Chapter_16._Windows_NT_Administrati">Chapter 16</a>.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>win32print</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Interface to the printer-related Windows
  APIs.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>win32process</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Interface to the process-related Windows
  APIs. This module is discussed in detail in <a
  href="#_Chapter_17._Processes_and_Files">Chapter 17</a>.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>win32ras</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Interface to the Windows Remote Access
  Service (RAS). Used for establishing remote connections to Windows NT
  servers, typically using a modem. The RAS interface is discussed in <a
  href="#_Chapter_19._Communications">Chapter 19</a>.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>win32security</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Accesses the Windows NT security-related functions.
  Although beyond the scope of this book, we present a brief example in <a
  href="20.htm#_Chapter_16._Windows_NT_Administrati">Chapter 16</a>.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>win32service</span></tt></p>
  <p><tt><span style='font-size:10.0pt'>win32serviceutil</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Accesses the Windows NT Services-related API.
  This module is discussed in detail in <a
  href="#_Chapter_18._Windows_NT_Services">Chapter 18</a>.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>win32trace</span></tt></p>
  <p><tt><span style='font-size:10.0pt'>win32traceutil</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Debugging related modules. These modules
  allow you to collect the output of a Python process in a separate process.
  This is most useful when debugging server-style applications, where Python
  error and other messages are not available.</span></p>
  </td>
 </tr>
</table>

<p>When the extensions are installed, a Reference Manual (a Windows Help file) is
installed detailing each of the methods and their parameters.</p>

<p>You will notice that some modules have a “helper” companion; for example,
the <tt><span style='font-size:10.0pt'>win32evtlog</span></tt> module has a
helper named <tt><span style='font-size:10.0pt'>win32evtlogutil</span></tt>. In
all cases, the core module exposes the native Windows API, and the “helper”
provides more convenient access to that API.</p>

<h4>3.2.2 PythonWin</h4>

<p>When you install the Python for Windows extensions, an environment known as
PythonWin is also installed. One of the most noticeable changes that occurs when
you install the extensions is that a shortcut to PythonWin is installed into
the Python group on the Windows Start menu.</p>

<p>PythonWin is a GUI environment and IDE for Python. When you start PythonWin,
you are presented with an interactive window (a window where you can enter and
execute arbitrary Python commands, similar to <i>Python.exe</i>). You can also
edit and execute <i>.py</i> files within the environment, using a graphical
debugger if necessary. Finally, you can also use the PythonWin framework to
create your own GUI-based programs.</p>

<p>Technically, PythonWin consists of two discrete parts:</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>A large Python extension that exposes the Microsoft Foundation Classes
(MFC) to Python. MFC is a C++ library provided by Microsoft to create Windows
programs. Similar to MFC itself, this extension can be considered a toolkit; it
contains all the elements you need to build GUI applications, but it isn’t an
application itself.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>A set of Python modules that use these MFC facilities to create the IDE
environment you see when you start PythonWin. These modules can almost be
considered sample code for the MFC extensions.</p>

<p>As you run PythonWin, it’s worth noting that almost all the functionality
you are using is written in Python. Everything from handling the menu commands
to updating the line and character positions on the status bar is implemented
in the supplied .<i>py</i> Python source files.</p>

<p>PythonWin is discussed in more detail in <a
href="#_Chapter_4._Integrated_Development_E">Chapter 4</a><i>.</i></p>

<h4>3.2.3 PythonCOM</h4>

<p>The Python for Windows extensions also include excellent support for the
Microsoft Component Object Model (COM). COM is a technology that allows you to
use “objects” from your favorite language, even if the object isn’t implemented
in your language.</p>

<p>Microsoft has invested heavily in COM, and it should be familiar to any
Visual Basic programmer. Many applications for Windows (including Microsoft
Office) can be controlled using COM, making it particularly suitable for
scripting-related tasks; for example, a Python program to open an Excel
spreadsheet and populate the sheet is quite simple, as we shall see later in
the book.</p>

<p>COM and PythonCOM are discussed in <a
href="7.htm#_Chapter_5._Introduction_to_COM">Chapter 5</a>, and in more detail
in <a href="16.htm#_Chapter_12._Advanced_Python_and_COM">Chapter 12</a> .</p>

<h3><a name="_3.3_The_Python_Imaging_Library_(PIL"></a>3.3 The Python Imaging
Library (PIL)</h3>

<p>The Python Imaging Library (PIL) is a set of modules that can perform all
sorts of image manipulation and processing in Python. PIL is designed to be
cross-platform, so it can be used on almost any platform with Python support.
But it does support some Windows-specific extensions, allowing PIL to display
images using the Windows API.</p>

<p>PIL is suitable for many image-related tasks. You can use it to create
thumbnails automatically from a collection of images, to convert between
graphical formats, or even as the basis of a graphical image-manipulation tool.</p>

<p>PIL comes with extensive documentation and can be found on the Internet at <a
href="http://www.pythonware.com" target="_blank">http://www.pythonware.com</a>.</p>

<h3><a name="_3.4_PyOpenGL"></a>3.4 PyOpenGL</h3>

<p>OpenGL is a high-performance, portable 2D and 3D rendering library. OpenGL
was created in 1992 by Silicon Graphics and quickly became the industry
standard for 2D and 3D graphics. It’s currently maintained by an independent
industry consortium, the OpenGL Architecture Review Board. More information on
OpenGL can be found at <a href="http://www.opengl.org" target="_blank">http://www.opengl.org</a>.</p>

<p>Most versions of Microsoft Windows support the OpenGL standard. Windows NT
and 98 both come with OpenGL support installed by default, while Windows 95 has
an add-on available to obtain OpenGL support.</p>

<p>David Ascher, a well-known Python luminary and O’Reilly author, currently
maintains a set of Python extensions that allow interface to the OpenGL
libraries known as PyOpenGL. OpenGL and PyOpenGL are both cross-platform
libraries, and both are also supported on Windows.</p>

<p>OpenGL is a complex API, and a good book on OpenGL is highly recommended
before you attempt to use the library. The PyOpenGL pages recommend the
following books:</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Woo, Neider &amp; Davis, <i>OpenGL Programming Guide, Second Edition:
The Official Guide to Learning OpenGL, Version 1.1, </i>Addison Wesley
Developers Press. ISBN: 0-201-46138-2.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Kemp &amp; Frasier, <i>OpenGL Reference Guide, Second Edition: The
Official Reference Document to OpenGL, Version 1.1</i>, Addison Wesley
Developers Press. ISBN: 0-201-46140-4.</p>

<p>PyOpenGL itself comes with a number of demos that use the Tkinter graphics
library, and PythonWin comes with a single sample that demonstrates how to use
OpenGL in the PythonWin environment.</p>

<p>Information on PyOpenGL can be found at <a
href="http://starship.python.net/crew/da/PyOpenGL" target="_blank">http://starship.python.net/crew/da/PyOpenGL</a>.</p>

<h3><a name="_3.5_Web_Publishing_Tools"></a>3.5 Web Publishing Tools</h3>

<p>There are a number of Internet publishing tools available for Python. Python
itself comes with its own HTTP server (web server), which is discussed in some
detail in <a href="19.htm#_Chapter_15._Using_the_Basic_Interne">Chapter 15</a>.</p>

<p>A number of packages have extended Python’s capability in this area; these
include the Medusa Suite and Zope.</p>

<h4>3.5.1 Medusa</h4>

<p>Medusa is a platform for building high-performance, long-running servers using
Python, written by Sam Rushing of Nightmare Software. Medusa uses an
asynchronous model for supporting high-performance, single-threaded servers,
particularly suitable for HTTP or FTP servers. Although Medusa comes with HTTP
and FTP servers, the library is suitable for almost any
high-performance/high-load socket-based communication; in fact, the core Medusa
engine was recently adopted as part of the standard Python library and can be
found on any standard Python 1.5.2 or later distribution.</p>

<p>Medusa is currently used by a number of mission-critical systems around the
world. It’s free for personal use, although it requires a license for
commercial use.</p>

<p>Information on Medusa can be found at <a
href="http://www.nightmare.com/medusa" target="_blank">http://www.nightmare.com/medusa</a>.</p>

<h4>3.5.2 Zope</h4>

<p>Zope is an Open Source application server and portal toolkit supplied and
supported by Digital Creations. While a quick look at Zope may give you the
impression it’s yet another web server, it’s actually far more.</p>

<p>Most web servers earn their living by serving static HTML text, or possibly
executing code using the CGI interface. Instead of serving HTML pages, Zope
publishes “objects” stored in the integrated object database, a relational
database, or other content systems such as LDAP servers. Zope maps these
requests to Python objects, which are retrieved from the object database and
queried. Whenever you display a page using Zope, you are actually calling some
Python object. You can easily create new types of publishable objects and use
any Python facilities including Windows-specific Python extensions. At the time
of this writing a Zope extension to facilitate the use of COM objects is in
development.</p>

<p>This provides a natural way of developing content for the Web. You design
your web page as a combination of HTML templates and a set of objects. The
templates can reference your objects to obtain the final HTML sent to the user.</p>

<p>While Zope’s HTML templates may resemble IIS ASP files, they operate quite
differently. Rather than being bound to web pages like ASP files, Zope
templates are associated with Python objects. A Zope template builds a web
representation of an object by calling the object’s methods and/or calling
other objects and their templates. In this way web pages are built out of
assemblages of objects and their templates.</p>

<p>Unlike ASP, Zope can operate with almost any web server and can run on
almost any platform that supports Python. Zope comes with its own web server,
but it can also operate hand in hand with other web servers such as IIS. When
you use Zope with IIS, Zope runs as an NT service, and IIS forwards web
requests to Zope for processing.</p>

<p>As Zope is released as Open Source, it’s free, including for commercial use.
In addition to customizing Zope for your own purposes, you can participate in
Zope’s development by following changes in Concurrent Versioning System (CVS),
proposing features, submitting patches, and contributing extensions.</p>

<p>Further information can be found at <a href="http://www.zope.org"
target="_blank">http://www.zope.org</a>; the site also provides a handy demo.</p>

<h3><a name="_3.6_The_mx_Extensions"></a>3.6 The mx Extensions</h3>

<p>Not necessarily written for Windows platforms, but nevertheless worth a
look, are the extensions written for Python by Marc-André Lemburg. Most
extensions come with a Python-style license and can be freely used for your own
projects (although some do require a license for commercial use: see the
license for details). Many of them even include precompiled binaries for direct
use on Windows; installation is then a matter of unzipping the package archive.</p>

<p>You can download the most recent versions from the Starship server, where
many other Pythoneers also keep their gems. The documentation, license
information, and download instructions are all just a few clicks away from <a
href="http://starship.python.net/crew/lemburg/" target="_blank">http://starship.python.net/crew/lemburg/</a>
.</p>

<h4 style='page-break-after:avoid'>3.6.1 mxDateTime</h4>

<p><tt><span style='font-size:10.0pt'>mxDateTime</span></tt> provides three new
object types, <tt><span style='font-size:10.0pt'>DateTime</span></tt>, <tt><span
style='font-size:10.0pt'>DateTimeDelta</span></tt>, and <tt><span
style='font-size:10.0pt'>RelativeDateTime</span></tt>, which let you store and
handle date/time values in a more natural way than by using Unix ticks (seconds
since 1.1.70 0:00 UTC, the encoding used by the standard Python time module).
We’ll see this used in <a href="17.htm#_Chapter_13._Databases">Chapter 13</a>.</p>

<p>You can add, subtract, and even multiply instances, or use the standard
Python <tt><span style='font-size:10.0pt'>pickle</span></tt> module to copy
them and convert the results to strings, COM dates, ticks, and some other more
esoteric values. In addition, there are several convenient constructors,
formatters, and parsers to greatly simplify dealing with dates and times in
real-world applications.</p>

<p>Besides providing an easy-to-use Python interface, the package also exports
a comfortable C API interface for other extensions to build on. This is
especially interesting for database applications that often have to deal with
date/time values; the <tt><span style='font-size:10.0pt'>mxODBC</span></tt>
package is one example of an extension using this interface.</p>

<h4>3.6.2 mxTextTools</h4>

<p><tt><span style='font-size:10.0pt'>mxTextTools</span></tt> includes several
useful functions and types that implement high-performance text-manipulation
and searching algorithms.</p>

<p>For experts, <tt><span style='font-size:10.0pt'>mxTextTools</span></tt> also
includes a flexible and extensible state machine, the Tagging Engine, that
allows scanning and processing text based on low-level bytecode “programs”
written using Python tuples. It gives you access to the speed of C without
having to compile and link steps every time you change the parsing description.</p>

<p>Applications include parsing structured text, finding and extracting text
(either exact or using translation tables), and recombining strings to form new
text.</p>

<h4>3.6.3 mxODBC</h4>

<p><tt><span style='font-size:10.0pt'>mxODBC</span></tt> is an extension
package that provides a Python Database API-compliant interface to ODBC
2.0-capable database drivers and managers.</p>

<p>Apart from implementing the standard Database API interface, it also gives
access to a rich set of catalog methods that allow you to scan the database for
tables, procedures, and so forth. Furthermore, it uses the <tt><span
style='font-size:10.0pt'>mxDateTime</span></tt> package for date/time value
interfacing eliminating most of the problems these types normally introduce
(other I/O formats are available too).</p>

<p>The latest versions of the package allow you to interface to more than one
database from one process. It includes a variety of preconfigured setups for
many commonly used databases such as MySQL, Oracle, Informix, Solid, and many
more. A precompiled version of the extension for the Windows ODBC manager is
also included.</p>

<p><a href="17.htm#_Chapter_13._Databases">Chapter 13</a> covers <tt><span
style='font-size:10.0pt'>mxODBC</span></tt> in considerable detail.</p>

<h4>3.6.4 mxStack</h4>

<p>This is one of the smaller offerings: <tt><span style='font-size:10.0pt'>mxStack</span></tt>
implements a new object type called <tt><span style='font-size:10.0pt'>Stack</span></tt>.
It works much as you would expect from such a type, having <tt><span
style='font-size:10.0pt'>.push()</span></tt> and <tt><span style='font-size:
10.0pt'>.pop()</span></tt> methods and focusing on obtaining maximum speed at
low memory costs.</p>

<h4>3.6.5 mxTools</h4>

<p>The <tt><span style='font-size:10.0pt'>mxTools</span></tt> package is
collection of handy functions and objects extending Python’s functionality in
many useful ways. You’ll find many goodies you’ve often missed in this package,
such as <tt><span style='font-size:10.0pt'>dict()</span></tt> for constructing
dictionaries from item lists or a replacement for <tt><span style='font-size:
10.0pt'>range(len(object))</span></tt> called <tt><span style='font-size:10.0pt'>indices()</span></tt>
. There are more than 25 new functions provided by this package; too many to
detail here, and listing only a few runs the risk of skipping the one you might
find most useful. The online documentation provides an excellent reference.</p>

<h4>3.6.6 mxCrypto</h4>

<p><tt><span style='font-size:10.0pt'>mxCrypto</span></tt> is an extension
package that provides object-oriented-style access to the cipher algorithms and
hash functions included in SSLeay, a sophisticated cryptographic library
written by Eric Young, now maintained by the OpenSSL ( <a
href="http://www.openssl.org" target="_blank">http://www.openssl.org</a>) team.</p>

<p>SSLeay/OpenSSL isn’t subject to the U.S. government’s International Traffic
in Arms Regulations (ITAR) export restrictions on cryptographic software, so
it’s available worldwide.</p>

<h4>3.6.7 mxProxy</h4>

<p>This small package gives you complete control of how an object may be
accessed and by whom. It’s suitable to implement bastion-like features without
the need to run in restricted execution environments.</p>

<p>The package features secure data encapsulation (the hidden objects are not accessible
from Python since they are stored in internal C structures), customizable
attribute lookup methods, and a cleanup protocol that helps to break circular
references prior to object deletion. </p>

<h3><a name="_3.7_Scientific_Tools"></a>3.7 Scientific Tools</h3>

<p>Python is popular in scientific circles. One of the first major packages to
come from this environment is Numeric Python. Numeric Python supports efficient
multidimensional arrays and can perform complex number-crunching chores
normally reserved for packages such as MATLAB or IDL. Also included in Numeric
Python are tools for working with linear algebra, Fast Fourier Transforms, and
so forth.</p>

<p>Apart from Numeric Python, other scientific tools include support for
managing huge sets of data, extensions for plotting and other data analysis,
and others.</p>

<p>All these tools are released under a license similar to that of Python and
can be found at the Python web site, <a
href="http://www.python.org/topics/scicomp/" target="_blank">http://www.python.org/topics/scicomp/</a>.</p>

<h3><a name="_3.8_XML"></a>3.8 XML</h3>

<p>Python provides excellent support for the Extensible Markup Language (XML),
one of the recent hot topics in the computer science world. XML is a format for
structured data interchange and is being widely adopted by many influential
corporations, including Microsoft. Python has a number of validating and
nonvalidating parsers available and a number of tools for working with the
Document Object Model (DOM). There is extensive sample code and an active SIG
mailing list.</p>

<p>Releases of the XML toolkit usually come with a prebuilt Python binary for
Windows. The package is distributed under a license similar to that of Python,
so the latest source code is always available.</p>

<p>Information on Python support for XML and links to general XML resources can
all be found at the Python web site, <a href="http://www.python.org/topics/xml/"
target="_blank">http://www.python.org/topics/xml/</a>.</p>

<h3><a name="_3.9_Conclusion"></a>3.9 Conclusion</h3>

<p>In this chapter, we have attempted to discuss Python on Windows without
showing any Python code! We focused on using Python in the Windows environment
and how Python integrates with the standard Windows tools.</p>

<p>We discussed some extensions you may find useful on Windows. By talking
about only a few, we run the risk of giving the impression that these are the
only Python modules available for Windows, and this would be unfair. There are
many other useful Python extensions, either designed for Windows or that work
perfectly on Windows.</p>

<p>To find the particular module you are after, you should use the facilities
provided at <a href="http://www.python.org/search/" target="_blank">http://www.python.org/search/</a>
to search the main Python web site, other Python-related web sites, and the
main Python newsgroup. </p>

<p class=MsoFootnoteText><a name="_ftn1"></a><a
href="5.htm#_ftnref1" title=""><span
class=MsoFootnoteReference>[1]</span></a> <span style='font-size:7.5pt'>It
should be noted that Python on Windows can also use the PYTHONPATH environment
variable, but by default the value is stored in the registry.</span></p>

<p class=MsoFootnoteText><a name="_ftn2"></a><a
href="5.htm#_ftnref2" title=""><span
class=MsoFootnoteReference>[2]</span></a> <span style='font-size:7.5pt'>Many
standard Python library files are supplied with Unix-style line terminators. <i>notepad</i>
is still one of the few Windows editors unable to cope with files of this
format. For this and other reasons, you shouldn’t use <i>notepad</i> to edit
Python source.</span></p>

<p class=MsoNormal>&nbsp;</p>

<div align=center>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 width="90%"
 style='width:90.0%;background:#ECECD9;border-collapse:collapse;border:none'>
 <tr>
  <td width="33%" style='width:33.0%;border:inset #111111 1.0pt;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><a href="4.htm"><span style='text-decoration:none'><img
  border=0 width=37 height=34 src="leftarrw.gif"></span></a></p>
  </td>
  <td width="33%" style='width:33.0%;border:inset #111111 1.0pt;border-left:
  none;padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><a href="0.htm"><span
  style='font-size:13.5pt'>Table of Contents</span></a></p>
  </td>
  <td width="34%" style='width:34.0%;border:inset #111111 1.0pt;border-left:
  none;padding:.75pt .75pt .75pt .75pt'>
  <p align=right style='text-align:right'><a href="6.htm"><span
  style='text-decoration:none'><img border=0 width=37 height=34
  src="rightarrw.gif"></span></a></p>
  </td>
 </tr>
</table>

</div>

<p class=MsoNormal>&nbsp;</p>

</div>

</body>

</html>
