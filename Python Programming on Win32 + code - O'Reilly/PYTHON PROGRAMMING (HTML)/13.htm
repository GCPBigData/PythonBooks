<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=utf-8">
<meta name=Generator content="Microsoft Word 10 (filtered)">
<title> </title>

<link rel=Stylesheet type="text/css" media=all href="1.css">
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Tahoma;
	panose-1:2 11 6 4 3 5 4 4 2 4;}
@font-face
	{font-family:Verdana;
	panose-1:2 11 6 4 3 5 4 4 2 4;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;}
h1
	{margin-top:1.0in;
	margin-right:0in;
	margin-bottom:.5in;
	margin-left:0in;
	text-align:center;
	page-break-before:always;
	font-size:24.0pt;
	font-weight:bold;}
h2
	{page-break-before:always;
	font-size:18.0pt;
	font-weight:bold;}
h3
	{font-size:13.5pt;
	font-weight:bold;}
h4
	{font-size:12.0pt;
	font-weight:bold;}
h5
	{font-size:10.0pt;
	font-weight:bold;}
p.MsoFootnoteText, li.MsoFootnoteText, div.MsoFootnoteText
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;}
p.MsoTitle, li.MsoTitle, div.MsoTitle
	{font-size:12.0pt;
	font-weight:bold;}
p.MsoBodyText3, li.MsoBodyText3, div.MsoBodyText3
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:0in;
	font-size:8.0pt;}
p.MsoDocumentMap, li.MsoDocumentMap, div.MsoDocumentMap
	{margin:0in;
	margin-bottom:.0001pt;
	background:navy;
	font-size:12.0pt;}
p
	{font-size:12.0pt;}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;}
p.footnote, li.footnote, div.footnote
	{font-size:12.0pt;}
p.monofont, li.monofont, div.monofont
	{font-size:12.0pt;}
p.romanfont, li.romanfont, div.romanfont
	{font-size:12.0pt;}
p.atitle, li.atitle, div.atitle
	{font-size:9.0pt;
	font-weight:bold;}
p.chaptertitle, li.chaptertitle, div.chaptertitle
	{margin-top:0in;
	margin-right:7.5pt;
	margin-bottom:0in;
	margin-left:7.5pt;
	margin-bottom:.0001pt;
	font-size:12.0pt;}
p.sectiontitle, li.sectiontitle, div.sectiontitle
	{margin-top:0in;
	margin-right:15.0pt;
	margin-bottom:0in;
	margin-left:15.0pt;
	margin-bottom:.0001pt;
	font-size:12.0pt;}
p.itable, li.itable, div.itable
	{font-size:12.0pt;}
p.tiny, li.tiny, div.tiny
	{font-size:7.0pt;}
p.multiselect, li.multiselect, div.multiselect
	{font-size:7.5pt;}
p.safnavoff, li.safnavoff, div.safnavoff
	{font-size:8.5pt;}
p.safnavon, li.safnavon, div.safnavon
	{font-size:8.5pt;
	font-weight:bold;}
p.navtopbg, li.navtopbg, div.navtopbg
	{background:#990000;
	font-size:12.0pt;}
p.navleftbg, li.navleftbg, div.navleftbg
	{background:#666666;
	font-size:12.0pt;}
p.navleftbgalt, li.navleftbgalt, div.navleftbgalt
	{background:#666666;
	font-size:12.0pt;}
p.navtitle, li.navtitle, div.navtitle
	{font-size:9.0pt;
	font-weight:bold;}
p.nonavtitle, li.nonavtitle, div.nonavtitle
	{font-size:9.0pt;
	font-weight:bold;}
p.bimodoff, li.bimodoff, div.bimodoff
	{font-size:12.0pt;}
p.bimodon, li.bimodon, div.bimodon
	{font-size:12.0pt;}
p.btblinks, li.btblinks, div.btblinks
	{font-size:8.5pt;}
p.btlinksactive, li.btlinksactive, div.btlinksactive
	{font-size:12.0pt;
	font-weight:bold;}
p.inputtext, li.inputtext, div.inputtext
	{font-size:12.0pt;}
p.inputbutton, li.inputbutton, div.inputbutton
	{font-size:12.0pt;
	font-weight:bold;}
p.endsearch, li.endsearch, div.endsearch
	{font-size:12.0pt;
	font-weight:bold;}
p.dropdown, li.dropdown, div.dropdown
	{font-size:12.0pt;}
p.navtoptoolbg, li.navtoptoolbg, div.navtoptoolbg
	{background:black;
	font-size:12.0pt;}
p.headingbarbg, li.headingbarbg, div.headingbarbg
	{background:#333333;
	font-size:12.0pt;}
p.headingsubbarbg, li.headingsubbarbg, div.headingsubbarbg
	{background:#CCCCCC;
	font-size:12.0pt;}
p.headingbartitle, li.headingbartitle, div.headingbartitle
	{font-size:10.5pt;
	font-weight:bold;}
p.headingsubbartitle, li.headingsubbartitle, div.headingsubbartitle
	{font-size:9.0pt;
	font-weight:bold;}
p.tablestripe, li.tablestripe, div.tablestripe
	{background:#EEEEEE;
	font-size:12.0pt;}
p.pgtitle, li.pgtitle, div.pgtitle
	{font-size:12.0pt;
	font-weight:bold;}
p.buyprint, li.buyprint, div.buyprint
	{font-size:7.5pt;}
p.resulthighlight, li.resulthighlight, div.resulthighlight
	{background:lightblue;
	font-size:12.0pt;}
p.pgsubtitle, li.pgsubtitle, div.pgsubtitle
	{font-size:12.0pt;
	font-weight:bold;}
p.helphead, li.helphead, div.helphead
	{font-size:12.0pt;
	font-weight:bold;}
p.helpsubhead, li.helpsubhead, div.helpsubhead
	{font-size:10.0pt;}
p.helpcaption, li.helpcaption, div.helpcaption
	{font-size:10.0pt;}
p.helptab, li.helptab, div.helptab
	{font-size:10.0pt;}
p.sm, li.sm, div.sm
	{font-size:6.0pt;}
p.gowild, li.gowild, div.gowild
	{font-size:13.5pt;
	font-weight:bold;
	font-style:italic;}
p.getstarted, li.getstarted, div.getstarted
	{font-size:10.0pt;
	font-weight:bold;
	font-style:italic;}
@page Section1
	{size:8.5in 11.0in;
	margin:1.0in 1.25in 1.0in 1.25in;}
div.Section1
	{page:Section1;}
-->
</style>

</head>

<body lang=EN-US link="#990000" vlink=purple>

<div class=Section1>

<div align=center>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 width="90%"
 style='width:90.0%;background:#ECECD9;border-collapse:collapse;border:none'>
 <tr>
  <td width="33%" style='width:33.0%;border:inset #111111 1.0pt;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><a href="12.htm"><span style='text-decoration:none'><img
  border=0 width=37 height=34 src="leftarrw.gif"></span></a></p>
  </td>
  <td width="33%" style='width:33.0%;border:inset #111111 1.0pt;border-left:
  none;padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><a href="0.htm"><span
  style='font-size:13.5pt'>Table of Contents</span></a></p>
  </td>
  <td width="34%" style='width:34.0%;border:inset #111111 1.0pt;border-left:
  none;padding:.75pt .75pt .75pt .75pt'>
  <p align=right style='text-align:right'><a href="14.htm"><span
  style='text-decoration:none'><img border=0 width=37 height=34
  src="rightarrw.gif"></span></a></p>
  </td>
 </tr>
</table>

</div>

<p class=MsoNormal style='margin-bottom:12.0pt'>&nbsp;</p>

<h2><a name="_Chapter_10._Printed_Output"></a>Chapter 10. Printed Output</h2>

<p>We’ve developed an extensible package that lets power users define their own
views of the data. Now they want to print it, and for people who don’t use the
program (i.e., senior management), the quality of the printed output is critical.</p>

<p>There are many different options for printing on Windows. We start by
reviewing some common business needs and output formats. We then go on to look
at three completely different techniques for printing: automating Word, using
Windows graphics functions, and finally direct generation of Portable Document
Format (PDF) files from Python.</p>

<h3><a name="_10.1_Business_Requirements"></a>10.1 Business Requirements</h3>

<p>Doubletalk’s obvious goal is to produce a complete set of management
accounts. These will almost certainly include company logos, repeating page
headers and footers, several different text styles, and charts and tables.</p>

<p>It would be highly desirable to view the output onscreen and keep it in
files. This makes for a faster development cycle than running off to the
printer and means you can email a draft to the marketing department for
approval or email the output to your customers.</p>

<p>Most important, it should be possible for users (sophisticated ones, at
least) to customize the reports. Everyone in business needs custom reports.
Companies who buy large client/server systems often have to invest time and
training in learning to use a report-design tool. Systems that don’t allow
custom reporting either fail to give their customers what they need, or (with
better marketing) generate large revenues for the consulting divisions of their
software houses to do things the customer could have expected for free.</p>

<p>If we can find a general solution that works from Python, the users are automatically
in charge of the system and can write their own report scripts. This is a
compelling selling point for a commercial application.</p>

<h4>10.1.1 Different Document Models</h4>

<p>There are several different document models you might wish to support. They
all end up as ink on paper, but suggest different APIs and tools for the people
writing the reports:</p>

<p class=MsoNormal><i><span style='font-family:Arial;color:#990000'>Graphics
programming model</span></i><span style='font-family:Arial'> </span></p>

<p style='margin-left:.5in'>The report designer writes programs to precisely
position every element on the page.</p>

<p class=MsoNormal style='page-break-after:avoid'><i><span style='font-family:
Arial;color:#990000'>Word-processor model</span></i><span style='font-family:
Arial'> </span></p>

<p style='margin-left:.5in'>Elements flow down the page and onto the next.
There may be some sort of header and footer that can change from section to
section. Tables need to be broken intelligently, with repeating page headers
and footers.</p>

<p class=MsoNormal><i><span style='font-family:Arial;color:#990000'>Spreadsheet
model</span></i><span style='font-family:Arial'> </span></p>

<p style='margin-left:.5in'>A grid underlies the page, and this can produce sophisticated
table effects. However, it starts to cause problems if you want more than one
table on a page with different column structures.</p>

<p class=MsoNormal><i><span style='font-family:Arial;color:#990000'>Database
form model</span></i><span style='font-family:Arial'> </span></p>

<p style='margin-left:.5in'>The same form is repeated many times with varying
data, possibly covering an invoice run, a mailmerge, or bank statements for
customers. Forms can exceed one page and include master-detail records and
group headers and footers.</p>

<p class=MsoNormal><i><span style='font-family:Arial;color:#990000'>Desktop-publishing
model</span></i><span style='font-family:Arial'> </span></p>

<p style='margin-left:.5in'>This is the most sophisticated document model in
common use: the user specifies certain page templates and may have many pages
of a given template. Within pages, there are frames within which objects can
flow, and frames can be linked to successors.</p>

<p>You need to keep your options open; don’t expect all these to be provided,
but look for technologies that can be adapted to a different model for a
different project.</p>

<h4>10.1.2 Methodologies and Lessons from Experience</h4>

<p>We’ve been involved with several different reporting systems over the last
few years, and all have had their shortcomings. It is instructive to run
through some of their lessons.</p>

<p>Project A involved a database of packaging designs, which could be
understood only with diagrams showing the box designs laid out flat and
semifolded. Reporting was left until the last minute because the developers were
not really interested; when time and budget pressures arose, customers got
something very unsatisfactory thrown together with a database reporting tool.
They were told that the tools just did not support the graphics and layout they
really wanted. This situation is all too common.</p>

<p>Project B involved extracting database data to produce 100-page medical
statistical analyses; the reports were examples of a word-processor model and
could include numerous multipage tables with precise formatting. A collection of
scripts assembled chunks of rich text format (RTF) to build the document,
inserting them into Word. It became clear that Python was the right tool to
extract and organize all the data; however, RTF is complex to work with and
isn’t really a page-description language.</p>

<p>Project C was a scientific application that captured and analyzed data from
a device and produced a family of reports, including charts and statistical
tables. The reports needed to be viewed onscreen and printable. They were
written using Windows graphics calls. Previewing accurately is a pain in the
neck to implement at first, but worth it afterwards. It soon became clear that
you could share subroutines to produce all the common elements; thus, one
routine did the customer logo on all pages, and the same table routine could be
used throughout. Changes to a common element would be applied across the whole
family of reports with accuracy. It became clear that writing graphics code was
a powerful approach, well suited to object-oriented development and reuse.</p>

<p>Project D involved a family of database reports produced using a graphic
report writer (similar to the Report function in Access). A team of developers
put these together. Although layout was initially easy, making a global change
to all the reports was a nightmare. Furthermore, it became hard to know if
calculations were done in the database or the report formulae themselves,
leading to maintenance problems. Worst of all, testing involved going directly
to the printer; there was no way to capture the output and email it to a
colleague for scrutiny.</p>

<p>Project E used a dedicated scripting language that could import fixed-width
and delimited text files and that output in PostScript. This was suited to high
volumes of data, allowed code sharing between reports, and generally worked
extremely well. The language used did not allow any kind of object-oriented
programming, however, which made it hard to build higher-level abstractions.</p>

<p>Looking at all these experiences, the ideal solution would seem to have the
following characteristics (apart from being written in Python):</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>The Python script acquires the data from whatever sources it needs
(databases, object servers, flat files) and validates it.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>The Python script uses a library to generate a suitable output format,
preferably with all the right layout capabilities.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>The report library allows users to reuse elements of reports, building
up their own reusable functions and objects over time.</p>

<h4>10.1.3 Output Formats</h4>

<p>Now let’s look at some of the possible output formats and APIs:</p>

<p class=MsoNormal><i><span style='font-family:Arial;color:#990000'>Word
documents</span></i><span style='font-family:Arial'> </span></p>

<p style='margin-left:.5in'>Most Windows desktops run Word, and a free Word
viewer is available. It’s easy to automate Word and pump data into it, with
good control over page appearance. As we will see, you can do a lot of work
with templates, separating the programming from the graphic design. Unlike all
other solutions discussed, Word handles document flow for you. It isn’t at all
portable, but Word documents allow the user to customize the output by hand if
needed.</p>

<p class=MsoNormal style='page-break-after:avoid'><i><span style='font-family:
Arial;color:#990000'>Windows Graphical Device Interface (GDI)</span></i><span
style='font-family:Arial'> </span></p>

<p style='margin-left:.5in'>Windows provides a wide range of graphics functions
that can output to a screen or to a printer. Essentially the same code can be
aimed at both. This needs to be initiated differently for a multipage report as
opposed to a single view on screen. GDI calls involve drawing on the page at
precise locations; there is no concept of document flow.</p>

<p class=MsoNormal><i><span style='font-family:Arial;color:#990000'>PostScript</span></i><span
style='font-family:Arial'> </span></p>

<p style='margin-left:.5in'>PostScript is a page-description language with
advanced capabilities. It is the language of desktop publishing and has defined
an imaging model that most other graphics systems try to follow. PostScript
files can be sent directly to a wide variety of printers and viewed with free
software on most platforms. PostScript is quite readable and easy to generate.
This is a multiplatform solution, but it isn’t commonly used as an output
format on Windows. PostScript can be viewed with GhostView, a popular Open
Source package, or converted to PDF with Adobe’s Distiller product.</p>

<p class=MsoNormal><i><span style='font-family:Arial;color:#990000'>Portable
Document Format (PDF)</span></i><span style='font-family:Arial'> </span></p>

<p style='margin-left:.5in'>PDF is an evolution of PostScript aimed at online
viewing; conceptually, it’s PostScript broken into page-sized chunks, with
compression and various internal optimizations for rapid viewing. Acrobat
Reader is freely and widely available for Windows and other systems, and allows
people to view and print PDF files. PostScript Level 3 allows PDF documents to
be sent direct to PostScript printers. PDF is much more complex than
PostScript, but end users never need to look at the internals.</p>

<p class=MsoNormal><i><span style='font-family:Arial;color:#990000'>Excel
documents</span></i><span style='font-family:Arial'> </span></p>

<p style='margin-left:.5in'>For invoices and other business forms and some
financial reports, Excel offers a natural model. As we’ve seen, data can be
pumped into it fast, and excellent charts can be generated in Excel itself.
Care must be taken over the page size and zoom to get a consistent look across
multipage documents, and there is little to help you with page breaking. Excel
is highly useful if users want to play with the numbers themselves.</p>

<p class=MsoNormal><i><span style='font-family:Arial;color:#990000'>HTML</span></i><span
style='font-family:Arial'> </span></p>

<p style='margin-left:.5in'>HTML is ubiquitous, and there are great tools for
generating it from Python. The latest web browsers do a good job of printing
it. However, it doesn’t let you control page breaking or specify headers and
footers, and there are no guarantees about how a web browser will print a page.
As we will see later in this chapter, there are ways to incorporate HTML into
your reports in other systems, which is an easy way to meet part of our
requirements.</p>

<p class=MsoNormal style='page-break-after:avoid'><i><span style='font-family:
Arial;color:#990000'>SGML and XML</span></i><span style='font-family:Arial'> </span></p>

<p style='margin-left:.5in'>SGML (Standard Generalized Markup Language) is a
large and complex language used for marking up text in the publishing industry.
It is well suited for the layout of a book, but not for precise graphics work.
It has enormous capabilities but is quite specialized, and viewers are not
widely available.</p>

<p style='margin-left:.5in'>XML (Extensible Markup Language) was derived from
SGML and is touted by many as the Next Big Thing on the Web—a possible
successor to HTML and a foundation for electronic commerce. Python offers
superb tools for working with XML data structures. It is a family of languages
rather than a single one and doesn’t necessarily have anything to do with page
layout. The general concept is to describe the data (“this is a new customer
header record”) and not the appearance (“this is 18 point Helvetica Bold”). Our
feeling about XML is that (like Python data structures) it’s a great way to
move data from place to place, but it doesn’t solve the problem of how to
format it.<a name="_ftnref6"></a><a href="#_ftn6"><span class=atitlechar><sup><span
style='font-size:9.0pt'>[1]</span></sup></span></a> However, once we have a
useful Python printing tool, it could be put to work with some kind of
style-sheet language to format and print XML data.</p>

<p>In general, these formats/APIs fall into three camps:</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Windows GDI is a C-level graphics API involving precise drawing on the
page.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Word and Excel are applications you can automate through COM to generate
the right documents. Naturally, they have to be present to create and to view
the documents.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>The others, including PostScript and PDF, are file formats. You can
write pure Python class libraries to generate files in those formats. Like the
Windows API (which borrowed heavily from PostScript), they offer precise
page-layout control.</p>

<p>Let’s begin by automating Microsoft Word. Later in the chapter, we discuss
Windows GDI, PostScript, and PDF, with a view to a unified API for all three.
We haven’t done a full set of management accounts for each, but we take them
far enough that you can figure it out yourself.</p>

<h3><a name="_10.2_Automating_Word"></a>10.2 Automating Word</h3>

<p>As noted previously, Word is an appealing alternative for many reasons. It
has a powerful printing and formatting engine. It’s on a lot of desktops;
indeed it may be a standard throughout your company. A free Word viewer is also
available from Microsoft. Finally, it’s possible to post-process a document
written in Word; you can generate a set of management accounts or a stack of
letters, and users can add annotations as they wish.</p>

<p>As discussed with Excel, there are two options: use Python to take control
of Word, or have Word VB grab data from Python and format it. In <a
href="#_Chapter_9._Integration_with_Excel">Chapter 9</a>, we mentioned some
guidelines for choosing which application was on top. We’ve shown Python
automating Word for the following reasons:</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>There is a good chance that report production would be an automated step
in the middle of the night; people won’t be using Word as an interactive query
engine in the same way as Excel.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Python excels at formatting text and getting data into the right shape.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>The Word document model is easy to automate. We’ll be adding chunks to
the end of a document, and the details can be wrapped easily in reusable Python
code.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Reports change and evolve rapidly. It’s easier to change a generic
Python script than customize a Python COM server with new special-purpose
methods.</p>

<p>However, there’s absolutely no technical barrier to doing it the other way
around, and that may work for you in some circumstances.</p>

<p>As with Excel, make sure you have the Word VB reference installed to
document the object model, and install MakePy<i> </i>support for the Word
object model.</p>

<h4>10.2.1 A Simple Example</h4>

<p>Let’s start with the simplest possible example:</p>

<pre>from win32com.client import Dispatch</pre><pre>MYDIR = 'c:\\data\\project\\oreilly\\examples\\ch12_print'</pre><pre>&nbsp;</pre><pre>def simple():</pre><pre>&nbsp;&nbsp;&nbsp; myWord = Dispatch('Word.Application')</pre><pre>&nbsp;&nbsp;&nbsp; myWord.Visible = 1&nbsp; # comment out for production</pre><pre>&nbsp;&nbsp;&nbsp; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;myDoc = myWord.Documents.Add()</pre><pre>&nbsp;&nbsp;&nbsp; myRange = myDoc.Range(0,0)</pre><pre>&nbsp;&nbsp;&nbsp; myRange.InsertBefore('Hello from Python!')</pre><pre>&nbsp;&nbsp;&nbsp; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;# uncomment these for a full script</pre><pre>&nbsp;&nbsp;&nbsp; #myDoc.SaveAs(MYDIR + '\\python01.doc')</pre><pre>&nbsp;&nbsp;&nbsp; #myDoc.PrintOut()</pre><pre>&nbsp;&nbsp;&nbsp; #myDoc.Close()</pre>

<p>When you execute this function, Word starts, and your message is displayed.
We’ve commented out the lines at the bottom, but you can choose to print, save,
or close the document. It’s fun to arrange the Python console and Word
side-by-side and watch your text appearing, and a great way to learn the Word
object model.</p>

<h4>10.2.2 Using a Template</h4>

<p>You could hand-build a document and automate all the formatting, but that
would be tedious. Far better to use a Word template and just put in what you
need from your Python code. For the next example, we’ve created a template
called <i>Pythonics.dot</i>. This has a fancy header, page numbers, and
borders. It could also contain section headings, a table of contents, standard
text, or whatever you want. Using a template is a huge leap forward in
productivity. <a href="13.htm#_Figure_10.1._A_Word_template">Figure 10.1</a>
shows ours.</p>

<h5 align=center style='text-align:center;page-break-after:avoid'><a
name="_Figure_10.1._A_Word_template"></a>Figure 10.1. A Word template</h5>

<p class=MsoNormal align=center style='text-align:center'><span
style='font-family:Arial'><img border=0 width=502 height=243
src="images\image034.gif" alt="figs/ppw.1001.gif"></span></p>

<p>More important, a template allows you to separate the software development
from the page layout. An artistically challenged developer could provide a
basic template with the required elements, and turn it over to the marketing department
to define the styles and boilerplate text. If she also delivers a Python test
script containing example data, the marketing person can regularly test whether
the program still runs while he is modifying the template.</p>

<p>To create a document based on a template, you need to modify only one line:</p>

<pre>&gt;&gt;&gt; myDoc = myWord.Documents.Add(template=MYDIR + '\\pythonics.dot')</pre>

<p>Note the use of keyword arguments. Many of the Office functions (like <tt><span
style='font-size:10.0pt'>Documents.Add</span></tt>) take literally dozens of
arguments, and entering them every time would be tedious. Fortunately, Python
also supports named arguments. However, you need to watch the case: most Word
arguments have initial capitals.</p>

<h4>10.2.3 A Document Wrapper</h4>

<p>Word offers too many choices for building a document: you can loop over a
document’s contents, search for elements such as words or paragraphs, and
select any portion of the text to work with. We’ll assume you want to build a
document in order from beginning to end.</p>

<p>Let’s start with a Python class to help automate the production of
documents. First we’ll construct an object that has a pointer to a Word
document, then add the desired methods one at a time. The class is called <tt><span
style='font-size:10.0pt'>WordWrap</span></tt> and can be found in the module <i>easyword.py</i>
. Here are some of its methods:</p>

<pre>class WordWrap:</pre><pre>&nbsp;&nbsp;&nbsp; &quot;&quot;&quot;Wrapper around Word 8 documents to make them easy to build.</pre><pre>&nbsp;&nbsp;&nbsp; Has variables for the Applications, Document and Selection; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;most methods add things at the end of the document&quot;&quot;&quot;</pre><pre>&nbsp;&nbsp;&nbsp; def __init__(self, templatefile=None):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.wordApp = Dispatch('Word.Application')</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if templatefile == None:</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.wordDoc = self.wordApp.Documents.Add()</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else:</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.wordDoc = self.wordApp.Documents.Add(Template=templatefile)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#set up the selection</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.wordDoc.Range(0,0).Select()</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.wordSel = self.wordApp.Selection</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #fetch the styles in the document - see below</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.getStyleDictionary()</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;def show(self):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # convenience when developing</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.wordApp.Visible = 1&nbsp; </pre><pre>&nbsp;</pre><pre>&nbsp;&nbsp;&nbsp; def saveAs(self, filename):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.wordDoc.SaveAs(filename)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;def printout(self):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.wordDoc.PrintOut()</pre><pre>&nbsp;</pre><pre>&nbsp;&nbsp;&nbsp; def selectEnd(self):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # ensures insertion point is at the end of the document</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.wordSel.Collapse(0)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 0 is the constant wdCollapseEnd; don't want to depend</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # on makepy support.</pre><pre>&nbsp;</pre><pre>&nbsp;&nbsp;&nbsp; def addText(self, text):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.wordSel.InsertAfter(text)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.selectEnd()</pre>

<p>You work with the <tt><span style='font-size:10.0pt'>Selection</span></tt>
object, which provides several methods for inserting text. When you call <tt><span
style='font-size:10.0pt'>Selection.InsertAfter(<i>text</i>)</span></tt>, the
selection expands to include whatever you add; it also provides a <tt><span
style='font-size:10.0pt'>Collapse</span></tt> method that can take various
parameters; the one you need, <tt><span style='font-size:10.0pt'>wdCollapseEnd</span></tt>
, happens to have a value of zero, and collapses the <tt><span
style='font-size:10.0pt'>Selection</span></tt> to an insertion point at the end
of whatever you’ve just inserted. If you are using MakePy, you can access the
constant by name; since this is the only constant we’ll use in this
application, we looked up the value and used it directly to produce a script
that works on all PythonWin installations.</p>

<h4>10.2.4 Adding Paragraphs and Styles</h4>

<p>You can explicitly format text with precise font names and sizes by
assigning them to the many properties of the <tt><span style='font-size:10.0pt'>Selection</span></tt>
object, but it is less work and a better design to use predefined styles. It’s
far easier to change a style than to adjust 20 different reporting scripts.</p>

<p>The first thing to do is add a paragraph in a named style. Word has
constants for all the standard styles. If you used MakePy to build the support
for Word, you could access the built-in styles like this:</p>

<pre>&gt;&gt;&gt; from win32com.client import constants</pre><pre>&gt;&gt;&gt; mySelection.Style = constants.wdStyleHeading1</pre><pre>&gt;&gt;&gt;</pre>

<p>Note that we set the <tt><span style='font-size:10.0pt'>Style</span></tt>
property of the current <tt><span style='font-size:10.0pt'>Range</span></tt> to
the correct style constant. This doesn’t work if you use dynamic dispatch, or
if you have your own custom template with styles that aren’t built into Word.
However, you can query a document at runtime. The following method gets and
keeps a list of all styles actually present in a document:</p>

<pre>def getStyleList(self):</pre><pre>&nbsp;&nbsp;&nbsp; # returns a dictionary of the styles in a document</pre><pre>&nbsp;&nbsp;&nbsp; self.styles = []</pre><pre>&nbsp;&nbsp;&nbsp; stylecount = self.wordDoc.Styles.Count</pre><pre>&nbsp;&nbsp;&nbsp; for i in range(1, stylecount + 1):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; styleObject = self.wordDoc.Styles(i)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.styles.append(styleObject.NameLocal)</pre>

<p>The <tt><span style='font-size:10.0pt'>Style</span></tt> property of a <tt><span
style='font-size:10.0pt'>Range</span></tt> or <tt><span style='font-size:10.0pt'>Selection</span></tt>
in Word accepts either a constant or a string value, so you might as well use
the names. Here’s a useful method:</p>

<pre>def addStyledPara(self, text, stylename):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if text[-1] &lt;&gt; '\n':</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; text = text + '\n'</pre>

<h5 align=center style='text-align:center'><a
name="_Figure_10.2._Inserting_paragraphs_w"></a>Figure 10.2. Inserting
paragraphs with styles</h5>

<p align=center style='text-align:center'><span style='font-family:Arial'><img
border=0 width=502 height=298 src="images\image035.gif"
alt="figs/ppw.1002.gif"></span></p>

<p>Let’s try:</p>

<pre>&gt;&gt;&gt; import easyword</pre><pre>&gt;&gt;&gt; w = easyword.WordWrap()</pre><pre>&gt;&gt;&gt; w.show()</pre><pre>&gt;&gt;&gt; w.addStyledPara('What I did on Holiday', 'Heading 1')</pre><pre>&gt;&gt;&gt; w.addStyledPara('blah ' * 50, 'Normal')</pre><pre>&gt;&gt;&gt;</pre>

<p>This should give you something that looks like <a
href="#_Figure_10.2._Inserting_paragraphs_w">Figure 10.2</a>.</p>

<p>Our wrapper class and Word’s style features combine to make it easy to build
a document.</p>

<h4>10.2.5 Tables</h4>

<p>Word tables are sophisticated object hierarchies in their own right, and you
can manipulate them to any level of detail. However, there’s also an <tt><span
style='font-size:10.0pt'>AutoFormat</span></tt> option for tables that works in
a similar way to styles. Here’s the full declaration:</p>

<pre>Table.AutoFormat(<tt><i>Format</i></tt>, <tt><i>ApplyBorders</i></tt>, <tt><i>ApplyShading</i></tt>, <tt><i>ApplyFont</i></tt>, <tt><i>ApplyColor</i></tt>,</pre><pre><tt><i>ApplyHeadingRows</i></tt>, <tt><i>ApplyLastRow</i></tt>, <tt><i>ApplyFirstColumn</i></tt>, <tt><i>ApplyLastColumn</i></tt>, <tt><i>AutoFit</i></tt>)</pre>

<p>All you have to do is insert a block of tab-delimited text with the table
contents, and call the method to convert text to a table, then call the table’s
<tt><span style='font-size:10.0pt'>AutoFormat</span></tt> method. Fortunately,
almost all the arguments are optional:</p>

<pre>def addTable(self, table, styleid=None):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp; # Takes a 'list of lists' of data.</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp; # first we format the text.&nbsp; You might want to preformat</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp; # numbers with the right decimal places etc. first.</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp; textlines = []</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp; for row in table:</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; textrow = map(str, row)&nbsp;&nbsp; #convert to strings</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; textline = string.join(textrow, '\t')</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; textlines.append(textline)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp; text = string.join(textlines, '\n')</pre><pre>&nbsp; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# add the text, which remains selected</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp; self.wordSel.InsertAfter(text)</pre><pre>&nbsp; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#convert to a table</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp; wordTable = self.wordSel.ConvertToTable(Separator='\t')</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp; #and format</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp; if styleid:</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wordTable.AutoFormat(Format=styleid)</pre>

<p>Unfortunately, to specify a style, you need to supply a numeric format
constant instead of a name. If you are using MakePy, this is easy; an alternate
approach is to use Word’s VB editor to look up the constants. Be warned: some
constants vary across different language editions of Word.</p>

<p>Tables can be accessed through the <tt><span style='font-size:10.0pt'>Document.Tables</span></tt>
collection.</p>

<h4>10.2.6 Adding a Chart</h4>

<p>Adding a chart proved quite a challenge. There’s a promising-sounding
Microsoft Chart COM library, but it turned out not to allow automation in the
same way as Word and Excel. Finally we decided to just make up an Excel chart,
which is probably easier for users as well. A spreadsheet and chart can be
easily designed by hand, and you can update the numbers, recalculate, and save
using the tools in <a href="12.htm#_Chapter_9._Integration_with_Excel">Chapter
9</a>. However, the problem remained of how to add a new object and position it
correctly within the document. The problem took us several hours to solve and
into some dark and surprising corners of Word’s object model. Since the same
techniques apply to positioning any OLE object or even a bitmap from a file,
it’s worth going over the objects in question.</p>

<p>A little reading of the Word help file turned up the <tt><span
style='font-size:10.0pt'>Shapes</span></tt> collection, which claims to
represent all the nontext objects in the document: OLE objects, WordArt, graphic
files, text boxes, and Word drawing objects. The collection has a number of <tt><span
style='font-size:10.0pt'>Add</span></tt> methods, including one called <tt><span
style='font-size:10.0pt'>AddOLEObject</span></tt> . <tt><span style='font-size:
10.0pt'>AddOLEObject</span></tt> has a multitude of arguments, but allows you
to specify a class and a file; thus <tt><span style='font-size:10.0pt'>Document.Shapes.Add(ClassType='Excel.Chart',FileName='mychart.xls')</span></tt>
inserts the chart somewhere in the document and creates a new <tt><span
style='font-size:10.0pt'>Shape</span></tt> object to refer to it. The <tt><span
style='font-size:10.0pt'>Shapes</span></tt> collection lives somewhere called
the <i>drawing</i> <i>layer</i>, which floats above each page and isn’t part of
the document. The <tt><span style='font-size:10.0pt'>Shape</span></tt> object
has an <tt><span style='font-size:10.0pt'>Anchor</span></tt> property that
should be set to a valid range in the document, and it’s then constrained to
stay on the same page as the first paragraph in that range. You then have to
choose a coordinate system with the <tt><span style='font-size:10.0pt'>RelativeHorizontalPosition</span></tt>
and <tt><span style='font-size:10.0pt'>RelativeVerticalPosition</span></tt>
properties, which say whether the location is measured relative to the current
page, column or paragraph. Finally, you set the <tt><span style='font-size:
10.0pt'>Left</span></tt> and <tt><span style='font-size:10.0pt'>Top</span></tt>
properties to define the location in the given coordinate system.</p>

<p>We managed to write some VBA code to position charts using these objects and
properties, but found the behavior inconsistent. If you’ve ever struggled to
position a screen shot in a document while it jumps around at random, imagine
what it is like doing it in code from another application! With a large shape,
Word would decide that the initial location or page was impossible before you
had finished setting properties and give different behavior from Python and
from VBA.<a name="_ftnref7"></a><a href="#_ftn7"><span class=atitlechar><sup><span
style='font-size:9.0pt'>[2]</span></sup></span></a></p>

<p>Finally we discovered the <tt><span style='font-size:10.0pt'>InlineShapes</span></tt>
collection (not a name you would look for) that filled the bill. An <tt><span
style='font-size:10.0pt'>InlineShape</span></tt> is conceptually part of the
document; put it between two paragraphs, and it stays between them forever. The
arguments to its constructor didn’t work as advertised; the shapes always
seemed to appear at the beginning of the document, but it was possible to cut
and paste them into position. The following code finally did the job:</p>

<pre>def&nbsp; addInlineExcelChart(self, filename, caption='', </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height=216, width=432):</pre><pre>&nbsp;&nbsp;&nbsp; # adds a chart inline within the text, caption below.</pre><pre>&nbsp;&nbsp;&nbsp; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;# add an InlineShape to the InlineShapes collection </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;#- could appear anywhere</pre><pre>&nbsp;&nbsp;&nbsp; shape = self.wordDoc.InlineShapes.AddOLEObject(</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ClassType='Excel.Chart',</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FileName=filename</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )</pre><pre>&nbsp;&nbsp;&nbsp; # set height and width in points</pre><pre>&nbsp;&nbsp;&nbsp; shape.Height = height</pre><pre>&nbsp;&nbsp;&nbsp; shape.Width = width</pre><pre>&nbsp;&nbsp;&nbsp; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;# put it where we want</pre><pre>&nbsp;&nbsp;&nbsp; shape.Range.Cut()</pre><pre>&nbsp;</pre><pre>&nbsp;&nbsp;&nbsp; self.wordSel.InsertAfter('chart will replace this')</pre><pre>&nbsp;&nbsp;&nbsp; self.wordSel.Range.Paste()&nbsp; # goes in selection</pre><pre>&nbsp;&nbsp;&nbsp; self.addStyledPara(caption, 'Normal')</pre>

<p>The same routine can be easily adapted to place bitmaps. If you have a
simpler solution, drop us a line!</p>

<h4>10.2.7 Putting It Together</h4>

<p>Now we can build a set of management accounts. The example applications
include a Word template, an Excel spreadsheet with a prebuilt chart, and a test
routine in <i>easyword.py</i>. Thanks to helper methods, this is simple:</p>

<pre>def test():</pre><pre>&nbsp;&nbsp;&nbsp; outfilename = MYDIR + '\\pythonics_mgt_accounts.doc'</pre><pre>&nbsp;&nbsp;&nbsp; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;w = WordWrap(MYDIR + '\\pythonics.dot')</pre><pre>&nbsp;&nbsp;&nbsp; w.show()&nbsp; # leave on screen for fun</pre><pre>&nbsp;&nbsp;&nbsp; w.addStyledPara('Accounts for April', 'Title')</pre><pre>&nbsp;&nbsp;&nbsp; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;#first some text</pre><pre>&nbsp;&nbsp;&nbsp; w.addStyledPara(&quot;Chairman's Introduction&quot;, 'Heading 1')</pre><pre>&nbsp;&nbsp;&nbsp; w.addStyledPara(randomText(), 'Normal')</pre><pre>&nbsp;&nbsp;&nbsp; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;# now a table sections</pre><pre>&nbsp;&nbsp;&nbsp; w.addStyledPara(&quot;Sales Figures for Year To Date&quot;, 'Heading 1')</pre><pre>&nbsp;&nbsp;&nbsp; data = randomData()</pre><pre>&nbsp;&nbsp;&nbsp; w.addTable(data, 37) # style wdTableStyleProfessional</pre><pre>&nbsp;&nbsp;&nbsp; w.addText('\n\n')</pre><pre>&nbsp;&nbsp;&nbsp; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;# finally a chart, on the first page of a ready-made spreadsheet</pre><pre>&nbsp;&nbsp;&nbsp; w.addStyledPara(&quot;Cash Flow Projections&quot;, 'Heading 1')</pre><pre>&nbsp;&nbsp;&nbsp; w.addInlineExcelChart(MYDIR + '\\wordchart.xls', 'Cash Flow Forecast')</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;w.saveAs(outfilename)</pre><pre>&nbsp;&nbsp;&nbsp; print 'saved in', outfilename</pre>

<p>This runs visibly for fun, but would be much faster if kept off-screen. It
produces the document in <a href="13.htm#_Figure_10.3._The_finished_document">Figure
10.3</a>.</p>

<h4>10.2.8 Inserting HTML and Other Formats</h4>

<p>Word can import and export HTML. The following line inserts an entire file
into the current document:</p>

<pre>&gt;&gt;&gt; wordSelection.InsertFile(MYDIR + '\\tutorial.html')</pre><pre>&gt;&gt;&gt;</pre>

<p>Furthermore, some experiments revealed that you don’t even need a full HTML
document, just tagged text saved with the extension HTML.</p>

<h5 align=center style='text-align:center'><a
name="_Figure_10.3._The_finished_document"></a>Figure 10.3. The finished
document</h5>

<p class=MsoNormal align=center style='text-align:center'><span
style='font-family:Arial'><img border=0 width=502 height=445
src="images\image036.gif" alt="figs/ppw.1003.gif"></span></p>

<p>So if you want an easy way to pump large amounts of text into a Word
document, generate the HTML and insert it. Python has an excellent package, <tt><span
style='font-size:10.0pt'>HTMLgen</span></tt><i>, </i>for generating
sophisticated markup from code. Word can import HTML tables with reasonable
success, and all of the standard HTML styles are marked as styles in Word.</p>

<p>These days there is a need to produce both printed and online versions of
documents. If you write code to generate the HTML, and then import it into a
smart Word template with the right corporate header and footer, you have a
complete solution.</p>

<h4>10.2.9 Using Python COM Objects From Word</h4>

<p>There is another approach for incorporating Word. You can use Python as the
COM server and Word as the client. We discussed the pros and cons of this
approach with Excel at the end of <a
href="12.htm#_Chapter_9._Integration_with_Excel">Chapter 9</a>; the same design
considerations apply.</p>

<p>Using Word as a client, use Visual Basic for Applications to initialize a
Python server and fetch the data. The most natural way to package this is to
build a Word template that includes the code and the desired document elements.
When a new document is created from the template, it connects to the Doubletalk
COM server we built earlier, instructs it to load the data, fetches the tables
of information it needs, and uses VBA code to place the data into the document.
This approach has two advantages:</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>VBA offers nice editing features like drop-down auto-completion, helping
you to learn the Word object model quickly. Debugging is also easier (assuming
you have separately tested your Python server, and the Word object model is
what is giving you trouble).</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>You can safely tie functions in your template to regions of text or
tables in your template without needing to be too generic. Data preparation is
Python’s job; formatting is Word’s.</p>

<h4>10.2.10 The Last Word</h4>

<p>Please note: Word is hard to work with. Even if you plan to write a
controlling program in Python, you should sort the code you need in VBA and
check that it all runs first to save time. The manuals and the product itself
are buggy in places. It is also somewhat unstable during development; if you
make lots of COM calls that cause errors, it tends to crash frequently. Once
the code is correct, it seems to keep working without problems. Some other
Python users have worked with very large documents and reported stability
problems in making thousands of COM calls in a row while creating large
documents.</p>

<p>However, we do expect this situation to improve; Word 8.0 is the first
version with VBA, whereas people have been automating Excel in real-time
systems for years. Furthermore, we expect Word to handle XML in the future,
which will allow more options for pumping in lots of data quickly.</p>

<p>In conclusion, you have the technology to do almost anything with Word. However,
it’s a heavyweight solution. Whether it’s the right format for you depends on
several factors:</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Word documents are the output format you want.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Your users have Word.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Your reports fit a word-processor flow model.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Whether it’s important to protect the integrity of a finished report or
let users tweak it afterwards.</p>

<h3><a name="_10.3_Direct_Output_to_the_Printer_w"></a>10.3 Direct Output to
the Printer with Windows</h3>

<p>The next technique to look at is Windows printing. We start off with a
minimal example, then discuss the principles behind it. Start by typing the
following at a Python console:</p>

<pre>&gt;&gt;&gt; import win32ui</pre><pre>&gt;&gt;&gt; dc = win32ui.CreateDC()</pre><pre>&gt;&gt;&gt; dc.CreatePrinterDC()</pre><pre>&gt;&gt;&gt; dc.StartDoc('My Python Document')</pre><pre>&gt;&gt;&gt;</pre>

<p>At this point, you’ll see a printer icon in the System Tray. Double-click,
and you see <a href="13.htm#_Figure_10.4._The_Windows_print_queu">Figure 10.4</a>.</p>

<h5 align=center style='text-align:center'><a
name="_Figure_10.4._The_Windows_print_queu"></a>Figure 10.4. The Windows print
queue</h5>

<p class=MsoNormal align=center style='text-align:center'><span
style='font-family:Arial'><img border=0 width=502 height=123
src="images\image037.gif" alt="figs/ppw.1004.gif"></span></p>

<p>Now we’ll print a few words and draw a line on the page:</p>

<pre>&gt;&gt;&gt; dc.StartPage()</pre><pre>&gt;&gt;&gt; dc.TextOut(100,100, 'Python Prints!')</pre><pre>&gt;&gt;&gt; dc.MoveTo(100, 102)</pre><pre>(0, 0)</pre><pre>&gt;&gt;&gt; dc.LineTo(200, 102)</pre><pre>&gt;&gt;&gt; dc.EndPage()</pre><pre>&gt;&gt;&gt;</pre>

<p>As soon as you type <tt><span style='font-size:10.0pt'>EndPage</span></tt>,
your page should begin to print on your default printer. The Status column in
the Printer window changes to look like <a
href="#_Figure_10.5._Document_printing,_whi">Figure 10.5</a>.</p>

<h5 align=center style='text-align:center'><a
name="_Figure_10.5._Document_printing,_whi"></a>Figure 10.5. Document printing,
while still being written</h5>

<p class=MsoNormal align=center style='text-align:center'><span
style='font-family:Arial'><img border=0 width=502 height=117
src="images\image038.gif" alt="figs/ppw.1005.gif"></span></p>

<p>Finally, tell Windows you’ve finished printing:</p>

<pre>&gt;&gt;&gt; dc.EndDoc()</pre><pre>&gt;&gt;&gt;</pre>

<p>Hopefully, a few seconds later you will have a page with the words <tt><span
style='font-size:10.0pt'>Python Prints</span></tt> near the top left and a
horizontal line just above it.</p>

<p>If you’ve ever done any Windows graphics programming, this will be familiar.
The variable <tt><span style='font-size:10.0pt'>dc</span></tt> is an instance
of the Python class <tt><span style='font-size:10.0pt'>PyCDC</span></tt> ,
which is a wrapper around a Windows Device Context. The Device Context provides
methods such as <tt><span style='font-size:10.0pt'>MoveTo</span></tt> , <tt><span
style='font-size:10.0pt'>LineTo</span></tt>, and <tt><span style='font-size:
10.0pt'>TextOut</span></tt>. Device Contexts are associated with windows on the
screen as well as with printers; the graphics code is identical, although the
way you start and finish differs: windows don’t have pages, for example.</p>

<p>In <a href="24.htm#_Chapter_20._GUI_Development">Chapter 20</a>, we cover
PythonWin development in some detail, and the example application involves
graphics calls of this kind.</p>

<h4>10.3.1 Choosing a Coordinate System</h4>

<p>There is, however, one significant problem with your printout: the line on
your page is probably rather tiny. The coordinates used were pixels. On the
screen, you typically get about 100 pixels per inch; if you’d written the
previous code for a window, the text would be an inch down from the top left of
the window and about as long as the words. On a typical HPDeskJet printer,
which has a resolution of 300 dots per inch, the line is just a sixth of an
inch long; yet the text is still a sensible size (it will, in fact, be in the
default font for your printer, typically 10-point Courier).</p>

<p>For printed reports, you need precise control of text and graphics; numbers
need to appear in the columns designed for them. There are several ways to get
this. We will use the simplest, and choose a ready-made mapping mode, one of
several coordinate systems Windows offers<i>, </i>based on <i>twips.</i> A twip
is a twentieth of a point; thus there are 1440 twips per inch. Windows can draw
only in integer units, so you need something fairly fine-grained such as twips.
(Windows also provides metric and imperial scales, or lets you define your
own.) In this coordinate system, the point (0, 0) represents the top left
corner of the page, and y increases upwards; so to move down the page, you need
negative values of y.</p>

<p>To set up the scale, you need just one line:</p>

<pre>dc.SetMapMode(win32con.MM_TWIPS)</pre>

<p>To test it, we’ll write a little function to draw a six-inch ruler. If it’s
right, you can call this function after setting the mapping mode and take out a
real ruler and check it. Here’s the ruler function and a revised script:</p>

<pre>import win32ui</pre><pre>import win32con</pre><pre>&nbsp;</pre><pre>INCH = 1440</pre><pre>&nbsp;</pre><pre>def HorizontalRuler(dc, x, y):</pre><pre>&nbsp;&nbsp;&nbsp; # draws a six-inch ruler, if we've got our scaling right!</pre><pre>&nbsp;&nbsp;&nbsp; # horizontal line</pre><pre>&nbsp;&nbsp;&nbsp; dc.MoveTo(x,y)</pre><pre>&nbsp;&nbsp;&nbsp; dc.LineTo(x +&nbsp; (6*INCH), y)</pre><pre>&nbsp;&nbsp;&nbsp; for i in range(7):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dc.MoveTo(x,y)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dc.LineTo(x, y-INCH/2)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x = x + INCH</pre><pre>&nbsp;</pre><pre>def print_it():</pre><pre>&nbsp;&nbsp;&nbsp; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;dc = win32ui.CreateDC()</pre><pre>&nbsp;&nbsp;&nbsp; dc.CreatePrinterDC()&nbsp;&nbsp; # ties it to your default printer</pre><pre>&nbsp;</pre><pre>&nbsp;&nbsp;&nbsp; dc.StartDoc('My Python Document')</pre><pre>&nbsp;&nbsp;&nbsp; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;dc.StartPage()</pre><pre>&nbsp;&nbsp;&nbsp; dc.SetMapMode(win32con.MM_TWIPS)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </pre><pre>&nbsp;</pre><pre>&nbsp;&nbsp; &nbsp;# text - near the top left corner somewhere&nbsp;&nbsp;&nbsp; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;dc.TextOut(INCH,-INCH, 'Hello, World')&nbsp; # 1 inch in, 8 up</pre><pre>&nbsp;&nbsp;&nbsp; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;HorizontalRuler(dc, INCH, - INCH * 1.5)&nbsp;&nbsp;&nbsp; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;dc.EndPage()</pre><pre>&nbsp;&nbsp;&nbsp; dc.EndDoc()</pre><pre>&nbsp;&nbsp;&nbsp; print 'sent to printer'</pre><pre>&nbsp;&nbsp;&nbsp; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;del dc</pre>

<p>We’ve seen how to control precise page layout and also seen a reusable
function that does something to a Windows device context. This is a first step
in building your own graphics library. As everyone who’s ever read a textbook
on object-oriented programming knows, the natural approach is to make a class
hierarchy of objects that can draw on the device context. Having shown you the
basics, we’ll move on, and return to the class library later. </p>

<h3><a name="_10.4_PIDDLE:_A_Python_Graphics_API"></a>10.4 PIDDLE: A Python Graphics
API</h3>

<p>While working on this book, we tried to create a printing system that could
handle multiple formats, including Windows and PDF. At the same time, several
people in the Python newsgroup felt that it was a real pity everyone was using
platform-specific code to draw charts and diagrams, and that it should be
possible to come up with a common API that covered several output formats. A
team of four— Joe Strout, Magnus Hetland, Perry Stoll, and Andy
Robinson—developed a common API during the spring of 1999, and a number of
backends and a test suite are available at press time. This has produced some
powerful printing solutions, which we explore here.</p>

<p>The API is known as Plug-In Drawing, Does Little Else (PIDDLE) and is
available from <a href="http://www.strout.net/python/piddle/" target="_blank">http://www.strout.net/python/piddle/</a>.
The package includes the basic API, test patterns, and as many backends as are
deemed stable. The basic API defines classes to represent fonts and colors, and
a base class called <tt><span style='font-size:10.0pt'>Canvas</span></tt> ,
which exposes several drawing methods. The base canvas doesn’t produce any
output and exists to define an interface; specific backends implement a canvas
to draw on the relevant device or file format.</p>

<p>Let’s quickly run through the main features of the PIDDLE API.</p>

<h4>10.4.1 Available Backends</h4>

<p>At the time of writing, backends are available for PDF, the Python Imaging
Library (which lets you draw into BMPs, JPEGs, and a host of other image
formats—useful for web graphics), OpenGL, Macintosh QuickDraw, PostScript,
Adobe Illustrator, Tkinter, wxPython, and PythonWin. Not all of these implement
all features correctly, but things are evolving rapidly. When you get to <a
href="#_Chapter_20._GUI_Development">Chapter 20</a>, bear in mind that one
Python graphics library can draw to all the GUI toolkits we cover.</p>

<h4>10.4.2 Fonts</h4>

<p>Each platform has a different font mechanism. PIDDLE defines a <tt><span
style='font-size:10.0pt'>Font</span></tt> class to rise above this. A <tt><span
style='font-size:10.0pt'>Font</span></tt> instance has attributes <tt><span
style='font-size:10.0pt'>face</span></tt>, <tt><span style='font-size:10.0pt'>size</span></tt>,
<tt><span style='font-size:10.0pt'>bold</span></tt>, <tt><span
style='font-size:10.0pt'>italic</span></tt>, and <tt><span style='font-size:
10.0pt'>underline</span></tt>. A standard set of font names are provided, and
each backend is responsible for finding the best local equivalent.</p>

<h4>10.4.3 Colors</h4>

<p>Color class instances are created with red, green, and blue levels between
zero and one. The module creates a large number of colors based on the HTML
standard, so the word <tt><span style='font-size:10.0pt'>red</span></tt> may be
used to refer to a ready-made <tt><span style='font-size:10.0pt'>Color</span></tt>
object.</p>

<h4>10.4.4 Coordinate System</h4>

<p>The PostScript default scale of 72 units per inch is used, but with the
origin at the top left of the page and y increasing downwards.</p>

<h4>10.4.5 Canvas Graphics Methods</h4>

<p>The <tt><span style='font-size:10.0pt'>Canvas</span></tt> class provides
drawing methods and overall management functions. The graphics functions
provided (we will skip the arguments) are <tt><span style='font-size:10.0pt'>drawLine</span></tt>,
<tt><span style='font-size:10.0pt'>drawLines</span></tt>, <tt><span
style='font-size:10.0pt'>drawString</span></tt>, <tt><span style='font-size:
10.0pt'>drawCurve</span></tt> (which draws a Bezier curve), <tt><span
style='font-size:10.0pt'>drawRect</span></tt>, <tt><span style='font-size:10.0pt'>drawRoundRect</span></tt>,
<tt><span style='font-size:10.0pt'>drawEllipse</span></tt>, <tt><span
style='font-size:10.0pt'>drawArc</span></tt>, <tt><span style='font-size:10.0pt'>drawPolygon</span></tt>,
and <tt><span style='font-size:10.0pt'>drawFigure</span></tt> (which can manage
an arbitrary sequence of line, arc, and curve segments). Each method accepts
optional line and fill colors and may be used to draw an outline or a filled
shape.</p>

<h4>10.4.6 Canvas Attributes</h4>

<p>At any time the Canvas has a current font, line width, line color, and fill
color. Methods use the defaults unless alternatives are supplied as arguments.
Thus <tt><span style='font-size:10.0pt'>drawLine(10,10,20,20)</span></tt> uses
the current settings; <tt><span style='font-size:10.0pt'>drawLine(10,10,20,20,
width=5,color=silver)</span></tt> does what it says but leaves the current
settings unchanged.</p>

<h4>10.4.7 Text Output</h4>

<p>The <tt><span style='font-size:10.0pt'>drawString</span></tt> method is
extremely versatile. It allows angled text (which forced some people to work
hard at rotating bitmaps for their platforms, but they managed it), control of
color, and printing of blocks of text with embedded newlines. A <tt><span
style='font-size:10.0pt'>stringWidth</span></tt> method allows string widths to
be measured, making it feasible to align and wrap text accurately.</p>

<h4 style='page-break-after:avoid'>10.4.8 Image Support</h4>

<p>PIDDLE can use the Python Imaging Library to handle image data; bitmaps in
many formats can be loaded, and either placed at their natural size or
stretched to fit a desired rectangle.</p>

<h4>10.4.9 Test Framework</h4>

<p>As with all good Python packages, a test framework is provided that runs a
group of standard test patterns against the bundled backends. <a
href="#_Figure_10.6._A_PIDDLE_test_pattern">Figure 10.6</a> shows a standard
test pattern.</p>

<h5 align=center style='text-align:center'><a
name="_Figure_10.6._A_PIDDLE_test_pattern"></a>Figure 10.6. A PIDDLE test
pattern</h5>

<p class=MsoNormal align=center style='text-align:center'><span
style='font-family:Arial'><img border=0 width=502 height=293
src="images\image039.gif" alt="figs/ppw.1006.gif"></span></p>

<h4>10.4.10 Video Recorder</h4>

<p>A special canvas called <tt><span style='font-size:10.0pt'>VCRCanvas</span></tt>
works as a recorder: when you execute graphics commands, it saves them for
replay later. They are saved as text holding executable Python code. This makes
it possible for a specialized graphics package to save a chart in a file, and
for any other canvas to replay that file in the absence of the original
package.</p>

<p>Having discussed the base API, we now tackle two key output formats:
PostScript and PDF. </p>

<h3><a name="_10.5_PostScript"></a>10.5 PostScript</h3>

<p>The PostScript language is the world’s most famous page description
language. It was developed by Adobe Systems in 1985 as a language for printer
drivers and was perhaps the key technology in the desktop publishing
revolution. It consists of commands for describing the printed page, including
both text and graphics. A text file of these commands is sent to a PostScript
printer, which prints them. PostScript has some features other page description
languages lack. For example, a font is a collection of subroutines to draw
arbitrary curves and shapes; there’s no difference in the way text and graphics
are handled. This contrasts with Windows, where you can perform arbitrary
scaling and translation of the lines in a chart, while watching all the labels
stay right where they are in the same point size.<a name="_ftnref8"></a><a
href="#_ftn8"><span class=atitlechar><sup><span style='font-size:9.0pt'>[3]</span></sup></span></a></p>

<p>This section is relevant only if you are aiming at a fairly high-end
printer. However, it’s worth understanding something about PostScript since
it’s the base for PDF, which is relevant to everyone.</p>

<p>PostScript printers used to be quite specialized; however, as power has
increased, more printers are offering PostScript compliance, e.g., the LaserJet
5 series. PostScript printers are the standard for high-volume/high-quality
printers.</p>

<p>PostScript is generally produced by printer drivers or by graphics packages
such as Illustrator, though masochists can do it by hand. PostScript is usually
drawn on the printer. However, the public-domain package, GhostView, is
available for rendering PostScript files on Windows and other platforms.
GhostView lets you print to any printer, doing the best job it can with the
local print technology. It also makes it possible to test Python code for
generating PostScript without having a dedicated printer on hand.</p>

<p>Let’s have a quick look at a chunk of PostScript:</p>

<pre>% Example PostScript file - this is a comment</pre><pre>72 720 moveto</pre><pre>72 72 lineto</pre><pre>/Helvetica findfont 24 scalefont setfont</pre><pre>80 720 moveto</pre><pre>('Hello World') show</pre><pre>showpage</pre>

<p>Comments begin with <tt><span style='font-size:10.0pt'>%</span></tt>. Lines 2
and 3 find a font and specify a size. The coordinate system uses 72 points per
inch and starts at the bottom left of the screen or page; thus, the commands
draw a line one inch from the left of the page, running for most of its height,
and the string “Hello World” near the top left corner.</p>

<p>As you can see, PostScript is fairly readable; it’s thus extremely easy to
build a Python library to spit out chunks of PostScript. Furthermore, this can
be done at very high speed; Python excels at text substitutions. That is what
the <tt><span style='font-size:10.0pt'>piddlePS</span></tt> module does; when
you make a call such as <tt><span style='font-size:10.0pt'>drawLine(10,10,50,100,
width=5)</span></tt>, <tt><span style='font-size:10.0pt'>piddlePS</span></tt>
does some testing to see what needs changing, then substitutes the numbers into
a template string and adds them to an output queue. Here is how it was
implemented:</p>

<pre>def drawLine(self, x1, y1, x2, y2, color=None, width=None):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self._updateLineColor(color)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self._updateLineWidth(width)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if self._currentColor != transparent:</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.code.append('%s %s neg moveto %s %s neg lineto stroke' %</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (x1, y1, x2, y2))</pre>

<p>PostScript offers many capabilities beyond the scope of this chapter.
Specifically, it’s a full-blown language, and you can write subroutines to
align text, wrap paragraphs, or even draw charts. Another key ability is
coordinate transformations; you can write a routine to draw a shape, then
translate, rotate, and scale space to redraw it again elsewhere. The PostScript
imaging model has been used or copied in most vector graphic formats since it
was developed.</p>

<h3><a name="_10.6_Portable_Document_Format"></a>10.6 Portable Document Format</h3>

<p>PDF is a recent evolution of PostScript. Whereas PostScript was intended to
be consumed by printers, PDF is designed for both online viewing and printing.
It allows for features such as clickable links, clickable tables of contents,
and sounds. It is intended as a final form for documents. You could possibly
edit PDF if you had a few months to spare, but it isn’t easy. It also remedies
some basic problems with PostScript. (PostScript contains arbitrary subroutines
that might generate pages in a loop or subject to conditions; so the only way
to look at page 499 of a 500-page document, or even to know that there are 500
pages, is to execute the code and render it all.)</p>

<p>For the average developer, PDF is compelling because the Acrobat Reader is
freely and widely available on almost all platforms. This means you can produce
a document that can be emailed, stored on the Web, downloaded, and printed at
leisure by your users, on almost any platform. Furthermore, all they get is the
document, not any attached spreadsheets or data they shouldn’t, and you can be
confident it won’t be tampered with. For this reason, many companies are
looking at PDF as a format for much of their documentation.</p>

<p>PDF documents are generally created in two ways, both of which involve
buying Adobe Acrobat. This includes PDFWriter, a printer driver that lets you
print any document to a PDF file; and Distiller, which turns PostScript files
into PDF files. These are excellent tools that fulfill many business needs.</p>

<p>PDF is a published specification, and in the last two years, a C library and
a Perl library have been written to generate PDF directly. This was too much of
a challenge to resist, so we have done one in Python, too.</p>

<h4>10.6.1 The Structure of PDF</h4>

<p>Technically, PDF is a complex language. The specification is 400 pages long.
If you don’t want to know the details, skip to the section <a
href="#_10.7_Putting_It_Together:_A_High-Vo">Section 10.7</a>. If you do, it’d
be a good idea to open one of the sample PDF files provided with this chapter;
unlike most you will find on the Web, they are uncompressed and numbered in a
sensible order. We’ve provided a brief roadmap to the PDF format as we feel
that it offers many benefits, and you might want to add your own extensions in
the future.</p>

<p>The outer layer of the PDF format provides overall document structure,
specifying pages, fonts used, and advanced features such as tables of contents,
special effects, and so on. Each page is a separate object and contains a
stream of page-marking operators; basically, highly abbreviated PostScript
commands. The snippet of PostScript you saw earlier would end up like this:</p>

<pre>72 720 m</pre><pre>72 72 l</pre><pre>/F5 24 Tf 42 TL</pre><pre>80 720 Td</pre><pre>('Hello World') Tj</pre>

<p>Unfortunately this code, which can at least be decoded given time and you
know where to look, can be compressed in a binary form and is buried inside an
outer layer that’s quite complex. The outer layer consists of a series of
numbered <i>objects</i> (don’t you love that word?) including pages, outlines,
clickable links, font resources, and many other elements. These are delimited
by the keywords <tt><span style='font-size:10.0pt'>obj</span></tt> and <tt><span
style='font-size:10.0pt'>endobj</span></tt> and numbered within the file.
Here’s a <tt><span style='font-size:10.0pt'>Catalog</span></tt> object, which
sits at the top of PDF’s object model:</p>

<pre>1 0 obj</pre><pre>&lt;&lt;</pre><pre>/Type /Catalog</pre><pre>/Pages 3 0 R</pre><pre>/Outlines 2 0 R</pre><pre>&gt;&gt;</pre>

<p>Every object is a dictionary of keys and values. The <tt><span
style='font-size:10.0pt'>Catalog</span></tt> is at position 1 in the file. It
has a <tt><span style='font-size:10.0pt'>Pages</span></tt> collection, found at
location 3 in the file. The <tt><span style='font-size:10.0pt'>Pages</span></tt>
collection might contain individual <tt><span style='font-size:10.0pt'>Page</span></tt>
objects, or perhaps other <tt><span style='font-size:10.0pt'>Pages</span></tt>
collections with subranges of the document. These form a balanced tree, so that
an application like Acrobat Reader can locate the drawing code for page 3,724
in a 5,000 page document in one second flat.</p>

<p>Once you get to a <tt><span style='font-size:10.0pt'>Page</span></tt>
object, you’ll find a declaration of the resources needed to draw the page,
which includes a list of fonts used and might include graphics function sets to
load into memory and a reference to a <tt><span style='font-size:10.0pt'>Contents</span></tt>
object. A simple page and its associated small <tt><span style='font-size:10.0pt'>Contents</span></tt>
object might look like this:</p>

<pre>20 0 obj</pre><pre>&lt;&lt;</pre><pre>/Type /Page</pre><pre>/Parent 3 0 R</pre><pre>/Resources </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;/Font&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;&lt; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/F1 5 0 R&nbsp;&nbsp;&nbsp; % list of font declarations</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /F2 6 0 R&nbsp;&nbsp;&nbsp; % - font objects are described elsewhere </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/F3 7 0 R&nbsp;&nbsp;&nbsp; % in the file</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /F4 8 0 R </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/F5 9 0 R </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&gt;&gt;</pre><pre>&nbsp;&nbsp;&nbsp; /ProcSet 3 0 R&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; % reference to the sets of Postscript</pre><pre>&nbsp;&nbsp;&nbsp; &gt;&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; % drawing procedures to be loaded for page</pre><pre>/MediaBox [0 0 612 792]&nbsp;&nbsp; % page in points - 8.5x11 US paper</pre><pre>/Contents 21 0 R&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; % reference to next object</pre><pre>&gt;&gt;</pre><pre>endobj</pre><pre>21 0 obj&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; % beginning of contents object</pre><pre>&lt;&lt; /Length 413 &gt;&gt;&nbsp;&nbsp;&nbsp; % predeclare the stream length</pre><pre>stream</pre><pre>% line 2 units wide from 72,72 to 72, 720</pre><pre>q 2 w 72 72 m 72 720 l S Q&nbsp; </pre><pre>&nbsp;</pre><pre>BT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; % begin text mode</pre><pre>/F6 48 Tf 80 672 Td 48 TL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; % set font, position and size (48 pt)</pre><pre>(PDFgen) Tj T*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; % display a line of text</pre><pre>/F5 24 Tf24 TL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; % smaller font</pre><pre>80 640 Td&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; % set text origin </pre><pre>(Automatic PDF Generation) Tj T*&nbsp;&nbsp;&nbsp; % more text</pre><pre>ET&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; % end text mode</pre><pre>endstream</pre><pre>endobj</pre>

<p>Lurking near the bottom, between the <tt><span style='font-size:10.0pt'>stream</span></tt>
and <tt><span style='font-size:10.0pt'>endstream</span></tt> keywords in the <tt><span
style='font-size:10.0pt'>Contents</span></tt> object, you finally get to the
page-marking operators. Note also that the length of the stream of contents
operators is predeclared to allow it to be read quickly.</p>

<p>Finally, typically at the end of the document, you find an index section
that looks like this:</p>

<pre>xref</pre><pre>0 24</pre><pre>0000000000 65535 f</pre><pre>0000000017 00000 n</pre><pre>0000000089 00000 n</pre><pre>0000000141 00000 n</pre><pre>&lt;lines deleted to save space&gt;</pre><pre>0000005167 00000 n</pre><pre>trailer</pre><pre>&lt;&lt; /Size 24 /Root 1 0 R /Info 19 0 R&gt;&gt;</pre><pre>startxref</pre><pre>7164</pre><pre>%%EOF</pre>

<p>When Acrobat Reader opens a file, it looks in the last few bytes for the
keyword <tt><span style='font-size:10.0pt'>trailer</span></tt>. The <tt><span
style='font-size:10.0pt'>trailer</span></tt> object on the following line tells
us that there are 24 objects in the file; that the root is object number 1; and
that information such as the document author and date are available at object
number 19. It then tells us that the cross-reference table is found starting at
byte 7164 in the file. The cross-reference table itself (beginning at <tt><span
style='font-size:10.0pt'>xref</span></tt> in the first line) shows the
positions of the objects; thus object 1, the root, is at byte 17 in the file,
and object 24 is at byte 5167.</p>

<p>This mechanism makes it possible to parse and process PDF documents quickly,
but it made developing a PDF generator harder. With HTML or PostScript, you get
instant gratification each time you output a well-formed chunk of code, and you
can start in a small way; with PDF, you can’t even look at it until you have
correctly indexed the whole thing.</p>

<p>The <i>PDFgen.py</i> module wraps and hides most of this from the user and
constructs a well-formed document. Many advanced features are missing, but the
documents do open cleanly. The module does this by having Python classes that
mirror the PDF ones and by building up a list of objects in memory. When it
writes the file, each returns a text representation of itself for the file, and
the <tt><span style='font-size:10.0pt'>PDFDocument</span></tt> class measures
the length of this. The module is thus able to build a valid index at the end.
What it doesn’t do is the drawing. The module presumes that something else
feeds it a complete contents stream for each page. This is where the PIDDLE
interface comes in.</p>

<p>We won’t go further into the implementation of the outer layer of the PDF
library here. Instead we’ll look at a few details of the current frontend.</p>

<h4>10.6.2 Implementing the Frontend</h4>

<p>Once the PIDDLE API was stable, it was fairly straightforward to implement a
<tt><span style='font-size:10.0pt'>PDFCanvas</span></tt> object to provide a
simple API. Let’s take a quick look at some of the methods of the <tt><span
style='font-size:10.0pt'>PDFCanvas</span></tt> class and how they hook up with
the backend:</p>

<pre>def __init__(self, filename):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Canvas.__init__(self)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.filename = filename</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.code = []&nbsp; # list of strings to join later</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.doc = pdfgen.PDFDocument()</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.pageNumber = 1&nbsp;&nbsp; # keep a count</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # various settings omitted</pre>

<p>When it starts up, the <tt><span style='font-size:10.0pt'>PDFCanvas</span></tt>
instance creates a <tt><span style='font-size:10.0pt'>PDFDocument</span></tt>
instance. This is the class that manages the overall document structure. It
also creates an empty list, <tt><span style='font-size:10.0pt'>self.code</span></tt>,
to hold strings of page-marking operators. The various drawing methods add the
right operators to the list in the same way the PostScript snippets did
earlier. If you compare the methods and output with the PostScript <tt><span
style='font-size:10.0pt'>PSCanvas</span></tt>, it’s easy to see the
correspondence.</p>

<p>When you ask for a new page with the <tt><span style='font-size:10.0pt'>showPage()</span></tt>
method, this happens:</p>

<pre>def showPage(self):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; page = pdfgen.PDFPage()</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; stream = string.join([self.preamble] + self.code, '\n')</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #print stream</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; page.setStream(stream)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.doc.addPage(page)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.pageNumber = self.pageNumber + 1</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.code = []&nbsp;&nbsp;&nbsp; # ready for more...</pre>

<p>First, create a <tt><span style='font-size:10.0pt'>PDFgen</span></tt> object
called <tt><span style='font-size:10.0pt'>PDFPage</span></tt> , which is
responsible for generating the output later. Then make a big string of
page-marking operators by joining a standard preamble (which does some work to
set up coordinate systems, default fonts, and so forth) and the list of
accumulated operators. This is stored in the <tt><span style='font-size:10.0pt'>PDFPage</span></tt>,
which is then added to the <tt><span style='font-size:10.0pt'>PDFDocument</span></tt>.
<tt><span style='font-size:10.0pt'>PDFgen</span></tt> takes care of the rest
when asked to save itself to disk. Finally, the page number is incremented, and
the list of strings is emptied, ready for some more output.</p>

<h3 style='page-break-after:avoid'><a
name="_10.7_Putting_It_Together:_A_High-Vo"></a>10.7 Putting It Together: A
High-Volume Invoicing System</h3>

<p>Rather than repeating the management accounts we did in Word, we’ll discuss
a different situation. Imagine that Pythonics is now doing a large volume of
consulting work and needs to bill customers by the hour on a weekly basis. An
internal database keeps track of who works for how many hours on which project.
At the end of each week, we need to raise correct invoices and simultaneously
enter them into our accounts system. Although starting small, we’d like a
system that will scale up in the future.</p>

<p>We’ve built a tab-delimited text file called <i>invoicing.dat</i> that
contains a list of the fields for each invoice; basically, the customer
details, date, invoice number, number of hours worked, hourly rate, and so on.
In a real application, this data might come from database queries, flat files,
or already be available as an object model in memory. The script to generate
the invoices is 200 lines long and is mostly graphics code; we’ll show some
excerpts. First, the main loop:</p>

<pre>def run():</pre><pre>&nbsp;&nbsp;&nbsp; import os</pre><pre>&nbsp;&nbsp;&nbsp; invoices = acquireData()&nbsp;&nbsp; # parse the data file</pre><pre>&nbsp;&nbsp;&nbsp; print 'loaded data'</pre><pre>&nbsp;&nbsp;&nbsp; for invoice in invoices:</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printInvoice(invoice)</pre><pre>&nbsp;&nbsp;&nbsp; print 'Done'</pre>

<p>We’ll skip the data acquisition. Note also that in a real financial
application, you’d extract transaction objects from your invoice objects and
save them in a <tt><span style='font-size:10.0pt'>BookSet</span></tt> at the
point of printing.</p>

<p>For each invoice, construct a <tt><span style='font-size:10.0pt'>PDFCanvas</span></tt>,
call various drawing subroutines, and save it with an appropriate filename. In
this case, the filename encodes the invoice number and client name:</p>

<pre>def printInvoice(inv):</pre><pre>&nbsp;&nbsp;&nbsp; #first see what to call it</pre><pre>&nbsp;&nbsp;&nbsp; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;filename = 'INVOICE_%d_%s.PDF' % (inv.InvoiceID, inv.ClientID)</pre><pre>&nbsp;&nbsp;&nbsp; canv = pdfcanvas.PDFCanvas(filename)</pre><pre>&nbsp;&nbsp;&nbsp; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;#make up the standard fonts we need and attach to the canvas</pre><pre>&nbsp;&nbsp;&nbsp; canv.standardFont = pdfcanvas.Font(face='Helvetica',size=12)</pre><pre>&nbsp;&nbsp;&nbsp; canv.boldFont = pdfcanvas.Font(face='Helvetica',bold=1, size=12)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;#now all the static repeated elements</pre><pre>&nbsp;&nbsp;&nbsp; drawHeader(canv, filename)</pre><pre>&nbsp;&nbsp;&nbsp; drawOwnAddress(canv)</pre><pre>&nbsp;&nbsp;&nbsp; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;# now all the data elements</pre><pre>&nbsp;&nbsp;&nbsp; drawGrid(canv, inv)</pre><pre>&nbsp;&nbsp;&nbsp; drawCustomerAddress(canv, inv)</pre><pre>&nbsp;&nbsp;&nbsp; drawInvoiceDetails(canv, inv)</pre><pre>&nbsp;&nbsp;&nbsp; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;#save</pre><pre>&nbsp;&nbsp;&nbsp; canv.flush()</pre>

<p>Here’s one of the drawing functions, <tt><span style='font-size:10.0pt'>drawOwnAddress()</span></tt>
. It’s passed the canvas to draw on and the invoice; it does what you’d expect:</p>

<pre>def drawOwnAddress(canv):</pre><pre>&nbsp;&nbsp;&nbsp; address = ['Village Business Centre',</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Thornton Hill',</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Wimbledon Village',</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'London SW19 8PY',</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Tel +44-181-123-4567']</pre><pre>&nbsp;&nbsp;&nbsp; fnt = Font(face='Helvetica',size=12,italic=1)</pre><pre>&nbsp;&nbsp;&nbsp; canv.drawStrings(address, INCH, INCH * 1.5, fnt)</pre>

<p>Other methods draw tables, format the numbers, and output them in the right
places using methods of the <tt><span style='font-size:10.0pt'>PDFCanvas</span></tt>.
Users don’t need to worry about the details of the file format.</p>

<p>In practice, you’d use a standard script handler so that the script could be
run with a double-click. Here it’s run interactively. Running the script generates
one file for each customer, at a rate of several files per second:</p>

<pre>&gt;&gt;&gt; invoicing.run()</pre><pre>loaded data</pre><pre>saved INVOICE_199904001_MEGAWAD.PDF</pre><pre>saved INVOICE_199904002_MEGAWAD.PDF</pre><pre>saved INVOICE_199904003_MEGAWAD.PDF</pre><pre>saved INVOICE_199904004_NOSHCO.PDF</pre><pre>Done</pre><pre>&gt;&gt;&gt;</pre>

<p><a href="13.htm#_Figure_10.7._PDF_invoices_generated">Figure 10.7</a> shows
the output.</p>

<p>Now, let’s look at the benefits of this architecture from a business
perspective:</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>The report took only about two hours to assemble, including data acquisition.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>You have a simple script that can be run with a double-click or
scheduled to go off at night: no need to launch applications manually.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>The output is filed with the correct names in an immutable format. If a
dispute or problem arises in the future, you can instantly find the file and
see exactly what was sent.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>The entries have been made in the accounts system at the same time. It’s
easy to add further steps to the logic, such as emailing invoices to suppliers.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>The system is fast and light; it runs well with tens of thousands of
pages and can be moved from a desktop PC to a Unix server with no
modifications.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>It’s easy to customize. You don’t need a lot of Python, and there is a
simple drawing API. Power users could learn to customize it or write their own
reports easily.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Data can be acquired from anything with Python: files, databases,
spreadsheets, or other Python applications. You aren’t tied to a database
engine.</p>

<h5 align=center style='text-align:center;page-break-after:avoid'><a
name="_Figure_10.7._PDF_invoices_generated"></a>Figure 10.7. PDF invoices generated
from Python</h5>

<p class=MsoNormal align=center style='text-align:center'><span
style='font-family:Arial'><img border=0 width=502 height=364
src="images\image040.gif" alt="figs/ppw.1007.gif"></span></p>

<h4>10.7.1 Advanced Techniques and Possibilities with PDF and PIDDLE</h4>

<p>There are several more techniques and improvements we haven’t added, but
that could be easily accomplished if the need arose. This is Open Source, so if
they sound useful, they probably will be done by somebody by the time you read
this.</p>

<p class=MsoNormal><i><span style='font-family:Arial;color:#990000'>Object-oriented
graphics and page layout API</span></i><span style='font-family:Arial'> </span></p>

<p style='margin-left:.5in'>The PIDDLE team is working on the “next layer up,”
which will hopefully be available by the time this book is printed. This
consists of two ideas. First of all, frames identify regions on the page into
which drawing may take place; users may specify one main frame per page, or as
many as they wish. Second, we create a hierarchy of drawable objects, allowing
a high level of reuse. These objects know their size and can wrap themselves to
fit a frame if needed. They can be “poured into” a frame until it fills. A <tt><span
style='font-size:10.0pt'>Table</span></tt> object might be initialized with an
array of data and draw default table cells by itself; named styles allow quick
and easy formatting of large tables. A <tt><span style='font-size:10.0pt'>Paragraph</span></tt>
object, again tied to a list of styles, allows rapid formatting of text.
Individual PIDDLE drawings can also constitute drawable objects and define
their own coordinate systems for their contents.</p>

<p class=MsoNormal><i><span style='font-family:Arial;color:#990000'>Volume
optimizations</span></i><span style='font-family:Arial'> </span></p>

<p style='margin-left:.5in'>The example script runs at about four pages per
second, a lot faster than any printer, but nowhere near the speed limit. A
large amount of processing is going into generating a text stream, which is
almost the same for each page. You can generate the page once and substitute
variables using Python’s dictionary-substitution facility. This lets you
generate documents as fast as the disk can write; however, it’s applicable only
for simple one-record-per-page forms.</p>

<p style='margin-left:.5in'>PDF provides a similar trick: you can create
something called a PDF form,<i> </i>which is a content stream that can be
reused within a document. The reusable parts of the page can be placed in a
form and stored once, and only the numbers and text that change need to print.
This reduces the size of a huge invoice print run by 90% or more and leads to
faster printing on the right printers.</p>

<p class=MsoNormal><i><span style='font-family:Arial;color:#990000'>Imported
graphics</span></i><span style='font-family:Arial'> </span></p>

<p style='margin-left:.5in'>A large number of graphics packages work with
PostScript. You can design pages or graphic elements in a tool such as Adobe
Illustrator. These elements can be distilled and the PDF page-marking operators
lifted out into a library, with some parsing tools that would be
straightforward to write in Python. This library combines the freedom of visual
design tools with the discipline and speed of report programs.</p>

<h5 align=center style='text-align:center'><a
name="_Figure_10.8._3D_plot_from_the_Graph"></a>Figure 10.8. 3D plot from the
Graphite library</h5>

<p class=MsoNormal align=center style='text-align:center'><span
style='font-family:Arial'><img border=0 width=502 height=214
src="images\image041.gif" alt="figs/ppw.1008.gif"></span></p>

<p class=MsoNormal><i><span style='font-family:Arial;color:#990000'>Onscreen
views</span></i><span style='font-family:Arial'> </span></p>

<p style='margin-left:.5in'>The testing cycle was pretty fast—run a script,
load the document to Acrobat in less than two seconds. However, the PIDDLE API
is not platform-specific. You can use it to provide a printing engine for
graphical applications; the same code that drew charts on the screen using a
Windows or Tkinter backend generates a PDF report for free.</p>

<p class=MsoNormal><i><span style='font-family:Arial;color:#990000'>Plotting</span></i><span
style='font-family:Arial'> </span></p>

<p style='margin-left:.5in'>As discussed earlier, a key motivation for PIDDLE
was to create plotting libraries that were not tied to one backend. The
Graphite package ( <a href="http://www.strout.net/python/graphite/"
target="_blank">www.strout.net/python/graphite/</a> ) was developed alongside
PIDDLE and is already capable of a wide range of plot types. Given Python’s
strong presence in the scientific world, we expect exciting developments here. <a
href="#_Figure_10.8._3D_plot_from_the_Graph">Figure 10.8</a> is a sample from
Graphite.</p>

<p class=MsoNormal><i><span style='font-family:Arial;color:#990000'>Web and
print versions</span></i><span style='font-family:Arial'> </span></p>

<p style='margin-left:.5in'>One key application area is on the Web. Python web
applications can produce both bitmaps and print-ready documents on the fly from
a web server. </p>

<h3><a name="_10.8_Conclusion"></a>10.8 Conclusion</h3>

<p>Python supports many possible solutions for printing. We have looked at
three: automating Word, using Windows graphics calls from PythonWin, and
directly generating PDF documents. The recent evolution of a standard graphics
API for Python with a variety of backends should provide more output formats in
the future. The PDFgen/PIDDLE solution is lightweight (under 50 KB of code and
font data), multiplatform, and scalable to large print runs; it follows the
architecture of many high-volume corporate reporting systems, but with a much
nicer language.</p>

<p>Returning to Doubletalk, our users already had an extensible application
that allowed them to create their own views of the data. They are now in a
position to create their own reports easily with no limits on graphical
capabilities—whether as a back office job in itself, from another application,
or on the Web—and to store electronic copies where they want.</p>

<h3><a name="_10.9_References"></a>10.9 References</h3>

<p><i>Writing Word Macros</i> by Steven Roman (O’Reilly) shows how to use VBA
to automate many tasks in Word.</p>

<p><i>Word 97 Annoyances</i> by Leonhard, Hudspeth, and Lee (O’Reilly) is a
great guide to how Word works and how to live with it.</p>

<p>The Adobe PDF Specification (Version 1.3) is available from <a
href="http://partners.adobe.com/asn/developer/PDFS/TN/PDFSPEC.PDF"
target="_blank">http://partners.adobe.com/asn/developer/PDFS/TN/PDFSPEC.PDF</a>
(5.5MB, 518 pages).</p>

<p>PIDDLE can be found at <a href="http://www.strout.net/python/piddle/"
target="_blank">http://www.strout.net/python/piddle/</a>. Graphite is at <a
href="http://www.strout.net/python/graphite/" target="_blank">http://www.strout.net/python/graphite/</a>.
The PDFgen package (also available in the PIDDLE distribution) is found at <a
href="http://www.reportlab.com/" target="_blank">http://www.reportlab.com/</a>
.</p>

<p class=MsoFootnoteText><a name="_ftn6"></a><a
href="13.htm#_ftnref6" title=""><span
class=MsoFootnoteReference>[1]</span></a> <span style='font-size:7.5pt'>There
is a web standard known as Document Style and Semantics Specification Language (DSSSL)
that provides a standard way to describe documents. There is also a
transformation language based on Scheme that accepts arbitrary XML documents
and applies formatting rules to them. However, this language is limited to a
flow model, and tools are not yet widely available for working with it.</span></p>

<p class=MsoFootnoteText><a name="_ftn7"></a><a
href="13.htm#_ftnref7" title=""><span
class=MsoFootnoteReference>[2]</span></a> <span style='font-size:7.5pt'>We did
get to the bottom of this. Word is badly behaved in its use of two COM variant
types that are used to denote empty and missing arguments. This explained a
number of other obscure COM bugs. The fix is complex, so we’ve stuck with our
simple workaround.</span></p>

<p class=MsoFootnoteText><a name="_ftn8"></a><a
href="13.htm#_ftnref8" title=""><span
class=MsoFootnoteReference>[3]</span></a> <span style='font-size:7.5pt'>Of
course, it is possible to do zoomable views in Windows, but it isn’t easy. NT
is beginning to approach PostScript in this regard with its World Transforms,
but these are not in Windows 95 and thus have not been widely used.</span></p>

<p class=MsoNormal>&nbsp;</p>

<div align=center>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 width="90%"
 style='width:90.0%;background:#ECECD9;border-collapse:collapse;border:none'>
 <tr>
  <td width="33%" style='width:33.0%;border:inset #111111 1.0pt;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><a href="12.htm"><span style='text-decoration:none'><img
  border=0 width=37 height=34 src="leftarrw.gif"></span></a></p>
  </td>
  <td width="33%" style='width:33.0%;border:inset #111111 1.0pt;border-left:
  none;padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><a href="0.htm"><span
  style='font-size:13.5pt'>Table of Contents</span></a></p>
  </td>
  <td width="34%" style='width:34.0%;border:inset #111111 1.0pt;border-left:
  none;padding:.75pt .75pt .75pt .75pt'>
  <p align=right style='text-align:right'><a href="14.htm"><span
  style='text-decoration:none'><img border=0 width=37 height=34
  src="rightarrw.gif"></span></a></p>
  </td>
 </tr>
</table>

</div>

<p class=MsoNormal>&nbsp;</p>

</div>

</body>

</html>
