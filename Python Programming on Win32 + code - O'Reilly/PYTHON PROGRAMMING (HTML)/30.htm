<html><head><meta http-equiv=Content-Type content="text/html; charset=utf-8"><meta name=Generator content="Microsoft Word 10 (filtered)"><link rel="stylesheet" type="text/css" href="1.css"><title></title></head><body lang=EN-US link="#990000" vlink=purple><div align="center"><center><table border="1" style="border-collapse: collapse" bordercolor="#111111" width="90%" bgcolor="#ECECD9"><tr><td width="33%"><a href=29.htm><img border="0" src="leftarrw.gif" width="37" height="34"></a></td><td width="33%"><p align="center"><a href="0.htm"><font size="4">Table of Contents</font></a></td><td width="34%"><p align="right"><a href=31.htm><img border="0" src="rightarrw.gif" width="37" height="34"></a></td></tr></table></center></div><br><br>
<h2><a name="_Appendix_C._The_Python_Database_API"></a>Appendix C. The Python
Database API Version 2.0</h2>

<p>This appendix is a direct reproduction of Version 2.0 of the Python Database
API. The same information can be found at <a
href="http://www.python.org/topics/database/DatabaseAPI-2.0.html"
target="_blank">http://www.python.org/topics/database/DatabaseAPI-2.0.html</a>.</p>

<p>Footnotes are collected as endnotes at the end of the chapter, as in the
online specification.</p>

<h3><a name="_C.1_Python_Database_API_Specificati"></a>C.1 Python Database API
Specification 2.0</h3>

<p>This API has been defined to encourage similarity between the Python modules
that access databases. By doing this, we hope to achieve a consistency leading
to more easily understood modules, code that is generally more portable across
databases, and a broader reach of database connectivity from Python.</p>

<p>The interface specification consists of several sections:</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Module interface</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Connection objects</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Cursor objects</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Type objects and constructors</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Implementation hints</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Major changes from 1.0 to 2.0</p>

<p>Comments and questions about this specification may be directed to the SIG
for Database Interfacing with Python.</p>

<p>For more information on database interfacing with Python and available
packages see the Database Topics Guide on <a href="http://www.python.org"
target="_blank">www.python.org</a>.</p>

<p>This document describes the Python Database API Specification 2.0. The
previous Version 1.0 version is still available as reference. Package writers
are encouraged to use this version of the specification as basis for new
interfaces.</p>

<h3><a name="_C.2_Module_Interface"></a>C.2 Module Interface</h3>

<p>Access to the database is made available through connection objects. The
module must provide the following constructor for these:</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>connect(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>parameters</span></i></tt><span
class=monofont1><span style='color:#990000'>...) </span></span><span
style='font-family:Arial;color:#990000'>&nbsp; </span></p>

<p style='margin-left:.5in'>Constructor for creating a connection to the
database. Returns a <tt><span style='font-size:10.0pt'>Connection</span></tt>
object. It takes a number of parameters that are database dependent.<sup><a
href="#_Note_1">1</a></sup> </p>

<p>These module globals must be defined:</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>apilevel</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>String constant stating the supported DB API level.
Currently only the strings 1.0 and 2.0 are allowed. If not given, a Database
API 1.0 level interface should be assumed.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>threadsafety</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Integer constant stating the level of thread safety
the interface supports. Possible values are:</p>

<p style='margin-left:.5in'>0 = Threads may not share the module.</p>

<p style='margin-left:.5in'>1 = Threads may share the module, but not
connections.</p>

<p style='margin-left:.5in'>2 = Threads may share the module and connections.</p>

<p style='margin-left:.5in'>3 = Threads may share the module, connections, and
cursors.</p>

<p style='margin-left:.5in'>Sharing in this context means that two threads may
use a resource without wrapping it using a mutex semaphore to implement
resource locking. You can’t always make external resources thread-safe by
managing access using a mutex: the resource may rely on global variables or
other external sources that are beyond your control.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>paramstyle</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>String constant stating the type of parameter
marker formatting expected by the interface. Possible values are:<sup><a
href="#_Note_2">2</a></sup> </p>

<p style='margin-left:.5in'><tt><span style='font-size:10.0pt'>qmark</span></tt>
= Question-mark style, e.g., ...<tt><span style='font-size:10.0pt'>WHERE</span></tt>
<tt><span style='font-size:10.0pt'>name=?</span></tt></p>

<p style='margin-left:.5in'><tt><span style='font-size:10.0pt'>numeric</span></tt>
= Numeric, positional style, e.g., ...<tt><span style='font-size:10.0pt'>WHERE</span></tt>
<tt><span style='font-size:10.0pt'>name=:1</span></tt></p>

<p style='margin-left:.5in'><tt><span style='font-size:10.0pt'>named</span></tt>
= Named style, e.g., ...<tt><span style='font-size:10.0pt'>WHERE</span></tt> <tt><span
style='font-size:10.0pt'>name=:name</span></tt></p>

<p style='margin-left:.5in'><tt><span style='font-size:10.0pt'>format</span></tt>
= ANSI C <tt><span style='font-size:10.0pt'>printf</span></tt> format codes,
e.g., ...<tt><span style='font-size:10.0pt'>WHERE</span></tt> <tt><span
style='font-size:10.0pt'>name=%s</span></tt></p>

<p style='margin-left:.5in'><tt><span style='font-size:10.0pt'>pyformat</span></tt>
= Python extended format codes, e.g., ...<tt><span style='font-size:10.0pt'>WHERE</span></tt>
<tt><span style='font-size:10.0pt'>name=%(name)s</span></tt></p>

<p>The module should make all error information available through these
exceptions or subclasses thereof:</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>Warning</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Exception raised for important warnings such as
data truncations while inserting, etc. It must be a subclass of the Python <tt><span
style='font-size:10.0pt'>StandardError</span></tt> (defined in the module
exceptions).</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>Error</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Exception that is the base class of all other error
exceptions. You can use this to catch all errors with one single <tt><span
style='font-size:10.0pt'>except</span></tt> statement. Warnings are not
considered errors and thus you should not use this class as base. It must be a
subclass of the Python <tt><span style='font-size:10.0pt'>StandardError</span></tt>
(defined in the module exceptions).</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>InterfaceError</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Exception raised for errors that are related to the
database interface rather than the database itself. It must be a subclass of <tt><span
style='font-size:10.0pt'>Error</span></tt>.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>DatabaseError</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Exception raised for errors that are related to the
database. It must be a subclass of <tt><span style='font-size:10.0pt'>Error</span></tt>.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>DataError</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Exception raised for errors that are due to
problems with the processed data like division by zero, numeric value out of
range, etc. It must be a subclass of <tt><span style='font-size:10.0pt'>DatabaseError</span></tt>.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>OperationalError</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Exception raised for errors that are related to the
database’s operation and not necessarily under the control of the programmer,
e.g., an unexpected disconnect occurs, the data source name is not found, a
transaction can’t be processed, a memory allocation error occurred during
processing, etc. It must be a subclass of <tt><span style='font-size:10.0pt'>DatabaseError</span></tt>.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>IntegrityError</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Exception raised when the relational integrity of
the database is affected, e.g., a foreign key check fails. It must be a
subclass of <tt><span style='font-size:10.0pt'>DatabaseError</span></tt>.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>InternalError</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Exception raised when the database encounters an
internal error, e.g., the cursor is not valid anymore, the transaction is out
of sync, etc. It must be a subclass of <tt><span style='font-size:10.0pt'>DatabaseError</span></tt>.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>ProgrammingError</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Exception raised for programming errors, e.g.,
table not found or already exists, syntax error in the SQL statement, wrong
number of parameters specified, etc. It must be a subclass of <tt><span
style='font-size:10.0pt'>DatabaseError</span></tt>.</p>

<p class=MsoNormal style='page-break-after:avoid'><span class=monofont1><span
style='color:#990000'>NotSupportedError</span></span><span style='font-family:
Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Exception raised in case a method or database API
was used that is not supported by the database, e.g., requesting a <tt><span
style='font-size:10.0pt'>.rollback()</span></tt> on a connection that doesn’t
support transaction or has transactions turned off. It must be a subclass of <tt><span
style='font-size:10.0pt'>DatabaseError</span></tt>.</p>

<p>This is the exception inheritance layout:</p>

<pre>StandardError</pre><pre>|__Warning</pre><pre>|__Error</pre><pre>   |__InterfaceError</pre><pre>   |__DatabaseError</pre><pre>      |__DataError</pre><pre>      |__OperationalError</pre><pre>      |__IntegrityError</pre><pre>      |__InternalError</pre><pre>      |__ProgrammingError</pre><pre>      |__NotSupportedError</pre>

<p>The values of these exceptions are not defined. They should give the user a
fairly good idea of what went wrong, though.</p>

<h3><a name="_C.3_Connection_Objects"></a>C.3 Connection Objects</h3>

<p><tt><span style='font-size:10.0pt'>Connection</span></tt> objects should
respond to the following methods:</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>close()</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Closes the connection now (rather than whenever <tt><span
style='font-size:10.0pt'>__del_ _</span></tt> is called). The connection is
unusable from this point forward; an <tt><span style='font-size:10.0pt'>Error</span></tt>
(or subclass) exception is raised if any operation is attempted with the
connection. The same applies to all cursor objects trying to use the
connection.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>commit()</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Commits any pending transaction to the database.
Note that if the database supports an auto-commit feature, this must be
initially off. An interface method may be provided to turn it back on.</p>

<p style='margin-left:.5in'>Database modules that don’t support transactions
should implement this method with void functionality.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>rollback()</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>This method is optional since not all databases provide
transaction support.<sup><a href="30.htm#_Note_3">3</a></sup> </p>

<p style='margin-left:.5in'>In case a database does provide transactions, this
method causes the database to roll back to the start of any pending
transaction. Closing a connection without committing the changes first causes an
implicit rollback to be performed.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>cursor()</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Returns a new <tt><span style='font-size:10.0pt'>Cursor</span></tt>
object using the connection. If the database doesn’t provide a direct cursor
concept, the module has to emulate cursors using other means to the extent
needed by this specification.<sup><a href="30.htm#_Note_4">4</a></sup> </p>

<h3><a name="_C.4_Cursor_Objects"></a>C.4 Cursor Objects</h3>

<p>These objects represent a database cursor, which manages the context of a
fetch operation.</p>

<p><tt><span style='font-size:10.0pt'>Cursor</span></tt> objects should respond
to the following methods and attributes:</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>description</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>This read-only attribute is a sequence of
seven-item sequences. Each of these sequences contains information describing
one result column: (<tt><i><span style='font-size:10.0pt'>name</span></i></tt>,
<tt><i><span style='font-size:10.0pt'>type_code</span></i></tt>, <tt><i><span
style='font-size:10.0pt'>display_size</span></i></tt>, <tt><i><span
style='font-size:10.0pt'>internal_size</span></i></tt>, <tt><i><span
style='font-size:10.0pt'>precision</span></i></tt>, <tt><i><span
style='font-size:10.0pt'>scale</span></i></tt>, <tt><i><span style='font-size:
10.0pt'>null_ok</span></i></tt>). This attribute is <tt><span style='font-size:
10.0pt'>None</span></tt> for operations that don’t return rows or if the cursor
has not yet had an operation invoked via the <tt><span style='font-size:10.0pt'>executeXXX()</span></tt>
method.</p>

<p style='margin-left:.5in'>The <tt><span style='font-size:10.0pt'>type_code</span></tt>
can be interpreted by comparing it to the <tt><span style='font-size:10.0pt'>Type</span></tt>
objects specified in the next section.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>rowcount</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>This read-only attribute specifies the number of
rows the last <tt><span style='font-size:10.0pt'>executeXXX()</span></tt> produced
(for DQL statements such as <tt><span style='font-size:10.0pt'>select</span></tt>)
or affected (for DML statements such as <tt><span style='font-size:10.0pt'>update</span></tt>
or <tt><span style='font-size:10.0pt'>insert</span></tt>).</p>

<p style='margin-left:.5in'>The attribute is -1 if no <tt><span
style='font-size:10.0pt'>executeXXX()</span></tt> has been performed on the
cursor or the row count of the last operation can’t be determined by the
interface.<sup><a href="30.htm#_Note_5">5</a></sup> </p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>callproc(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>procname[,parameters]</span></i></tt><span
class=monofont1><span style='color:#990000'>)</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span></p>

<p style='margin-left:.5in'>This method is optional since not all databases
provide stored procedures. <sup><a href="30.htm#_Note_3">3</a></sup></p>

<p style='margin-left:.5in'>Calls a stored database procedure with the given
name. The sequence of parameters must contain one entry for each argument the
procedure expects. The result of the call is returned as modified copy of the
input sequence. Input parameters are left untouched, output and input/output
parameters are replaced with possibly new values.</p>

<p style='margin-left:.5in'>The procedure may also provide a result set as
output. This must then be made available through the standard <tt><span
style='font-size:10.0pt'>fetchXXX()</span></tt> methods.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>close()</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Closes the cursor now (rather than whenever <tt><span
style='font-size:10.0pt'>__del_ _</span></tt> is called). The cursor is
unusable from this point forward; an <tt><span style='font-size:10.0pt'>Error</span></tt>
(or subclass) exception is raised if any operation is attempted with the
cursor.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>execute(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>operation[,parameters]</span></i></tt><span
class=monofont1><span style='color:#990000'>) </span></span><span
style='font-family:Arial;color:#990000'>&nbsp; </span></p>

<p style='margin-left:.5in'>Prepares and executes a database operation (query
or command). Parameters may be provided as sequence or mapping and will be
bound to variables in the operation. Variables are specified in a
database-specific notation (see the module’s <tt><span style='font-size:10.0pt'>paramstyle</span></tt>
attribute for details).<sup><a href="30.htm#_Note_6">6</a></sup> </p>

<p style='margin-left:.5in'>A reference to the operation is retained by the
cursor. If the same operation object is passed in again, the cursor can
optimize its behavior. This is most effective for algorithms where the same
operation is used, but different parameters are bound to it (many times).</p>

<p style='margin-left:.5in'>For maximum efficiency when reusing an operation,
it’s best to use the <tt><span style='font-size:10.0pt'>setinputsizes()</span></tt>
method to specify the parameter types and sizes ahead of time. It’s legal for a
parameter to not match the predefined information; the implementation should
compensate, possibly with a loss of efficiency.</p>

<p style='margin-left:.5in'>The parameters may also be specified as a list of
tuples to, for example, insert multiple rows in a single operation, but this
kind of use is depreciated: <tt><span style='font-size:10.0pt'>executemany()</span></tt>
should be used instead. Return values are not defined.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>executemany(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>operation,seq_of_parameters</span></i></tt><span
class=monofont1><span style='color:#990000'>) </span></span><span
style='font-family:Arial;color:#990000'>&nbsp; </span></p>

<p style='margin-left:.5in'>Prepares a database operation (query or command)
and then executes it against all parameter sequences or mappings found in the
sequence <tt><i><span style='font-size:10.0pt'>seq_of_parameters</span></i></tt>.</p>

<p style='margin-left:.5in'>Modules are free to implement this method using
multiple calls to the <tt><span style='font-size:10.0pt'>execute()</span></tt>
method or by using array operations to have the database process the sequence
as a whole in one call. The same comments as for <tt><span style='font-size:
10.0pt'>execute()</span></tt> also apply accordingly to this method. Return
values aren’t defined.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>fetchone()</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Fetches the next row of a query result set,
returning a single sequence, or <tt><span style='font-size:10.0pt'>None</span></tt>
when no more data is available.<sup><a href="30.htm#_Note_7">7</a></sup> </p>

<p style='margin-left:.5in'>An <tt><span style='font-size:10.0pt'>Error</span></tt>
(or subclass) exception is raised if the previous call to <tt><span
style='font-size:10.0pt'>executeXXX()</span></tt> doesn’t produce any result
set or no call was issued.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>fetchmany(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>[size=cursor.arraysize]</span></i></tt><span
class=monofont1><span style='color:#990000'>) </span></span><span
style='font-family:Arial;color:#990000'>&nbsp; </span></p>

<p style='margin-left:.5in'>Fetches the next set of rows of a query result,
returning a sequence of sequences (e.g., a list of tuples). An empty sequence
is returned when no more rows are available.</p>

<p style='margin-left:.5in'>The number of rows to fetch per call is specified
by the parameter. If it isn’t given, the cursor’s <tt><span style='font-size:
10.0pt'>arraysize</span></tt> determines the number of rows to be fetched. The
method should try to fetch as many rows as indicated by the size parameter. If
this isn’t possible due to the specified number of rows not being available,
fewer rows may be returned.</p>

<p style='margin-left:.5in'>An <tt><span style='font-size:10.0pt'>Error</span></tt>
(or subclass) exception is raised if the previous call to <tt><span
style='font-size:10.0pt'>executeXXX()</span></tt> doesn’t produce any result
set or no call was issued.</p>

<p style='margin-left:.5in'>Note there are performance considerations involved
with the <tt><span style='font-size:10.0pt'>size</span></tt> parameter. For
optimal performance, it’s usually best to use the <tt><span style='font-size:
10.0pt'>arraysize</span></tt> attribute. If the size parameter is used, then
it’s best for it to retain the same value from one <tt><span style='font-size:
10.0pt'>fetchmany()</span></tt> call to the next.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>fetchall()</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Fetches all (remaining) rows of a query result,
returning them as a sequence of sequences (e.g., a list of tuples). The cursor’s
<tt><span style='font-size:10.0pt'>arraysize</span></tt> attribute can affect
the performance of this operation.</p>

<p style='margin-left:.5in'>An <tt><span style='font-size:10.0pt'>Error</span></tt>
(or subclass) exception is raised if the previous call to <tt><span
style='font-size:10.0pt'>executeXXX()</span></tt> doesn’t produce any result
set or no call was issued.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>nextset()</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>This method is optional since not all databases
support multiple result sets.<a
href="http://safari.oreilly.com/main.asp?bookname=pythonwin32&amp;snode=216#ENDNOTE-3"><sup>3</sup></a>
It makes the cursor skip to the next available set, discarding any remaining
rows from the current set. If there are no more sets, the method returns <tt><span
style='font-size:10.0pt'>None</span></tt>. Otherwise, it returns a <tt><span
style='font-size:10.0pt'>true</span></tt> value and subsequent calls to the <tt><span
style='font-size:10.0pt'>fetch</span></tt> methods return rows from the next
result set.</p>

<p style='margin-left:.5in'>An <tt><span style='font-size:10.0pt'>Error</span></tt>
(or subclass) exception is raised if the previous call to <tt><span
style='font-size:10.0pt'>executeXXX()</span></tt> doesn’t produce any result
set or no call was issued.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>arraysize</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>This read/write attribute specifies the number of
rows at a time to fetch with <tt><span style='font-size:10.0pt'>fetchmany()</span></tt>.
It defaults to 1, meaning to fetch a single row at a time.</p>

<p style='margin-left:.5in'>Implementations must observe this value with
respect to the <tt><span style='font-size:10.0pt'>fetchmany()</span></tt>
method but are free to interact with the database a single row at a time. It
may also be used in the implementation of <tt><span style='font-size:10.0pt'>executemany()</span></tt>.</p>

<p class=MsoNormal style='page-break-after:avoid'><span class=monofont1><span
style='color:#990000'>setinputsizes(sizes)</span></span><span style='font-family:
Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>This can be used before a call to <tt><span
style='font-size:10.0pt'>executeXXX()</span></tt> to predefine memory areas for
the operation’s parameters.</p>

<p style='margin-left:.5in'><tt><span style='font-size:10.0pt'>sizes</span></tt>
is specified as a sequence: one item for each input parameter. The item should
be a <tt><span style='font-size:10.0pt'>Type</span></tt> object that
corresponds to the input used, or it should be an integer specifying the
maximum length of a string parameter. If the item is <tt><span
style='font-size:10.0pt'>None</span></tt>, no predefined memory area is
reserved for that column (this is useful to avoid predefined areas for large
inputs).</p>

<p style='margin-left:.5in'>This method is used before the <tt><span
style='font-size:10.0pt'>executeXXX()</span></tt> method is invoked.
Implementations are free to have this method do nothing, and users are free to
not use it.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>setoutputsize(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>size[,column]</span></i></tt><span
class=monofont1><span style='color:#990000'>) </span></span><span
style='font-family:Arial;color:#990000'>&nbsp; </span></p>

<p style='margin-left:.5in'>Sets a column buffer size for fetches of large
columns (e.g., <tt><span style='font-size:10.0pt'>LONG</span></tt>s, <tt><span
style='font-size:10.0pt'>BLOB</span></tt>s, and so on). The column is specified
as an index into the result sequence. Not specifying the column sets the
default size for all large columns in the cursor.</p>

<p style='margin-left:.5in'>This method is used before the <tt><span
style='font-size:10.0pt'>executeXXX()</span></tt> method is invoked.
Implementations are free to have this method do nothing, and users are free to
not use it.</p>

<h3><a name="_C.5_Type_Objects_and_Constructors"></a>C.5 Type Objects and
Constructors</h3>

<p>Many databases need to have the input in a particular format in order to
bind to an operation’s input parameters. For example, if an input is destined
for a <tt><span style='font-size:10.0pt'>DATE</span></tt> column, it must be
bound to the database in a particular string format. Similar problems exist for
“Row ID” columns or large binary items (e.g., <tt><span style='font-size:10.0pt'>BLOB</span></tt>s
or <tt><span style='font-size:10.0pt'>RAW</span></tt> columns). This presents
problems for Python since the parameters to the <tt><span style='font-size:
10.0pt'>executeXXX()</span></tt> method are untyped. When the database module
sees a Python string object, it doesn’t know if it should be bound as a simple <tt><span
style='font-size:10.0pt'>CHAR</span></tt> column, as a raw <tt><span
style='font-size:10.0pt'>BINARY</span></tt> item, or as a <tt><span
style='font-size:10.0pt'>DATE</span></tt>.</p>

<p>To overcome this problem, a module must provide the constructors defined
here to create objects that can hold special values. When passed to the cursor
methods, the module can then detect the proper type of the input parameter and
bind it accordingly.</p>

<p>A <tt><span style='font-size:10.0pt'>cursor</span></tt> object’s description
attribute returns information about each of the result columns of a query. The <tt><span
style='font-size:10.0pt'>type_code</span></tt> must compare equal to one of <tt><span
style='font-size:10.0pt'>type</span></tt> objects defined here. <tt><span
style='font-size:10.0pt'>Type</span></tt> objects may be equal to more than one
type code (e.g., <tt><span style='font-size:10.0pt'>DATETIME</span></tt> could
be equal to the type codes for date, time, and timestamp columns; see the
implementation hints later in this appendix for details).</p>

<p>The module exports the following constructors and singletons:</p>

<p class=MsoNormal style='page-break-after:avoid'><span class=monofont1><span
style='color:#990000'>Date(</span></span><span style='font-family:Arial;
color:#990000'> &nbsp; </span><tt><i><span style='font-size:10.0pt;color:#990000'>year,month,day</span></i></tt><span
class=monofont1><span style='color:#990000'>) </span></span><span
style='font-family:Arial;color:#990000'>&nbsp; </span></p>

<p style='margin-left:.5in'>This function constructs an object holding a <tt><span
style='font-size:10.0pt'>date</span></tt> value.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>Time(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>hour,minute,second</span></i></tt><span
class=monofont1><span style='color:#990000'>) </span></span><span
style='font-family:Arial;color:#990000'>&nbsp; </span></p>

<p style='margin-left:.5in'>This function constructs an object holding a <tt><span
style='font-size:10.0pt'>time</span></tt> value.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>Timestamp(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>year,month,day,hour,minute,second</span></i></tt><span
class=monofont1><span style='color:#990000'>) </span></span><span
style='font-family:Arial;color:#990000'>&nbsp; </span></p>

<p style='margin-left:.5in'>This function constructs an object holding a <tt><span
style='font-size:10.0pt'>timestamp</span></tt> value.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>DateFromTicks(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>ticks</span></i></tt><span
class=monofont1><span style='color:#990000'>) </span></span><span
style='font-family:Arial;color:#990000'>&nbsp; </span></p>

<p style='margin-left:.5in'>This function constructs an object holding a <tt><span
style='font-size:10.0pt'>date</span></tt> value from the given <tt><i><span
style='font-size:10.0pt'>ticks</span></i></tt> value (number of seconds since
the epoch; see the documentation of the standard Python <tt><span
style='font-size:10.0pt'>time</span></tt> module for details).</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>TimeFromTicks(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>ticks</span></i></tt><span
class=monofont1><span style='color:#990000'>) </span></span><span
style='font-family:Arial;color:#990000'>&nbsp; </span></p>

<p style='margin-left:.5in'>This function constructs an object holding a <tt><span
style='font-size:10.0pt'>time</span></tt> value from the given <tt><i><span
style='font-size:10.0pt'>ticks</span></i></tt> value (number of seconds since
the epoch; see the documentation of the standard Python <tt><span
style='font-size:10.0pt'>time</span></tt> module for details).</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>TimestampFromTicks(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>ticks</span></i></tt><span
class=monofont1><span style='color:#990000'>) </span></span><span
style='font-family:Arial;color:#990000'>&nbsp; </span></p>

<p style='margin-left:.5in'>This function constructs an object holding a <tt><span
style='font-size:10.0pt'>timestamp</span></tt> value from the given <tt><i><span
style='font-size:10.0pt'>ticks</span></i></tt> value (number of seconds since
the epoch; see the documentation of the standard Python <tt><span
style='font-size:10.0pt'>time</span></tt> module for details).</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>Binary(</span></span><span
style='font-family:Arial;color:#990000'> &nbsp; </span><tt><i><span
style='font-size:10.0pt;color:#990000'>string</span></i></tt><span
class=monofont1><span style='color:#990000'>) </span></span><span
style='font-family:Arial;color:#990000'>&nbsp; </span></p>

<p style='margin-left:.5in'>This function constructs an object capable of
holding a binary (<tt><span style='font-size:10.0pt'>long</span></tt>) string
value.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>STRING</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>This <tt><span style='font-size:10.0pt'>type</span></tt>
object describes columns in a database that are string-based (e.g., <tt><span
style='font-size:10.0pt'>CHAR</span></tt>).</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>BINARY</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>This <tt><span style='font-size:10.0pt'>type</span></tt>
object describes (<tt><span style='font-size:10.0pt'>long</span></tt>) binary
columns in a database (e.g., <tt><span style='font-size:10.0pt'>LONG</span></tt>,
<tt><span style='font-size:10.0pt'>RAW</span></tt>, <tt><span style='font-size:
10.0pt'>BLOB</span></tt>s).</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>NUMBER</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>This <tt><span style='font-size:10.0pt'>type</span></tt>
object describes numeric columns in a database.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>DATETIME</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>This <tt><span style='font-size:10.0pt'>type</span></tt>
object describes date/time columns in a database.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>ROWID</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>This <tt><span style='font-size:10.0pt'>type</span></tt>
object describes the “Row ID” column in a database.</p>

<p>SQL <tt><span style='font-size:10.0pt'>NULL</span></tt> values are
represented by the Python <tt><span style='font-size:10.0pt'>None</span></tt>
singleton on input and output.</p>

<p>Using Unix ticks for database interfacing can cause troubles because of the
limited date range they cover.</p>

<h4>C.5.1 Implementation Hints</h4>

<p>The preferred object types for the date/time objects are those defined in
the <tt><span style='font-size:10.0pt'>mxDateTime</span></tt> package. It
provides all necessary constructors and methods both at Python and C level.</p>

<p>The preferred object type for <tt><span style='font-size:10.0pt'>binary</span></tt>
objects are the buffer types available in standard Python starting with Version
1.5.2. Please see the Python documentation for details. For information about
the C interface have a look at <i>Include/bufferobject.h</i> and <i>Objects/bufferobject.c</i>
in the Python source distribution.</p>

<p>Here is a sample implementation of the Unix ticks based constructors for
date/time delegating work to the generic constructors:</p>

<pre>import time</pre><pre>def DateFromTicks(ticks):</pre><pre>    return apply(Date,time.localtime(ticks)[:3])</pre><pre>def TimeFromTicks(ticks):</pre><pre>    return apply(Time,time.localtime(ticks)[3:6])</pre><pre>def TimestampFromTicks(ticks):</pre><pre>    return apply(Timestamp,time.localtime(ticks)[:6])</pre>

<p>This Python class allows implementing the above <tt><span style='font-size:
10.0pt'>type</span></tt> objects even though the description type code field
yields multiple values for on <tt><span style='font-size:10.0pt'>type</span></tt>
object:</p>

<pre>class DBAPITypeObject:</pre><pre>    def __init__(self,*values):</pre><pre>    self.values = values</pre><pre>    def __cmp__(self,other):</pre><pre>    if other in self.values:</pre><pre>        return 0</pre><pre>    if other &lt; self.values:</pre><pre>        return 1</pre><pre>    else:</pre><pre>        return -1</pre>

<p>The resulting <tt><span style='font-size:10.0pt'>type</span></tt> object
compares equal to all values passed to the constructor.</p>

<p>Here is a snippet of Python code that implements the exception hierarchy
defined previously:</p>

<pre>import exceptions</pre><pre>&nbsp;</pre><pre>class Error(exceptions.StandardError):</pre><pre>    pass</pre><pre>&nbsp;</pre><pre>class Warning(exceptions.StandardError):</pre><pre>    pass</pre><pre>&nbsp;</pre><pre>class InterfaceError(Error):</pre><pre>    pass</pre><pre>&nbsp;</pre><pre>class DatabaseError(Error):</pre><pre>    pass</pre><pre>&nbsp;</pre><pre>class InternalError(DatabaseError):</pre><pre>    pass</pre><pre>&nbsp;</pre><pre>class OperationalError(DatabaseError):</pre><pre>    pass</pre><pre>&nbsp;</pre><pre>class ProgrammingError(DatabaseError):</pre><pre>    pass</pre><pre>&nbsp;</pre><pre>class IntegrityError(DatabaseError):</pre><pre>    pass</pre><pre>&nbsp;</pre><pre>class DataError(DatabaseError):</pre><pre>    pass</pre><pre>&nbsp;</pre><pre>class NotSupportedError(DatabaseError):</pre><pre>    pass</pre>

<p>In C you can use the <tt><span style='font-size:10.0pt'>PyErr_NewException(<i>fullname</i></span></tt>,
<tt><i><span style='font-size:10.0pt'>base</span></i></tt>, <tt><i><span
style='font-size:10.0pt'>NULL</span></i></tt><tt><span style='font-size:10.0pt'>)</span></tt>
API to create the exception objects. </p>

<h3><a name="_C.6_Major_Changes_from_Version_1.0_"></a>C.6 Major Changes from
Version 1.0 to Version 2.0</h3>

<p>The Python Database API 2.0 introduces a few major changes compared to the
1.0 version. Because some of these changes will cause existing DB API 1.0-based
scripts to break, the major version number was adjusted to reflect this change.
These are the most important changes from 1.0 to 2.0:</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The need for a separate <tt><span style='font-size:10.0pt'>dbi</span></tt>
module was dropped, and the functionality merged into the module interface
itself.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>New constructors and <tt><span style='font-size:10.0pt'>type</span></tt>
objects were added for date/time values, the <tt><span style='font-size:10.0pt'>RAW</span></tt>
<tt><span style='font-size:10.0pt'>type</span></tt> object was renamed to <tt><span
style='font-size:10.0pt'>BINARY</span></tt>. The resulting set should cover all
basic data types commonly found in modern SQL databases.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>New constants (<tt><span style='font-size:10.0pt'>apilevel</span></tt>,
<tt><span style='font-size:10.0pt'>threadlevel</span></tt>, <tt><span
style='font-size:10.0pt'>paramstyle</span></tt>) and methods (<tt><span
style='font-size:10.0pt'>executemany</span></tt>, <tt><span style='font-size:
10.0pt'>nextset</span></tt>) were added to provide better database bindings.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The semantics of <tt><span style='font-size:10.0pt'>.callproc()</span></tt>
needed to call stored procedures are now clearly defined.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The definition of the <tt><span style='font-size:10.0pt'>.execute()</span></tt>
return value changed. Previously, the return value was based on the SQL
statement type (which was hard to correctly implement); it’s undefined now. Use
the more flexible <tt><span style='font-size:10.0pt'>.rowcount</span></tt>
attribute instead. Modules are free to return the old-style return values, but
these are no longer mandated by the specification and should be considered
database interface dependent.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Class-based exceptions were incorporated into the specification.
Module implementors are free to extend the exception layout defined in this
specification by subclassing the defined exception classes.</p>

<h3><a name="_C.7_Open_Issues"></a>C.7 Open Issues</h3>

<p>Although the Version 2.0 specification clarifies a lot of questions that
were left open in the 1.0 version, there are still some remaining issues:</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Define a useful return value for <tt><span style='font-size:10.0pt'>.nextset()</span></tt>
for the case where a new result set is available.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Create a fixed point numeric type for use as loss-less monetary
and decimal interchange format.</p>

<h3><a name="_Endnotes"></a>Endnotes</h3>

<h3><a name="_Note_1"></a>Note 1 </h3>

<p>As a guideline, the connection constructor parameters should be implemented
as keyword parameters for more intuitive use and follow this order of
parameters.</p>

<p class=MsoNormal><tt><span style='font-size:10.0pt'>dsn</span></tt><span
style='font-family:Arial'> = Data source name as string </span></p>

<p class=MsoNormal><tt><span style='font-size:10.0pt'>user</span></tt><span
style='font-family:Arial'> = User name as string (optional) </span></p>

<p class=MsoNormal><tt><span style='font-size:10.0pt'>password</span></tt><span
style='font-family:Arial'> = Password as string (optional) </span></p>

<p class=MsoNormal><tt><span style='font-size:10.0pt'>host</span></tt><span
style='font-family:Arial'> = Hostname (optional) </span></p>

<p class=MsoNormal><tt><span style='font-size:10.0pt'>database</span></tt><span
style='font-family:Arial'> = Database name (optional) </span></p>

<p>For example, a connect could look like this:</p>

<p><tt><span style='font-size:10.0pt'>connect(dsn='myhost:MYDB',user='guido',password='234$¶')</span></tt></p>

<h3><a name="_Note_2"></a>Note 2 </h3>

<p>Module implementors should prefer <tt><span style='font-size:10.0pt'>'numeric'</span></tt>,
<tt><span style='font-size:10.0pt'>'named'</span></tt> or <tt><span
style='font-size:10.0pt'>'pyroformat'</span></tt> over the other formats
because these offer more clarity and flexibility.</p>

<h3><a name="_Note_3"></a>Note 3 </h3>

<p>If the database doesn’t support the functionality required by the method,
the interface should throw an exception in case the method is used.</p>

<p>The preferred approach is to not implement the method and thus have Python
generate an <tt><span style='font-size:10.0pt'>AttributeError</span></tt> in
case the method is requested. This allows the programmer to check for database
capabilities using the standard <tt><span style='font-size:10.0pt'>hasattr()</span></tt>
function.</p>

<p>For some dynamically configured interfaces, it may not be appropriate to
require dynamically making the method available. These interfaces should then
raise a <tt><span style='font-size:10.0pt'>NotSupportedError</span></tt> to
indicate the inability to perform the rollback when the method is invoked.</p>

<h3><a name="_Note_4"></a>Note 4 </h3>

<p>A database interface method may choose to support named cursorsby allowing a
string argument to the method. This feature is not part of the specification,
since it complicates semantics of the <tt><span style='font-size:10.0pt'>.fetchXXX()</span></tt>
methods.</p>

<h3><a name="_Note_5"></a>Note 5 </h3>

<p>The <tt><span style='font-size:10.0pt'>rowcount</span></tt> attribute may be
coded in a way that updates its value dynamically. This can be useful for
databases that return usable <tt><span style='font-size:10.0pt'>rowcount</span></tt>
values only after the first call to a <tt><span style='font-size:10.0pt'>.fetchXXX()</span></tt>
method.</p>

<h3><a name="_Note_6"></a>Note 6 </h3>

<p>The module uses the <tt><span style='font-size:10.0pt'>__getitem__</span></tt>
method of the <tt><span style='font-size:10.0pt'>parameters</span></tt> object
to map either positions (integers) or names (strings) to parameters values.
This allows for both sequences and mappings to be used as input.</p>

<p>The term “bound” refers to the process of binding an input value to a
database execution buffer. In practical terms, this means that the input value
is used directly as a value in the operation. The client should not be required
to “escape” the value so that it can be used; the value should be equal to the
actual database value.</p>

<h3><a name="_Note_7"></a>Note 7 </h3>

<p>Note that the interface may implement row fetching using arrays and other
optimizations. It’s not guaranteed that a call to this method will move only
the associated cursor forward by one row.</p>
<div align="center"><center><table border="1" style="border-collapse: collapse" bordercolor="#111111" width="90%" bgcolor="#ECECD9"><tr><td width="33%"><a href=29.htm><img border="0" src="leftarrw.gif" width="37" height="34"></a></td><td width="33%"><p align="center"><a href="0.htm"><font size="4">Table of Contents</font></a></td><td width="34%"><p align="right"><a href=31.htm><img border="0" src="rightarrw.gif" width="37" height="34"></a></td></tr></table></center></div></body></html>