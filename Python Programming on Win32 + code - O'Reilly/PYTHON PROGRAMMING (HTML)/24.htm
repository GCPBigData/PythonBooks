<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=utf-8">
<meta name=Generator content="Microsoft Word 10 (filtered)">
<title> </title>

<link rel=Stylesheet type="text/css" media=all href="1.css">
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Tahoma;
	panose-1:2 11 6 4 3 5 4 4 2 4;}
@font-face
	{font-family:Verdana;
	panose-1:2 11 6 4 3 5 4 4 2 4;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;}
h1
	{margin-top:1.0in;
	margin-right:0in;
	margin-bottom:.5in;
	margin-left:0in;
	text-align:center;
	page-break-before:always;
	font-size:24.0pt;
	font-weight:bold;}
h2
	{page-break-before:always;
	font-size:18.0pt;
	font-weight:bold;}
h3
	{font-size:13.5pt;
	font-weight:bold;}
h4
	{font-size:12.0pt;
	font-weight:bold;}
h5
	{font-size:10.0pt;
	font-weight:bold;}
p.MsoFootnoteText, li.MsoFootnoteText, div.MsoFootnoteText
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;}
p.MsoTitle, li.MsoTitle, div.MsoTitle
	{font-size:12.0pt;
	font-weight:bold;}
p.MsoBodyText3, li.MsoBodyText3, div.MsoBodyText3
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:0in;
	font-size:8.0pt;}
p.MsoDocumentMap, li.MsoDocumentMap, div.MsoDocumentMap
	{margin:0in;
	margin-bottom:.0001pt;
	background:navy;
	font-size:12.0pt;}
p
	{font-size:12.0pt;}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;}
p.footnote, li.footnote, div.footnote
	{font-size:12.0pt;}
p.monofont, li.monofont, div.monofont
	{font-size:12.0pt;}
p.romanfont, li.romanfont, div.romanfont
	{font-size:12.0pt;}
p.atitle, li.atitle, div.atitle
	{font-size:9.0pt;
	font-weight:bold;}
p.chaptertitle, li.chaptertitle, div.chaptertitle
	{margin-top:0in;
	margin-right:7.5pt;
	margin-bottom:0in;
	margin-left:7.5pt;
	margin-bottom:.0001pt;
	font-size:12.0pt;}
p.sectiontitle, li.sectiontitle, div.sectiontitle
	{margin-top:0in;
	margin-right:15.0pt;
	margin-bottom:0in;
	margin-left:15.0pt;
	margin-bottom:.0001pt;
	font-size:12.0pt;}
p.itable, li.itable, div.itable
	{font-size:12.0pt;}
p.tiny, li.tiny, div.tiny
	{font-size:7.0pt;}
p.multiselect, li.multiselect, div.multiselect
	{font-size:7.5pt;}
p.safnavoff, li.safnavoff, div.safnavoff
	{font-size:8.5pt;}
p.safnavon, li.safnavon, div.safnavon
	{font-size:8.5pt;
	font-weight:bold;}
p.navtopbg, li.navtopbg, div.navtopbg
	{background:#990000;
	font-size:12.0pt;}
p.navleftbg, li.navleftbg, div.navleftbg
	{background:#666666;
	font-size:12.0pt;}
p.navleftbgalt, li.navleftbgalt, div.navleftbgalt
	{background:#666666;
	font-size:12.0pt;}
p.navtitle, li.navtitle, div.navtitle
	{font-size:9.0pt;
	font-weight:bold;}
p.nonavtitle, li.nonavtitle, div.nonavtitle
	{font-size:9.0pt;
	font-weight:bold;}
p.bimodoff, li.bimodoff, div.bimodoff
	{font-size:12.0pt;}
p.bimodon, li.bimodon, div.bimodon
	{font-size:12.0pt;}
p.btblinks, li.btblinks, div.btblinks
	{font-size:8.5pt;}
p.btlinksactive, li.btlinksactive, div.btlinksactive
	{font-size:12.0pt;
	font-weight:bold;}
p.inputtext, li.inputtext, div.inputtext
	{font-size:12.0pt;}
p.inputbutton, li.inputbutton, div.inputbutton
	{font-size:12.0pt;
	font-weight:bold;}
p.endsearch, li.endsearch, div.endsearch
	{font-size:12.0pt;
	font-weight:bold;}
p.dropdown, li.dropdown, div.dropdown
	{font-size:12.0pt;}
p.navtoptoolbg, li.navtoptoolbg, div.navtoptoolbg
	{background:black;
	font-size:12.0pt;}
p.headingbarbg, li.headingbarbg, div.headingbarbg
	{background:#333333;
	font-size:12.0pt;}
p.headingsubbarbg, li.headingsubbarbg, div.headingsubbarbg
	{background:#CCCCCC;
	font-size:12.0pt;}
p.headingbartitle, li.headingbartitle, div.headingbartitle
	{font-size:10.5pt;
	font-weight:bold;}
p.headingsubbartitle, li.headingsubbartitle, div.headingsubbartitle
	{font-size:9.0pt;
	font-weight:bold;}
p.tablestripe, li.tablestripe, div.tablestripe
	{background:#EEEEEE;
	font-size:12.0pt;}
p.pgtitle, li.pgtitle, div.pgtitle
	{font-size:12.0pt;
	font-weight:bold;}
p.buyprint, li.buyprint, div.buyprint
	{font-size:7.5pt;}
p.resulthighlight, li.resulthighlight, div.resulthighlight
	{background:lightblue;
	font-size:12.0pt;}
p.pgsubtitle, li.pgsubtitle, div.pgsubtitle
	{font-size:12.0pt;
	font-weight:bold;}
p.helphead, li.helphead, div.helphead
	{font-size:12.0pt;
	font-weight:bold;}
p.helpsubhead, li.helpsubhead, div.helpsubhead
	{font-size:10.0pt;}
p.helpcaption, li.helpcaption, div.helpcaption
	{font-size:10.0pt;}
p.helptab, li.helptab, div.helptab
	{font-size:10.0pt;}
p.sm, li.sm, div.sm
	{font-size:6.0pt;}
p.gowild, li.gowild, div.gowild
	{font-size:13.5pt;
	font-weight:bold;
	font-style:italic;}
p.getstarted, li.getstarted, div.getstarted
	{font-size:10.0pt;
	font-weight:bold;
	font-style:italic;}
@page Section1
	{size:8.5in 11.0in;
	margin:1.0in 1.25in 1.0in 1.25in;}
div.Section1
	{page:Section1;}
-->
</style>

</head>

<body lang=EN-US link="#990000" vlink=purple>

<div class=Section1>

<div align=center>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 width="90%"
 style='width:90.0%;background:#ECECD9;border-collapse:collapse;border:none'>
 <tr>
  <td width="33%" style='width:33.0%;border:inset #111111 1.0pt;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><a href="23.htm"><span style='text-decoration:none'><img
  border=0 width=37 height=34 src="leftarrw.gif"></span></a></p>
  </td>
  <td width="33%" style='width:33.0%;border:inset #111111 1.0pt;border-left:
  none;padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><a href="0.htm"><span
  style='font-size:13.5pt'>Table of Contents</span></a></p>
  </td>
  <td width="34%" style='width:34.0%;border:inset #111111 1.0pt;border-left:
  none;padding:.75pt .75pt .75pt .75pt'>
  <p align=right style='text-align:right'><a href="25.htm"><span
  style='text-decoration:none'><img border=0 width=37 height=34
  src="rightarrw.gif"></span></a></p>
  </td>
 </tr>
</table>

</div>

<h2><a name="_Chapter_20._GUI_Development"></a>Chapter 20. GUI Development</h2>

<p>In this chapter, we examine the various options for developing graphical
user interfaces (GUIs) in Python.</p>

<p>We will look in some detail at three of the GUI toolkits that operate on the
Windows platform: Tkinter, PythonWin, and wxPython. Each of these GUI toolkits
provide a huge range of facilities for creating user interfaces, and to
completely cover any of these toolkits is beyond the scope of this single
chapter. Each framework would need its own book to do it justice.</p>

<p>Our intent in this chapter is to give you a feel for each of these GUI
frameworks, so you can understand the basic model they use and the problems
they were designed to address. We take a brief tour of each of these toolkits,
describing their particular model and providing sample code along the way.
Armed with this information, you can make an informed decision about which
toolkit to use in which situation, have a basic understanding of how your
application will look, and where it will run when finished.</p>

<p>The authors need to express their gratitude to Gary Herron for the Tkinter
section, and Robin Dunn for the wxPython section. Their information helped us
complete this chapter.</p>

<h3><a name="_20.1_Tkinter"></a>20.1 Tkinter</h3>

<p><i>Tkinter</i> is the Python interface to the Tk GUI toolkit current
maintained by Scriptics (<a href="http://www.scriptics.com" target="_blank">http://www.scriptics.com</a>).
Tkinter has become the de facto standard GUI toolkit for Python due mainly to
its cross-platform capabilities; it presents a powerful and adaptable GUI model
across the major Python platforms, including Windows 95/98/NT, the Macintosh,
and most Unix implementations and Linux distributions.</p>

<p>This section gives a short description of the capabilities of Tkinter, and
provides a whirlwind tour of the more important aspects of the Tkinter
framework. To effectively use Tkinter, you need a more thorough description
than is provided for here. Fredrik Lundh has made an excellent introduction to
Tkinter programming available at <a href="http://www.pythonware.com/library.htm"
target="_blank">http://www.pythonware.com/library.htm</a>, and at time of
printing a Tkinter book by Fredrik has just been announced, so may be available
by the time you read this. For more advanced uses of Tkinter, you may need to
refer directly to the Tk reference manual, available from the Scriptics site.</p>

<p>Two Python applications, tkBrowser and tkDemo, accompany this section.
TkBrowser is a Doubletalk application, providing several views and some small
editing capabilities of Doubletalk <tt><span style='font-size:10.0pt'>BookSet</span></tt>s;
TkDemo demonstrates a simple use of the core Tk user interface elements. Both
applications are too large to include in their entirety, so where relevant, we
include snippets.</p>

<h4>20.1.1 Terminology</h4>

<p>There’s some new terminology with Tkinter, defined here for clarity:</p>

<p class=MsoNormal><i><span style='font-family:Arial;color:#990000'>Tk</span></i><span
style='font-family:Arial'> </span></p>

<p style='margin-left:.5in'>A GUI toolkit provided as a library of C routines.
This library manages and manipulates the windows and handles the GUI events and
user interaction.</p>

<p class=MsoNormal><i><span style='font-family:Arial;color:#990000'>Tkinter</span></i><span
style='font-family:Arial'> </span></p>

<p style='margin-left:.5in'>The Python Tk interface. A Python module that
provides a collection of Python classes and methods for accessing the Tk
toolkit from within Python.</p>

<p class=MsoNormal><i><span style='font-family:Arial;color:#990000'>Tcl</span></i><span
style='font-family:Arial'> </span></p>

<p style='margin-left:.5in'>The (mostly hidden) language used by Tk and, hence,
used by Tkinter to communicate with the Tk toolkit.</p>

<p class=MsoNormal><i><span style='font-family:Arial;color:#990000'>Widget</span></i><span
style='font-family:Arial'> </span></p>

<p style='margin-left:.5in'>A user interface element, such as a text box, combo
box, or top-level window. On Windows, the common terminology is <i>control</i>
or <i>window</i>.</p>

<h4>20.1.2 Pros and Cons of Tkinter</h4>

<p>Before we launch into Tkinter programming, a brief discussion of the pros
and cons of Tkinter will help you decide if Tkinter may be the correct GUI
toolkit for your application. The following are often given as advantages of
Tkinter:</p>

<p class=MsoNormal><i><span style='font-family:Arial;color:#990000'>Brevity</span></i><span
style='font-family:Arial'> </span></p>

<p style='margin-left:.5in'>Python programs using Tkinter can be very brief,
partly because of the power of Python, but also due to Tk. In particular,
reasonable default values are defined for many options used in creating a
widget, and packing it (i.e., placing and displaying).</p>

<p class=MsoNormal><i><span style='font-family:Arial;color:#990000'>Cross
platform</span></i><span style='font-family:Arial'> </span></p>

<p style='margin-left:.5in'>Tk provides widgets on Windows, Macs, and most Unix
implementations with very little platform-specific dependence. Some newer GUI
frameworks are achieving a degree of platform independence, but it will be some
time before they match Tk’s in this respect.</p>

<p class=MsoNormal><i><span style='font-family:Arial;color:#990000'>Maturity</span></i><span
style='font-family:Arial'> </span></p>

<p style='margin-left:.5in'>First released in 1990, the core is well developed
and stable.</p>

<p class=MsoNormal style='page-break-after:avoid'><i><span style='font-family:
Arial;color:#990000'>Extensibility</span></i><span style='font-family:Arial'> </span></p>

<p style='margin-left:.5in'>Many extensions of Tk exist, and more are being
frequently distributed on the Web. Any extension is immediately accessible from
Tkinter, if not through an extension to Tkinter, than at least through
Tkinter’s access to the Tcl language.</p>

<p>To balance things, here’s a list of what’s often mention as weaknesses in
Tkinter:</p>

<p class=MsoNormal><i><span style='font-family:Arial;color:#990000'>Speed</span></i><span
style='font-family:Arial'> </span></p>

<p style='margin-left:.5in'>There is some concern with the speed of Tkinter.
Most calls to Tkinter are formatted as a Tcl command (a string) and interpreted
by Tcl from where the actual Tk calls are made. This theoretical slowdown
caused by the successive execution of two interpreted languages is rarely seen
in practice and most real-world applications spend little time communicating
between the various levels of Python, Tcl, and Tk.</p>

<p class=MsoNormal><i><span style='font-family:Arial;color:#990000'>Tcl</span></i><span
style='font-family:Arial'> </span></p>

<p style='margin-left:.5in'>Python purists often balk at the need to install
another (and to some, a rival) scripting language in order to perform GUI
tasks. Consequently, there is periodic interest in removing the need for Tcl by
using Tk’s C-language API directly, although no such attempt has ever
succeeded.</p>

<p class=MsoNormal><i><span style='font-family:Arial;color:#990000'>Tk lacks
modern widgets</span></i><span style='font-family:Arial'> </span></p>

<p style='margin-left:.5in'>It’s acknowledged that Tk presents a small basic
set of widgets and lacks a collection of modern fancy widgets. For instance, Tk
lacks paned windows, tabbed windows, progress meter widgets, and tree hierarchy
widgets. However, the power and flexibility of Tk is such that you can easily
construct new widgets from a collection of basic widgets. This fits in
especially well with the object-oriented nature of Python.</p>

<p class=MsoNormal><i><span style='font-family:Arial;color:#990000'>Native look
and feel</span></i><span style='font-family:Arial'> </span></p>

<p style='margin-left:.5in'>One common source of complaints is that Tkinter
applications on Windows don’t look like native Windows applications. As we
shall see, the current version of Tkinter provides an interface that should be
acceptable to almost everyone except the Microsoft marketing department, and we
can expect later versions of Tkinter to be virtually indistinguishable.</p>

<p>Although many individuals could (and no doubt will) argue with some
individual points on this list, it tends to reflects the general consensus
amongst the Python community. Use this only as a guide to assist you in your
decision-making process.</p>

<h4 style='page-break-after:avoid'>20.1.3 Running GUI Applications</h4>

<p>Tkinter applications are normal Python scripts, but there are a couple of
complications worth knowing about when running graphical applications under
Windows. These were discussed in <a href="5.htm#_Chapter_3._Python_on_Windows">Chapter
3</a>, but are important enough to reiterate here; what we say in this section
applies equally to wxPython later in this chapter.</p>

<p>The standard <i>Python.exe</i> that comes with Python is known as a <i>console</i>
<i>application</i> (this means it has been built to interact with a Windows
console, otherwise known as a DOS box or command prompt). Although you can
execute your Tkinter programs using <i>Python.exe</i>, your program will always
be associated with a Windows console. It works just fine, but has the following
side effects:</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>If you execute <i>Python.exe</i> from Windows Explorer, a new empty
console window is created; then the Tkinter windows are created.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>If you execute a Tkinter application under <i>Python.exe</i> from a
command prompt, the command prompt doesn’t return until the Tkinter application
has finished. This will be a surprise for many users, who expect that executing
a GUI program returns the command prompt immediately.</p>

<p>To get around this problem, Python comes with a special GUI version called <i>Pythonw.exe</i>
. This is almost identical to the standard <i>Python.exe</i>, except it’s not a
console program, so doesn’t suffer the problems described previously.</p>

<p>There are two drawbacks to this approach. The first is that <i>.py</i> files
are automatically associated with <i>Python.exe</i>. As we saw in <a
href="http://safari.oreilly.com/main.asp?bookname=pythonwin32&amp;cnode=24">Chapter
3</a>, this makes it simple to execute Python programs, but does present a
problem when you want to use <i>Pythonw.exe</i>. To solve this problem, Python
automatically associates the <i>.pyw </i>extension with <i>Pythonw.exe </i>;
thus, you can give GUI Python applications a <i>.pyw</i> extension, and
automatically execute them from Windows Explorer, the command prompt, and so
forth.</p>

<p>The second drawback is that because <i>Pythonw.exe</i> has no console, any
tracebacks printed by Python aren’t typically seen. Although Python prints the
traceback normally, the lack of a console means it has nowhere useful to go. To
get around this problem, you may like to develop your application using <i>Python.exe
</i>(where the console is an advantage for debugging) but run the final version
using <i>Pythonw.exe</i>.</p>

<h5>20.1.3.1 &quot;Hello World&quot;</h5>

<p>The easiest way to get a feel for Tkinter is with the ever popular “Hello
World!” example. The result of this little program is shown in <a
href="#_Figure_20.1._Tkinter's_">Figure 20.1</a>.</p>

<pre>from sys import exit</pre><pre>from Tkinter import *</pre><pre>root = Tk() </pre><pre>Button(root, text='Hello World!', command=exit).pack() </pre><pre>root.mainloop()</pre>

<h5 align=center style='text-align:center'><a
name="_Figure_20.1._Tkinter's_&quot;Hello_World"></a>Figure 20.1. Tkinter's
&quot;Hello World&quot;</h5>

<p class=MsoNormal align=center style='text-align:center'><span
style='font-family:Arial'><img border=0 width=502 height=68
src="images\image063.gif" alt="figs/ppw.2001.gif"></span></p>

<p>As you can see, apart from the <tt><span style='font-size:10.0pt'>import</span></tt>
statements, there are only three lines of interest. The <tt><span
style='font-size:10.0pt'>root</span></tt> variable is set to the default
top-level window automatically created by Tk, although applications with
advanced requirements can customize the top-level frames. The code then creates
a Tkinter button object, specifying the parent (the <tt><span style='font-size:
10.0pt'>root</span></tt> variable), the text for the button, and the command to
execute when clicked. We discuss the <tt><span style='font-size:10.0pt'>pack()</span></tt>
method later in this section. Finally, turn control over to the main
event-processing loop, which creates the Windows on the screen and dispatches
user-interface events.</p>

<h5 align=center style='text-align:center'><a
name="_Figure_20.2._tkDemo_example_in_acti"></a>Figure 20.2. tkDemo example in
action</h5>

<p class=MsoNormal align=center style='text-align:center'><span
style='font-family:Arial'><img border=0 width=502 height=435
src="images\image064.gif" alt="figs/ppw.2002.gif"></span></p>

<h5>20.1.3.2 The other end of the World</h5>

<p>From the extreme simplicity of the “Hello World” example, the other end of
the scale could be considered the <tt><span style='font-size:10.0pt'>tkDemo</span></tt>
sample included with this chapter. Although space considerations prevent us
from examining this sample in detail, <a
href="#_Figure_20.2._tkDemo_example_in_acti">Figure 20.2</a> should give you an
indication of the capabilities offered by Tkinter.</p>

<h4>20.1.4 Widgets</h4>

<h5>20.1.4.1 Core widgets</h5>

<p>Tkinter implements a fairly small set of core widgets, from which other
widgets or complete applications can be based. <a
href="#_Table_20.1._Core_Tkinter_Widgets">Table 20.1</a> lists these core
widgets with a short description of how they are used.</p>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 width="100%"
 style='width:100.0%'>
 <tr>
  <td colspan=2 style='border:none;padding:.75pt .75pt .75pt .75pt'>
  <h5 align=center style='text-align:center'><a
  name="_Table_20.1._Core_Tkinter_Widgets"></a>Table&nbsp;20.1. Core Tkinter
  Widgets</h5>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><b><span style='font-size:10.0pt'>Widget
  Name</span></b></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><b><span style='font-size:10.0pt'>Description</span></b></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Toplevel</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Toplevel widgets are special in that they
  have no master widget and don’t support any of the geometry-management
  methods (as discussed later). All other widgets are directly or indirectly
  associated with a Toplevel widget.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Frame</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Used as a container widget for other child
  widgets. For instance, the tkDemo example consists of a number of frames
  within frames within frames to achieve its particular layout.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Label</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Displays text or images.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Message</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Displays text with automatic line-break and
  justification capabilities.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Text</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Displays text with advanced formatting,
  editing, and highly interactive capabilities.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Canvas</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Displays graphical items from a display
  list, with highly interactive capabilities.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Button, Checkbox, Entry, Scale, Radiobutton,
  List box, Scrollbar</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Standard simple entry widgets, also known
  as the </span><tt><span style='font-size:10.0pt'>control</span></tt><span
  style='font-size:10.0pt'> widgets.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Menu, Menubutton</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Widgets for implementing and responding to
  menus.</span></p>
  </td>
 </tr>
</table>

<p>Quite a few of these widgets are demonstrated in the tkBrowser sample, and
every one gets an exercise in the tkDemo sample, so you are encouraged to
experiment with these samples to get a feel for the capabilities of each
widget. Of these widgets, we will discuss two of the most popular and powerful
in more detail: the Text and Canvas widgets.</p>

<p>The Text widget provides for the display and editing of text, as you would
expect from a text control. The Text widget is also capable of supporting
embedded images and child windows, but the real power of the text control can
be found in its support of <i>indexes</i>, <i>tags</i>, and <i>marks</i>:</p>

<p class=MsoNormal><i><span style='font-family:Arial;color:#990000'>Indexes</span></i><span
style='font-family:Arial'> </span></p>

<p style='margin-left:.5in'>Indexes provide a rich model for describing
positions in the text control. The position specification can be in terms of
line and column position (relative or absolute), pixel position, special system
index names, and so forth.</p>

<p class=MsoNormal><i><span style='font-family:Arial;color:#990000'>Tags</span></i><span
style='font-family:Arial'> </span></p>

<p style='margin-left:.5in'>Tags are an association between a name and one or
more regions of text. There is no restriction on overlapping regions, so a
character may belong to any number of tags, and tags can be created and
destroyed dynamically. In addition, the text associated with a tag may be given
any number of display characteristics (such as font, color specifications, and
so forth). When we combine these capabilities with the Tkinter event model
described later, it becomes easy to build highly interactive applications (such
as a web browser) around this Text widget.</p>

<p class=MsoNormal><i><span style='font-family:Arial;color:#990000'>Marks</span></i><span
style='font-family:Arial'> </span></p>

<p style='margin-left:.5in'>A mark is a single position within the text (or
more accurately, a position between two characters). Marks flow naturally with
the surrounding text as characters are inserted and deleted, making them
particularly suitable for implementing concepts such as bookmarks or
breakpoints. Tkinter manages a number of predefined marks, such as <tt><span
style='font-size:10.0pt'>insert</span></tt>, which defines the current
insertion point.</p>

<p>The Canvas widget displays graphical items, such as lines, arcs, bitmaps,
images, ovals, polygons, rectangles, text strings, or arbitrary Tkinter
widgets. Like the Text widget, the Canvas widget implements a powerful tagging
system, allowing you to associate any items on the canvas with a name.</p>

<h5>20.1.4.2 Dialog and other noncore widgets</h5>

<p>Many useful widgets are actually built from the core widgets. The most
common example is the dialog widget, and recent versions of Tkinter provide some
new sophisticated dialog widgets similar to the Windows common dialogs. In many
cases when running on Windows, the standard Windows dialog is used.</p>

<p>Many of these dialogs come in their own module. <a
href="#_Table_20.2._Tkinter_Common_Dialog_B">Table 20.2</a> lists the common
dialog box modules and their functionality.</p>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 width="100%"
 style='width:100.0%'>
 <tr>
  <td colspan=2 style='border:none;padding:.75pt .75pt .75pt .75pt'>
  <h5 align=center style='text-align:center'><a
  name="_Table_20.2._Tkinter_Common_Dialog_B"></a>Table&nbsp;20.2. Tkinter
  Common Dialog Box Modules</h5>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><b><span style='font-size:10.0pt'>Module
  Name</span></b></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><b><span style='font-size:10.0pt'>Description</span></b></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>tkMessageBox</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Simple message box related dialogs, such as
  Yes/No, Abort/Retry/Ignore, and so forth.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>tkSimpleDialog</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Contains base classes for building your own
  dialogs, and also includes a selection of simple input dialogs, such as
  asking for a string, integer, or float value.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>tkFileDialog</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>A dialog with functionality very close to the
  Windows common file dialogs.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>tkColorChooser</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>A dialog for choosing a color.</span></p>
  </td>
 </tr>
</table>

<p>There are many other widgets available; both included with the Tkinter
package, and also available externally. One interesting and popular source of Tkinter
widgets can be found in the Python megawidgets (<tt><span style='font-size:
10.0pt'>Pmw</span></tt>) package. This package comes with excellent
documentation and sample code and can be found at <a
href="http://pmw.sourceforge.net" target="_blank">http://pmw.sourceforge.net</a>.</p>

<p>In most cases, you build your own dialogs by deriving them from the <tt><span
style='font-size:10.0pt'>tkSimpleDialog.Dialog</span></tt> . Our tkBrowser
sample defines an <tt><span style='font-size:10.0pt'>EditTransaction</span></tt>
class that shows an example of this.</p>

<h5 style='page-break-after:avoid'>20.1.4.3 Widget properties and methods</h5>

<p>Tkinter provides a flexible and powerful attribute set for all widgets.
Almost all attributes can be set at either widget-creation time or once the
widget has been created and displayed. Although Tkinter provides obvious
attributes for items such as the color, font, or visible state of a widget, the
set of enhanced attributes for widgets is usually the key to tapping the full
potential of Tkinter.</p>

<p>Tkinter makes heavy use of Python keyword arguments when specifying widget
attributes. A widget of any type (for instance a Label) is constructed with
code similar to:</p>

<pre>w = Label(master, option1=value1, option2=value2,...)</pre>

<p>And once constructed, can be reconfigured at any time with code like:</p>

<pre>w.configure(option1=value1, option2=value2, ...)</pre>

<p>For a specific example, you can create a label with the following code:</p>

<pre>label = Label(parent, background='white', </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text='Hello World!',</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; relief=RAISED, </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;borderwidth=3)</pre>

<p>And provide an annoying blinking effect by periodic execution of:</p>

<pre>label.configure(background='red')</pre>

<p>And:</p>

<pre>label.configure(background='white')</pre>

<p>There are dozens of options that can be specified for each widget. <a
href="#_Table_20.3._Common_Tkinter_Widget_P">Table 20.3</a> lists a few common
properties available for each widget.</p>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 width="100%"
 style='width:100.0%'>
 <tr>
  <td colspan=2 style='border:none;padding:.75pt .75pt .75pt .75pt'>
  <h5 align=center style='text-align:center'><a
  name="_Table_20.3._Common_Tkinter_Widget_P"></a>Table&nbsp;20.3. Common Tkinter
  Widget Properties</h5>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><b><span style='font-size:10.0pt'>Property</span></b></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><b><span style='font-size:10.0pt'>Description</span></b></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>height, width</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>The height and width of the widget in
  pixels.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>background, foreground</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>The color of the widget as a string. You can
  specify a color by name (for example, red or light blue), or you can specify
  each of the RGB components in hexadecimal notation prefixed with a # (e.g.,
  #ffffff for white).</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>relief</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>A 3D appearance for the object (</span><tt><span
  style='font-size:10.0pt'>RAISED</span></tt><span style='font-size:10.0pt'>, </span><tt><span
  style='font-size:10.0pt'>SUNKEN</span></tt><span style='font-size:10.0pt'>, </span><tt><span
  style='font-size:10.0pt'>RIDGE</span></tt><span style='font-size:10.0pt'>, or
  </span><tt><span style='font-size:10.0pt'>GROOVE</span></tt><span
  style='font-size:10.0pt'>) or a 2D appearance (FLAT or SOLID).</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>borderwidth</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Width of the border, in pixels.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>text wrap, justify</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>The Window text (i.e., the caption) for the
  widget and additional formatting options for multiline widgets.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>font</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>The font that displays the text. This can
  be in a bewildering array of formats: some platform-independent and some
  platform-dependent. The most common form is a tuple containing font name,
  point size, and style (for example, </span><tt><span style='font-size:10.0pt'>(&quot;Times&quot;,</span></tt><span
  style='font-size:10.0pt'> </span><tt><span style='font-size:10.0pt'>10,</span></tt><span
  style='font-size:10.0pt'> </span><tt><span style='font-size:10.0pt'>&quot;bold&quot;</span></tt><span
  style='font-size:10.0pt'>). Tkinter guarantees that the fonts </span><tt><span
  style='font-size:10.0pt'>Times,</span></tt><span style='font-size:10.0pt'> </span><tt><span
  style='font-size:10.0pt'>Helvetica</span></tt><span style='font-size:10.0pt'>,
  and </span><tt><span style='font-size:10.0pt'>Courier</span></tt><span
  style='font-size:10.0pt'> exist on all platforms, and styles can be any
  combination of bold, roman, italic, underline, and overstrike, which are
  always available, with Tkinter substituting the closest matching font if
  necessary.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>command, variable</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Techniques used by control widgets to
  communicate back to the application. The </span><tt><span style='font-size:
  10.0pt'>command</span></tt><span style='font-size:10.0pt'> option allows you
  to specify an arbitrary Python function (or any callable Python object) to be
  invoked when the specified action occurs (e.g., when a Button widget is
  pushed). Alternatively, several widgets take the variable option and, if
  specified, must be an instance of one of the </span><tt><span
  style='font-size:10.0pt'>StringVar</span></tt><span style='font-size:10.0pt'>,
  </span><tt><span style='font-size:10.0pt'>IntVar</span></tt><span
  style='font-size:10.0pt'>, </span><tt><span style='font-size:10.0pt'>DoubleVar</span></tt><span
  style='font-size:10.0pt'>, or </span><tt><span style='font-size:10.0pt'>BooleanVar</span></tt><span
  style='font-size:10.0pt'> classes (or subclass). Once set up, changes to the
  widget are immediately reflected in the object, and changes in the object are
  immediately reflected to the widget. This is demonstrated in <i>tkBrowser.py</i>
  in a number of places including the </span><tt><span style='font-size:10.0pt'>EditTransaction</span></tt><span
  style='font-size:10.0pt'> class, which uses this technique for managing the
  data shown in the dialog.</span></p>
  </td>
 </tr>
</table>

<p>There are also dozens of methods available for each widget class, and the
Tkinter documentation describes these in detail, but there is one important
method we mention here because it’s central to the Tkinter event model.</p>

<p>The <tt><span style='font-size:10.0pt'>bind()</span></tt> method is simple,
but provides an incredible amount of power by allowing you to bind a GUI event
to a Python function. It takes two parameters, the event you wish to bind to
(specified as a string) and a Python object to be called when the event fires.</p>

<p>The power behind this method comes from the specification of the event.
Tkinter provides a rich set of events, ranging from keyboard and mouse actions
to Window focus or state changes. The specification of the event is quite
intuitive (for example, &lt;Key&gt; binds any key, &lt;Ctrl-Alt-Key-Z&gt; is a
very specific key, &lt;Button-1&gt; is a the first mouse-button click, and so
forth) and covers over 20 basic event types. You should consult the Tkinter
reference guides for a complete set of events supported by Windows and a full
description of the Tkinter event model.</p>

<h4>20.1.5 Geometry Management</h4>

<p>Tkinter provides a powerful concept typically not found in Windows GUI
toolkits, and that is geometry management. Geometry management is the technique
used to lay out child widgets in their parent (for example, controls in a
dialog box). Most traditional Windows environments force you to specify the
absolute position of each control. Although this is specified in dialog units
rather than pixels and controls can be moved once created, Tkinter provides a
far more powerful and flexible model.</p>

<p>Tkinter widgets provide three methods for geometry management, <tt><span
style='font-size:10.0pt'>pack()</span></tt>, <tt><span style='font-size:10.0pt'>grid()</span></tt>,
or <tt><span style='font-size:10.0pt'>place()</span></tt>.</p>

<p><tt><span style='font-size:10.0pt'>place()</span></tt> is the simplest
mechanism and similar to what most Windows users are used to; each widget has
its position explicitly specified, either in absolute or relative coordinates.
The <tt><span style='font-size:10.0pt'>grid()</span></tt> mechanism, as you may
expect, automatically aligns the widgets in a grid pattern, while the <tt><span
style='font-size:10.0pt'>pack()</span></tt> method is the most powerful and the
most commonly used. When widgets are packed, they are automatically positioned
based on the size of the parent and the other widgets already placed. All of
these techniques allow customization of the layout process, such as the padding
between widgets.</p>

<p>These geometry-management capabilities allow you to define user interfaces
that aren’t tied to particular screen resolutions and can automatically resize
and layout controls as the window size changes, capabilities that most
experienced Windows user-interface programmers will know are otherwise difficult
to achieve. Our two samples (described next) both make extensive use of the <tt><span
style='font-size:10.0pt'>pack()</span></tt> method, while the tkDemo sample
also makes limited use of <tt><span style='font-size:10.0pt'>grid()</span></tt>.</p>

<h4>20.1.6 Tkinter Sample Code</h4>

<p>We have included a sample Doubletalk browser written in Tkinter. This is a
fully functional transaction viewer and editor application and is implemented
in <i>tkBrowser.py</i>. This implements a number of features that demonstrate
how to build powerful applications in Tkinter. A number of dialogs are
presented, including the transaction list, and the detail for each specific
transaction. To show how simple basic drawing and charting is, a graphical view
of each account is also provided. Rather than labor over the details of this
sample, the best thing to do is just to run it. Then once you have a feel for
the functionality, peruse the source code to see the implementation. There are
ample comments and documentation strings included less than 700 lines of
source. <a href="24.htm#_Figure_20.3._The_Tkinter_Doubletalk">Figure 20.3</a>
shows our final application in action.</p>

<h5 align=center style='text-align:center'><a
name="_Figure_20.3._The_Tkinter_Doubletalk"></a>Figure 20.3. The Tkinter
Doubletalk browser in action</h5>

<p class=MsoNormal align=center style='text-align:center'><span
style='font-family:Arial'><img border=0 width=502 height=375
src="images\image065.gif" alt="figs/ppw.2003.gif"></span></p>

<p>The second sample is <i>TkDemo.py</i>, which is a demonstration of all the Tkinter
core widgets. It is highly animated and provides a good feel for the basic
operation of these widgets.</p>

<p>As mentioned previously, Tkinter is the standard GUI for Python
applications, therefore you can find a large number of resources both in the
standard Python documentation and referenced via the Python web site.</p>

<h4>20.1.7 Tkinter Conclusion</h4>

<p>Tkinter is excellent for small, quick GUI applications, and since it runs on
more platforms than any other Python GUI toolkit, it is a good choice where
portability is the prime concern.</p>

<p>Obviously we haven’t been able to give Tkinter the depth of discussion it
warrants, but it’s fair to say that almost anything that can be done using the
C language and Tk can be done using Python and Tkinter. One example is the
Python megawidgets (<tt><span style='font-size:10.0pt'>PMW</span></tt>) package
mentioned previously; this is a pure Python package that creates an excellent
widget set by building on the core Tkinter widgets.</p>

<p>To learn more about any of the Tkinter topics discussed here, you may like
to refer to the following sources:</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>The standard Python documentation is optionally installed with Python on
Windows and is also available online at <a href="http://www.python.org/doc"
target="_blank">http://www.python.org/doc</a>.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>PythonWare and Fredrik Lundh provide excellent Tkinter resources,
including tutorials available at <a href="http://www.pythonware.com"
target="_blank">http://www.pythonware.com</a>.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Tcl and Tk are developed and supported by the Scriptics Corporation,
which can be found at <a href="http://www.scriptics.com" target="_blank">http://www.scriptics.com</a>.
Tcl and Tk documentation is available from <a
href="http://www.scriptics.com/resource/doc/" target="_blank">http://www.scriptics.com/resource/doc/</a>.
O’Reilly has an excellent book on the subject, <i>Tcl/Tk in a Nutshell</i> by
Paul Raines and Jeff Trantor.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Python megawidgets are available via <a
href="http://pmw.sourceforge.net/" target="_blank">http://pmw.sourceforge.net/</a>.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Keep your eye out for O’Reilly’s <i>Tkinter Programming</i> by Fredrik
Lundh. </p>

<h3><a name="_20.2_PythonWin"></a>20.2 PythonWin</h3>

<p>As mentioned in <a href="6.htm#_Chapter_4._Integrated_Development_E">Chapter
4</a>, PythonWin is a framework that exposes much of the Microsoft Foundation
Classes (MFC) to Python. MFC is a C++ framework that provides an object-based
model of the Windows GUI API, as well as a number of services useful to
applications.</p>

<p>The term <i>PythonWin</i> is a bit of a misnomer. PythonWin is really an
application written to make use of the extensions that expose MFC to Python.
This means PythonWin actually consists of two components:</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Python modules that provide the raw MFC functionality</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Python code that uses these modules to provide the PythonWin application</p>

<p>We focus primarily on the MFC functionality exposed to Python so we can
build a fully functional GUI application.</p>

<p>As PythonWin mirrors MFC, it’s important to understand key MFC concepts to
understand how PythonWin hangs together. Although we don’t have room for a complete
analysis of MFC, an introduction to its concepts is in order.</p>

<h4>20.2.1 Introduction to MFC</h4>

<p>The Microsoft Foundation Classes are a framework for developing complete
applications in C++. MFC provides two primary functions:</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>An object-oriented wrapper for the native Windows user-interface API</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Framework facilities that remove much of the grunge work involved in
making a complete, standalone Windows application</p>

<p>The object-oriented wrapping is straightforward. Many Windows API functions take
a “handle” as their first parameter; for example, the function <tt><span
style='font-size:10.0pt'>SendMessage()</span></tt> takes a handle to a window
(an <tt><span style='font-size:10.0pt'>HWND</span></tt>), <tt><span
style='font-size:10.0pt'>DrawText()</span></tt> takes a handle to a device
context (an <tt><span style='font-size:10.0pt'>HDC</span></tt>) and so forth.
MFC wraps most of these handles in objects and thus provides <tt><span
style='font-size:10.0pt'>CWnd</span></tt> and <tt><span style='font-size:10.0pt'>CDC</span></tt>
classes, both of which have the relevant methods.</p>

<p>So, instead of writing your C++ code as:</p>

<pre>HWND hwnd = CreateWindow(...); // Create a handle to the window...</pre><pre>EnableWindow(hwnd); // and enable it.</pre>

<p>You may write code similar to:</p>

<pre>CWnd wnd; // Create a window object.</pre><pre>&nbsp;&nbsp;&nbsp; wnd.CreateWindow(...); // Create the Window.</pre><pre>&nbsp;&nbsp;&nbsp; wnd.EnableWindow();// And enable it.</pre>

<p>There are a large number of objects, including generic window objects, frame
windows, MDI child windows, property pages, fonts, dialogs, etc. It’s a large
object model, so a good MFC text or the MFC documentation is recommended for
anything more than casual use from Python.</p>

<p>The framework aspects of MFC provides some useful utility classes, both for
structuring your application and performing many of the mundane tasks a good
Windows application should do. The mundane but useful tasks it performs include
automatic creation of tool-tip text and status-bar text for menus and dockable
toolbars, reading and writing preferences in the registry, maintaining the
“recently used files” list, and so forth.</p>

<p>MFC also provides a useful <i>application/template/document/view</i>
architecture. You create an application object, then add one or more document
templates to the application. A document template knows how to create a
specific document, meaning your application can work with many documents. A
“document” is a general concept; it holds the data for the object your
application manages, but doesn’t provide any user interface for viewing that
data. The last link in the chain is the view object that’s responsible for the
user interaction. Each view defines a way of looking at your data. For example,
you may have a graphical view and also a tabular view. Included in all of this
are many utility functions for managing these objects. For example, when a view
notifies its document that data has been changed, the document automatically
notifies all other views, so they can be kept up-to-date.</p>

<p>If your application doesn’t fit this model, don’t be alarmed: you can customize
almost all this behavior. But there is no doubt that utilizing this framework
is the simplest way to use MFC.</p>

<h4>20.2.2 The PythonWin Object Model</h4>

<p>Think of PythonWin as composed of two distinct portions. The <tt><span
style='font-size:10.0pt'>win32ui</span></tt> module is a Python extension that
provides access to the raw MFC classes. For many MFC objects, there is an
equivalent <tt><span style='font-size:10.0pt'>win32ui</span></tt> object. For
example, the functionality of the MFC <tt><span style='font-size:10.0pt'>CWnd</span></tt>
object is provided by a <tt><span style='font-size:10.0pt'>PyCWnd</span></tt>
Python object; an MFC <tt><span style='font-size:10.0pt'>CDocument</span></tt>
object by a <tt><span style='font-size:10.0pt'>PyCDocument</span></tt> object,
etc. For a full list, see the PythonWin reference (on the PythonWin help menu).</p>

<p>For the MFC framework to be useful, you need to be able to override default
methods in the MFC object hierarchy; for example, the method <tt><span
style='font-size:10.0pt'>CView::OnDraw()</span></tt> is generally overridden to
draw the screen for a view. But the objects exposed by the <tt><span
style='font-size:10.0pt'>win32ui</span></tt> module are technically Python
types (they aren’t classes) and a quirk in the Python language prevents these
Python types from having their methods overridden.</p>

<p>To this end, the <tt><span style='font-size:10.0pt'>win32ui</span></tt>
module provides a mechanism to “attach” a Python class instance object to a <tt><span
style='font-size:10.0pt'>win32ui</span></tt> type. When MFC needs to call an
overridden method, it then calls the method on the attached Python object.</p>

<p>What this means for the programmer is that you can use natural Python
classes to extend the types defined in <tt><span style='font-size:10.0pt'>win32ui</span></tt>.</p>

<p>The <tt><span style='font-size:10.0pt'>pywin.mfc</span></tt> package
provides Python base classes that interface with many of the <tt><span
style='font-size:10.0pt'>win32ui</span></tt> objects. These base classes handle
the interaction with <tt><span style='font-size:10.0pt'>win32ui</span></tt> and
allow you to use Python subclassing to get your desired behavior.</p>

<p>This means that when you use a PythonWin object, there are two Python
objects involved (the object of a <tt><span style='font-size:10.0pt'>win32ui</span></tt>
type and the Python class instance), plus an underlying MFC C++ object.</p>

<p>Let’s see what this means in practice. We will examine a few of these
objects from the PythonWin interactive window and create a dialog object using
one of the standard PythonWin dialogs:</p>

<pre>&gt;&gt;&gt; import win32ui</pre><pre>&gt;&gt;&gt; from pywin.mfc.dialog import Dialog</pre><pre>&gt;&gt;&gt; d=Dialog(win32ui.IDD_SIMPLE_INPUT)</pre>

<p>Looking at the object, you can see it’s indeed an instance of a Python
class:</p>

<pre>&gt;&gt;&gt; d</pre><pre>&lt;pywin.mfc.dialog.Dialog instance at 1083c80&gt;</pre>

<p>And you can see the underlying <tt><span style='font-size:10.0pt'>win32ui</span></tt>
object:</p>

<pre>&gt;&gt;&gt; d._obj_</pre><pre>object 'PyCDialog' - assoc is 010820C0, vf=True, notify=0,ch/u=0/0, mh=1, kh=0</pre><pre>&gt;&gt;&gt;</pre>

<p>It says that the C++ object is at address 0x010820c0 and also some other
internal, cryptic properties of the object. You can use any of the underlying <tt><span
style='font-size:10.0pt'>win32ui</span></tt> methods automatically on this
object:</p>

<pre>&gt;&gt;&gt; d.CreateWindow()</pre><pre>&gt;&gt;&gt; button=d.GetDlgItem(win32ui.IDC_PROMPT1)</pre><pre>&gt;&gt;&gt; button.SetWindowText(&quot;Hello from Python&quot;)</pre><pre>&gt;&gt;&gt;</pre>

<p>The prompt in the dialog should now read “Hello from Python.”</p>

<h4>20.2.3 Developing a PythonWin Sample Application</h4>

<p>During the rest of this section, we will develop a sample application using
PythonWin. This will lead us through many of the important MFC and PythonWin
concepts, while also leveraging the dynamic nature of PythonWin.</p>

<p>MFC itself has a tutorial/sample called Scribble, which delivers a basic
drawing application. We will develop a version of Scribble written in Python.</p>

<p>We will make use of some of the features of PythonWin to demonstrate how
rapidly you can create such an application. Specifically, we will develop the
Scribble framework first to run under the existing PythonWin framework, then
make changes to it so it can run standalone. This is in contrast to the
traditional technique of developing MFC applications, where the application
object is often one of the first entities defined. A key benefit in using the
PythonWin application object is that you get the full benefits of the PythonWin
IDE, including error handling and reporting in the interactive window. This
makes development much easier before we finally plug in our custom application
object.</p>

<p>The general design of the Scribble application is simple. Define the
document object to keep a list of strokes. A <i>stroke</i> is the start and end
coordinates of a line. The document object also can load and store this list of
strokes to a file. A view object is also defined that can render these strokes
onto a Window.</p>

<p>The first step in the sample is to provide a placeholder for the document
template, document, and view objects. Once this skeleton is working, we fill
out these objects with a useful implementation.</p>

<h4>20.2.4 Defining a Simple Framework</h4>

<p>Our first step is to develop a simple framework with placeholders for the
major objects.</p>

<p>We define three objects: a <tt><span style='font-size:10.0pt'>ScribbleTemplate</span></tt>,
a <tt><span style='font-size:10.0pt'>ScribbleDocument</span></tt>, and a <tt><span
style='font-size:10.0pt'>ScribbleView</span></tt>. These objects derive their
implementation from objects in the <tt><span style='font-size:10.0pt'>pywin.mfc.docview</span></tt>
module. The <tt><span style='font-size:10.0pt'>ScribbleTemplate</span></tt>
object remains empty in this implementation. The <tt><span style='font-size:
10.0pt'>ScribbleDocument</span></tt> object has a single method, <tt><span
style='font-size:10.0pt'>OnNew-Document()</span></tt> , which is called as a
document object is initialized; the implementation defines an empty list of
strokes. The view object is based on a <tt><span style='font-size:10.0pt'>PyCScrollView</span></tt>
(i.e., an MFC <tt><span style='font-size:10.0pt'>CScrollView</span></tt>) and
defines a single method <tt><span style='font-size:10.0pt'>OnInitialUpdate()</span></tt>
. As the name implies, this method is called the first time a view object is
updated. This method places the view in the correct mapping mode and disables
the scrollbars. For more information on mapping modes and views, see the MFC
documentation.</p>

<p>The final part of the skeleton registers the new document template with the
MFC framework. This registration process is simple, just a matter of calling <tt><span
style='font-size:10.0pt'>AddDocTemplate()</span></tt> on the application
object. In addition, this code associates some doc strings with the template.
These doc strings tell the MFC framework important details about the document
template, such as the file extensions for the documents, the window title for new
documents, etc. For information on these doc strings, see the PythonWin
Reference for the function <tt><span style='font-size:10.0pt'>PyCDocTemplate.SetDocStrings()</span></tt>.</p>

<div align=center>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 width="90%"
 style='width:90.0%;background:black'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 width="100%"
   style='width:100.0%;background:white'>
   <tr>
    <td width=60 valign=top style='width:45.0pt;padding:4.5pt 4.5pt 4.5pt 4.5pt'>
    <p class=MsoNormal><span style='font-family:Arial'><img border=0 width=50
    height=54 src="images\image002.gif"></span></p>
    </td>
    <td valign=top style='padding:4.5pt 4.5pt 4.5pt 4.5pt'>
    <p>The term <i>doc strings</i> has a number of meanings. To Python, a doc
    string is a special string in a Python source file that provides
    documentation at runtime for specific objects. In the context of an MFC
    document template, a doc string is a string that describes an MFC document
    object.</p>
    </td>
   </tr>
  </table>
  <p class=MsoNormal></p>
  </td>
 </tr>
</table>

</div>

<p>A final note before we look at the code. This application has no special
requirement for a frame window. The standard MFC/PythonWin Frame windows are
perfectly suitable for the application. Therefore, we don’t define a specific Frame
window for the sample.</p>

<p>Let’s look at the example application with the described functionality:</p>

<pre># scribble1.py</pre><pre>#</pre><pre># The starting framework for our scribble application.</pre><pre>import win32ui</pre><pre>import win32con</pre><pre>import pywin.mfc.docview</pre><pre>&nbsp;</pre><pre>class ScribbleTemplate(pywin.mfc.docview.DocTemplate):</pre><pre>&nbsp;&nbsp;&nbsp; pass</pre><pre>&nbsp;</pre><pre>class ScribbleDocument(pywin.mfc.docview.Document):</pre><pre>&nbsp;&nbsp;&nbsp; def OnNewDocument(self):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;&quot;&quot;Called whenever the document needs initializing.</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; For most MDI applications, this is only called as the document</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; is created.</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;&quot;&quot;</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.strokes = []</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 1</pre><pre>&nbsp;</pre><pre>class ScribbleView(pywin.mfc.docview.ScrollView):</pre><pre>&nbsp;&nbsp;&nbsp; def OnInitialUpdate(self):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.SetScrollSizes(win32con.MM_TEXT, (0, 0))</pre><pre>&nbsp;</pre><pre># Now we do the work to create the document template, and</pre><pre># register it with the framework.</pre><pre>&nbsp;</pre><pre># For debugging purposes, we first attempt to remove the old template.</pre><pre># This is not necessary once our app becomes stable!</pre><pre>try:</pre><pre>&nbsp;&nbsp;&nbsp; win32ui.GetApp().RemoveDocTemplate(template)</pre><pre>except NameError:</pre><pre>&nbsp;&nbsp;&nbsp; # haven't run this before - that's ok</pre><pre>&nbsp;&nbsp;&nbsp; pass</pre><pre>&nbsp;</pre><pre># Now create the template object itself...</pre><pre>template = ScribbleTemplate(None, ScribbleDocument, None, ScribbleView)</pre><pre># Set the doc strings for the template.</pre><pre>docs='\nPyScribble\nPython Scribble Document\nScribble documents (*.psd)\n.psd'</pre><pre>template.SetDocStrings(docs)</pre><pre>&nbsp;</pre><pre># Then register it with MFC.</pre><pre>win32ui.GetApp().AddDocTemplate(template)</pre>

<p>Notice there’s some code specifically for debugging. If you execute this
module multiple times, you’d potentially create multiple document templates,
but all for the same class of documents (i.e., the <tt><span style='font-size:
10.0pt'>ScribbleDocument</span></tt>). To this end, each time you execute this
module, try to remove the document template added during the previous
execution.</p>

<p>What does this sample code do? It has registered the <tt><span
style='font-size:10.0pt'>ScribbleTemplate</span></tt> with MFC, and MFC is now
capable of creating a new document. Let’s see this in action. To register the
template in PythonWin, perform the following steps:</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Start PythonWin.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Open the sample code in PythonWin using the File menu and select Open.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>From the File menu, select Import. This action executes the module in
the PythonWin environment.</p>

<p>To test this skeleton, select New from the File menu. You will see a list of
all the document templates registered in PythonWin. The list should look
something like <a href="24.htm#_Figure_20.4._The_File/New_dialog_in">Figure
20.4</a>.</p>

<h5 align=center style='text-align:center'><a
name="_Figure_20.4._The_File/New_dialog_in"></a>Figure 20.4. The File/New
dialog in PythonWin after executing the sample application</h5>

<p class=MsoNormal align=center style='text-align:center'><span
style='font-family:Arial'><img border=0 width=502 height=131
src="images\image066.gif" alt="figs/ppw.2004.gif"></span></p>

<p>You can now select the Python <tt><span style='font-size:10.0pt'>ScribbleDocument</span></tt>
and see what happens. You should see a new Frame window, with the title <tt><span
style='font-size:10.0pt'>PyScribble1</span></tt>. MFC has given the new
document a default name based on the doc strings you supplied the template.</p>

<p>Because you haven’t added any code for interacting with the user, your
application won’t actually do anything yet! We will now develop this skeleton
into a usable Scribble application.</p>

<h4>20.2.5 Enhancing the DocumentTemplate</h4>

<p>Although MFC and PythonWin support multiple document templates, there’s a
slight complication that isn’t immediately obvious. When MFC is asked to open a
document file, it asks each registered <tt><span style='font-size:10.0pt'>DocumentTemplate</span></tt>
in turn if it can handle this document type. The default implementation for <tt><span
style='font-size:10.0pt'>DocumentTemplates</span></tt> is to report that it
“can possibly open this document.” Thus, when you’re asked to open a Scribble
document, one of the other <tt><span style='font-size:10.0pt'>DocumentTemplate</span></tt>
objects (e.g., the Python editor template) may be asked to handle it, rather
than your <tt><span style='font-size:10.0pt'>ScribbleTemplate</span></tt>. This
wouldn’t be a problem if this application handled only one document template,
but since PythonWin already has some of its own, it could be a problem.</p>

<p>Therefore, it’s necessary to modify the <tt><span style='font-size:10.0pt'>DocumentTemplate</span></tt>
so that when asked, it answers “I can definitely open this document.” MFC then
directs the open request to the template.</p>

<p>You provide this functionality by overriding the MFC method <tt><span
style='font-size:10.0pt'>MatchDocType()</span></tt> . It’s necessary for this
function to first check if a document of that name is already open; this
prevents users from opening the document multiple times. The document template
code now looks like:</p>

<pre>class ScribbleTemplate(pywin.mfc.docview.DocTemplate):</pre><pre>&nbsp;&nbsp;&nbsp; def MatchDocType(self, fileName, fileType):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; doc = self.FindOpenDocument(fileName)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if doc: return doc</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ext = string.lower(os.path.splitext(fileName)[1])</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if ext =='.psd':</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return win32ui.CDocTemplate_Confidence_yesAttemptNative</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return win32ui.CDocTemplate_Confidence_noAttempt</pre>

<p>As you can see, you check the extension of the filename, and if it matches,
tell MFC that the document is indeed yours. If the extension doesn’t match,
tell MFC you can’t open the file.</p>

<h4>20.2.6 Enhancing the Document</h4>

<p>As mentioned previously, this <tt><span style='font-size:10.0pt'>ScribbleDocument</span></tt>
object is responsible only for working with the document data, not for
interacting with the user. This makes the <tt><span style='font-size:10.0pt'>ScribbleDocument</span></tt>
quite simple. The first step is to add some public methods for working with the
strokes. These functions look like:</p>

<pre>class ScribbleDocument(pywin.mfc.docview.Document):</pre><pre>...</pre><pre>&nbsp;&nbsp;&nbsp; def AddStroke(self, start, end, fromView):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.strokes.append((start, end))</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.SetModifiedFlag()</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.UpdateAllViews( fromView, None )</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;def GetStrokes(self):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return self.strokes</pre>

<p>The first function appends the new stroke to the list of strokes. It also
sets the document’s “modified flag.” This flag is used by MFC to automatically prompt
the user to save the document as the program exits. It also automatically
enables the File/Save option for the document.</p>

<p>The last thing the document must do is to load and save the data from a
file. MFC itself handles displaying of the Save As, etc., dialogs, and calls
Document functions to perform the actual save. The function names are <tt><span
style='font-size:10.0pt'>OnOpenDocument()</span></tt> and <tt><span
style='font-size:10.0pt'>OnSaveDocument()</span></tt> respectively.</p>

<p>As the strokes are a simple list, you can use the Python <tt><span
style='font-size:10.0pt'>pickle</span></tt> module. The functions become quite
easy:</p>

<pre>def OnOpenDocument(self, filename):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; file = open(filename, &quot;rb&quot;)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.strokes = pickle.load(file)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; file.close()</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; win32ui.AddToRecentFileList(filename)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 1</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;def OnSaveDocument(self, filename):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; file = open(filename, &quot;wb&quot;)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pickle.dump(self.strokes, file)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; file.close()</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.SetModifiedFlag(0)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; win32ui.AddToRecentFileList(filename)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 1</pre>

<p><tt><span style='font-size:10.0pt'>OnOpenDocument()</span></tt> loads the
strokes from the named file. In addition, it places the filename to the most
recently used (MRU) list. <tt><span style='font-size:10.0pt'>OnSaveDocument()</span></tt>
dumps the strokes to the named file, updates the document status to indicate
it’s no longer modified, and adds the file to the MRU list. And that is all you
need to make your document fully functional.</p>

<h4>20.2.7 Defining the View</h4>

<p>The <tt><span style='font-size:10.0pt'>View</span></tt> object is the most
complex object in the sample. The <tt><span style='font-size:10.0pt'>View</span></tt>
is responsible for all interactions with the user, which means the <tt><span
style='font-size:10.0pt'>View</span></tt> must collect the strokes as the user
draws them, and also draw the entire list of strokes whenever the window
requires repainting.</p>

<p>The collection of the strokes is the most complex part. To collect
effectively, you must trap the user pressing the mouse button in the window.
Once this occurs, enter a drawing mode, and as the mouse is moved, draw a line
to the current position. When the user releases the mouse button, they have
completed the stroke, so add the stroke to the document. The key steps to coax
this behavior are:</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>The <tt><span style='font-size:10.0pt'>View</span></tt> must hook the
relevant mouse messages: in this case, the <tt><span style='font-size:10.0pt'>LBUTTONDOWN</span></tt>,
<tt><span style='font-size:10.0pt'>LBUTTONUP</span></tt>, and <tt><span
style='font-size:10.0pt'>MOUSEMOVE</span></tt> messages.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>When a <tt><span style='font-size:10.0pt'>LBUTTONDOWN</span></tt>
message is received, remember the start position and enter a drawing mode. Also
capture the mouse, to ensure that you get all future mouse messages, even when
the mouse leaves the window.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>If a <tt><span style='font-size:10.0pt'>MOUSEMOVE</span></tt> message
occurs when you are in drawing mode, draw a line from the remembered start
position to the current mouse position. In addition, erase the previous line
drawn by this process. This gives a “rubber band” effect as you move the mouse.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>When a <tt><span style='font-size:10.0pt'>LBUTTONUP</span></tt> message
is received, notify the document of the new, completed stroke, release the
mouse capture, and leave drawing mode.</p>

<p>After adding this logic to the sample, it now looks like:</p>

<pre>class ScribbleView(pywin.mfc.docview.ScrollView):</pre><pre>&nbsp;&nbsp;&nbsp; def OnInitialUpdate(self):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.SetScrollSizes(win32con.MM_TEXT, (0, 0))</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.HookMessage(self.OnLButtonDown,win32con.WM_LBUTTONDOWN)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.HookMessage(self.OnLButtonUp,win32con.WM_LBUTTONUP)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.HookMessage(self.OnMouseMove,win32con.WM_MOUSEMOVE)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.bDrawing = 0</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;def OnLButtonDown(self, params):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; assert not self.bDrawing, &quot;Button down message while still drawing&quot;</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; startPos = params[5]</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # Convert the startpos to Client coordinates.</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.startPos = self.ScreenToClient(startPos)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.lastPos = self.startPos</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # Capture all future mouse movement.</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.SetCapture()</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.bDrawing = 1</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;def OnLButtonUp(self, params):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; assert self.bDrawing, &quot;Button up message, but not drawing!&quot;</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; endPos = params[5]</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; endPos = self.ScreenToClient(endPos)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.ReleaseCapture()</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.bDrawing = 0</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # And add the stroke to the document.</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.GetDocument().AddStroke( self.startPos, endPos, self )</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;def OnMouseMove(self, params):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # If Im not drawing at the moment, I don't care</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if not self.bDrawing:</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pos = params[5]</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dc = self.GetDC()</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # Setup for an inverting draw operation.</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dc.SetROP2(win32con.R2_NOT)</pre><pre>&nbsp;&nbsp;&nbsp; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# &quot;undraw&quot; the old line</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dc.MoveTo(self.startPos)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dc.LineTo(self.lastPos)</pre><pre>&nbsp;</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # Now draw the new position</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.lastPos = self.ScreenToClient(pos)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dc.MoveTo(self.startPos)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dc.LineTo(self.lastPos)</pre>

<p>Most of this code should be quite obvious. It’s worth mentioning that you tell
Windows to draw the line using a <tt><span style='font-size:10.0pt'>NOT</span></tt>
mode. This mode is handy; if you draw the same line twice, the second draw
erases the first. Thus, to erase a line you drew previously, all you need is to
draw the same line again.</p>

<p>Another key point is that the mouse messages all report the position in
“Screen Coordinates” (i.e., relative to the top-left corner of the screen)
rather than in “Client Coordinates” (i.e., relative to the top-left corner of
our window). You use a member function <tt><span style='font-size:10.0pt'>PyCWnd.ScreenToClient()</span></tt>
to transform these coordinates.</p>

<p>The final step to complete the <tt><span style='font-size:10.0pt'>View</span></tt>
is to draw all your strokes whenever the window requires updating. This code is
simple: you iterate over the list of strokes for the document, drawing lines
between the coordinates. To obtain this behavior, use the code:</p>

<pre>def OnDraw(self, dc):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # All we need to is get the strokes, and paint them.</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; doc = self.GetDocument()</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for startPos, endPos in doc.GetStrokes():</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dc.MoveTo(startPos)</pre><pre>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dc.LineTo(endPos)</pre>

<p>And that’s it! You now have a fully functional drawing application, capable
of loading and saving itself from disk. </p>

<h4>20.2.8 Creating the Application Object</h4>

<p>The simplest way to create an application object for Scribble is to subclass
one of the standard application objects. The PythonWin application object is
implemented in <tt><span style='font-size:10.0pt'>pywin.framework.intpyapp</span></tt>
, and it derives from the <tt><span style='font-size:10.0pt'>CApp</span></tt>
class in <tt><span style='font-size:10.0pt'>pywin.framework.app</span></tt>.
This base class provides much of the functionality for an application, so we
too will derive our application from <tt><span style='font-size:10.0pt'>CApp</span></tt>.</p>

<p>This makes the application object small and simple. You obviously may need
to enhance certain aspects; in this case, you should use the <tt><span
style='font-size:10.0pt'>pywin.framework</span></tt> modules as a guide. The
minimal application object looks like:</p>

<pre># scribbleApp.py</pre><pre>#</pre><pre># The application object for Python.</pre><pre>from pywin.framework.app import CApp</pre><pre>&nbsp;</pre><pre>class ScribbleApplication(CApp):</pre><pre>&nbsp;&nbsp;&nbsp; def InitInstance(self):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # All we need do is call the base class,</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # then import our document template.</pre><pre>&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CApp.InitInstance(self)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; import scribble2</pre><pre>&nbsp;</pre><pre># And create our application object.</pre><pre>ScribbleApplication()</pre>

<p>To run this, use the following command line:</p>

<pre>C:\Scripts&gt; start pythonwin /app scribbleApp.py</pre>

<p>An instance of <i>Pythonwin.exe</i> now starts, but uses the application
object you defined. Therefore, there’a no Interactive Window, the application
doesn’t offer to open <i>.py</i> files, etc. The Scribble application should
look like <a href="24.htm#_Figure_20.5._Our_PythonWin_Scribble">Figure 20.5</a>.</p>

<h5 align=center style='text-align:center'><a
name="_Figure_20.5._Our_PythonWin_Scribble"></a>Figure 20.5. Our PythonWin
Scribble application</h5>

<p class=MsoNormal align=center style='text-align:center'><span
style='font-family:Arial'><img border=0 width=502 height=238
src="images\image067.gif" alt="figs/ppw.2005.gif"></span></p>

<p>There is also a technique to avoid this command line, but you need a copy of
a resource editor (such as Microsoft Visual C++). You can take a copy of <i>Pythonwin.exe</i>
(name it something suitable for your application), then open the <i>.exe</i> in
the resource editor and locate an entry in the string table with the value <tt><span
style='font-size:10.0pt'>pywin.framework.startup</span></tt>. This is the name
of a module executed to boot the PythonWin application; the default script
parses the “/app” off the command line and loads that application. You can
change this to any value you like, and PythonWin then loads your startup
script. See <i>startup.py</i> in the PythonWin distribution for an example of a
startup script.</p>

<h4>20.2.9 PythonWin and Resources</h4>

<p>As we’ve discussed, MFC provides a framework architecture, and much of this
architecture is tied together by resource IDs, integers that identify Windows
resources in a DLL or executable.</p>

<p>For example, when you define a <tt><span style='font-size:10.0pt'>DocumentTemplate</span></tt>,
you specify a resource ID. The previous example doesn’t specify a resource ID,
so the default of <tt><span style='font-size:10.0pt'>win32ui.IDR_PYTHONTYPE</span></tt>
is used. When a document is created, MFC uses the resource ID in the following
ways:</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>The menu with the ID is loaded and used for the document’s frame. This
allows each document supported in an application to have a unique set of menus
as is common in MDI applications.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>The icon with the ID is loaded and used for the document’s frame.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>The accelerator with that ID is loaded, providing document-specific
shortcut keys to many of the menu functions.</p>

<p>Another example of the reliance on resource IDs is in the processing and
definition of menu and toolbar items. Each command in the application is assigned
an ID. When you define menu or toolbar items, you specify the menu text (or
toolbar bitmap) and the command ID. When MFC displays a menu item, it uses a
string defined with the same ID and places this text automatically in the
application’s status bar. When the mouse hovers over a toolbar item, MFC again
looks for a string with the specified ID and uses it for the tooltip-text for
the button. This architecture has a number of advantages:</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Hooking the various pieces of your application together becomes simple.
You define an icon, menu, accelerators, strings, and so forth with the same
resource ID, and MFC automatically ties all these together for your
application.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>If you are working with an existing MFC or C++ application, there’s a
good chance you already use resources in a similar fashion, so PythonWin often
fits naturally when embedded in these applications.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>When you need to respond to a GUI command, specify the command ID. The
same code then handles the command regardless of whether it was sourced from
the keyboard, toolbar or menu.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Localizing your application for other languages becomes simpler. You
define new resources in the new language but use the same IDs, and the
application still works regardless of the particular resources in use at the
time.</p>

<p>However, it also has a number of disadvantages:</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Python doesn’t have a technique for defining resources, such as dialogs,
menus, toolbars, or strings. So while this scheme works well using MFC from
Microsoft Visual C++ (which does provide this facility), it doesn’t work as
well from Python.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>It’s a pain to move beyond the MFC-provided framework. As soon as you
begin manually defining and managing these resources, you aren’t much better
off than if you simply had used the raw Windows GUI API.</p>

<p>PythonWin can use resources from arbitrary DLLs, thus you can define your
own DLL containing only resources. PythonWin makes it easy to use these
resources; just load the DLL (using <tt><span style='font-size:10.0pt'>win32ui.LoadLibrary()</span></tt>),
and PythonWin locates and uses the resources in this DLL.</p>

<p>If you are writing a large application, you’ll probably find it worthwhile
to define your own resource DLL when using PythonWin. The benefits offered by
the framework make it worth the pain of initially setting everything up. On the
other hand, it does make PythonWin somewhat cumbersome for defining these
applications purely from Python code.</p>

<h4>20.2.10 PythonWin Conclusion</h4>

<p>For the vast majority of Python users in Windows, PythonWin will never be
more than an interesting IDE environment for developing Python applications.
But many other Windows developers are beginning to use PythonWin to develop
Windows applications. When comparing the three GUI toolkits available in this
book, you will probably come to the conclusion that PythonWin is the least
suitable for simple, small GUI applications written in Python, and this would
be fair. However, depending on your particular circumstances (usually either
because you have an existing MFC investment or it’s important to use some
user-interface features offered only by PythonWin), it may be a good choice.</p>

<p>PythonWin suffers from a lack of decent documentation. A Windows help file
is included that contains a reference guide for all of the objects and methods
exposed by PythonWin, but PythonWin doesn’t include a comprehensive overview of
the MFC framework. There are many good MFC books available, so a specific
recommendation is impossible. Information from Microsoft on MFC can be found at
<a href="http://msdn.microsoft.com/visualc/" target="_blank">http://msdn.microsoft.com/visualc/</a>.
</p>

<h3><a name="_20.3_wxPython"></a>20.3 wxPython</h3>

<p>Another GUI toolkit available for Python is called <tt><span
style='font-size:10.0pt'>wxPython</span></tt>. The current incarnation is
fairly new to the Python scene and is rapidly gaining popularity amongst Python
developers. <tt><span style='font-size:10.0pt'>wxPython</span></tt> is a Python
extension module that encapsulates the wxWindows C++ class library.</p>

<p><tt><span style='font-size:10.0pt'>wxPython</span></tt> is a cross-platform
GUI framework for Python that is quite mature on the Windows platform. It
exposes the popular <tt><span style='font-size:10.0pt'>wxWindows</span></tt>
C++ framework Python to provide an attractive alternative for GUI development.</p>

<h4>20.3.1 wxWindows</h4>

<p><tt><span style='font-size:10.0pt'>wxWindows</span></tt> is a free C++
framework designed to make cross-platform programming child’s play. Well,
almost. <tt><span style='font-size:10.0pt'>wxWindows</span></tt> 2.0 supports
Windows 3.1/95/98/NT, Unix with GTK/Motif/Lesstif, with a Mac version underway.
Other ports are under consideration.</p>

<p><tt><span style='font-size:10.0pt'>wxWindows</span></tt> is a set of
libraries that allows C++ applications to compile and run on several different
types of computers, with minimal source-code changes. There’s one library per
supported GUI (such as Motif, or Windows). As well as providing a common API
for GUI functionality, it provides functionality for accessing some commonly
used operating-system facilities, such as copying or deleting files. <tt><span
style='font-size:10.0pt'>wxWindows</span></tt> is a framework in the sense that
it provides a lot of built-in functionality, which the application can use or
replace as required, thus saving a great deal of coding effort. Basic data
structures such as strings, linked lists, and hash tables are also supplied.</p>

<p>Native versions of controls, common dialogs, and other window types are used
on platforms that support them. For other platforms, suitable alternatives are
created using <tt><span style='font-size:10.0pt'>wxWindows</span></tt> itself.
For example, on Win32 platforms the native list control is used, but on GTK, a
generic list control with similar capabilities was created for use in the <tt><span
style='font-size:10.0pt'>wxWindows</span></tt> class library.</p>

<p>Experienced Windows programmers will feel right at home with the <tt><span
style='font-size:10.0pt'>wxWindows</span></tt> object model. Many of the
classes and concepts will be familiar. For example, the Multiple Document
Interface, drawing on Device Contexts with GDI objects such as brushes, pens,
and so on.</p>

<h4>20.3.2 wxWindows + Python = wxPython</h4>

<p><tt><span style='font-size:10.0pt'>wxPython</span></tt> is a Python
extension module that provides a set of bindings from the <tt><span
style='font-size:10.0pt'>wxWindows</span></tt> library to the Python language.
In other words, the extension module allows Python programers to create
instances of <tt><span style='font-size:10.0pt'>wxWindows</span></tt> classes
and to invoke methods of those classes.</p>

<p>The <tt><span style='font-size:10.0pt'>wxPython</span></tt> extension module
attempts to mirror the class hierarchy of <tt><span style='font-size:10.0pt'>wxWindows</span></tt>
as closely as possible. This means that there is a <tt><span style='font-size:
10.0pt'>wxFrame</span></tt> class in <tt><span style='font-size:10.0pt'>wxPython</span></tt>
that looks, smells, tastes, and acts almost the same as the <tt><span
style='font-size:10.0pt'>wxFrame</span></tt> class in the C++ version.</p>

<p><tt><span style='font-size:10.0pt'>wxPython</span></tt> is close enough to
the C++ version that the majority of the <tt><span style='font-size:10.0pt'>wxPython</span></tt>
documentation is actually annotations to the C++ documentation that describe
the places where <tt><span style='font-size:10.0pt'>wxPython</span></tt> is
different. There is also a series of sample programs included, and a series of
documentation pages that assist the programmer in getting started with <tt><span
style='font-size:10.0pt'>wxPython</span></tt>.</p>

<h5>20.3.2.1 Where to get wxPython</h5>

<p>The latest version of <tt><span style='font-size:10.0pt'>wxPython</span></tt>
can always be found at <a href="http://alldunn.com/wxPython/" target="_blank">http://alldunn.com/wxPython/</a>.
From this site you can download a self-installer for Win32 systems that includes
a prebuilt extension module, documentation in HTML help format, and a set of
demos.</p>

<p>Also available from this site is a Linux RPM, <tt><span style='font-size:
10.0pt'>wxPython</span></tt> sources, documentation in raw HTML, and pointers
to other sites, mail lists, the <tt><span style='font-size:10.0pt'>wxPython</span></tt>
FAQ, and so forth.</p>

<p>If you want to build <tt><span style='font-size:10.0pt'>wxPython</span></tt>
from sources yourself, you also need the <tt><span style='font-size:10.0pt'>wxWindows</span></tt>
sources, available from <a href="http://www.wxwindows.org/" target="_blank">http://www.wxwindows.org/</a>.</p>

<h5>20.3.2.2 Where to go from here</h5>

<p>The remainder of this chapter gives a basic introduction to using <tt><span
style='font-size:10.0pt'>wxPython</span></tt>, starting with a simple example
teaching the basic structure of a <tt><span style='font-size:10.0pt'>wxPython</span></tt>
application. We then build a more involved sample that touches on some of the
more advanced features of the toolkit, using classes from the Doubletalk
financial modeler you’re already familiar with.</p>

<h4>20.3.3 Using wxPython</h4>

<p>We’ve always found that the best way to learn is by doing and then
experimenting and tweaking with what’s been done. So download and install <tt><span
style='font-size:10.0pt'>wxPython</span></tt>, fire up your favorite text editor<a
name="_ftnref19"></a><a href="#_ftn19"><span class=atitlechar><sup><span
style='font-size:9.0pt'>[1]</span></sup></span></a> and get ready to play along
as you read the next few sections.</p>

<h5>20.3.3.1 A simple example</h5>

<p>Familiarize yourself with this little <tt><span style='font-size:10.0pt'>wxPython</span></tt>
program, and refer back to it as you read through the explanations that follow:</p>

<pre>from wxPython.wx import *</pre><pre>&nbsp;</pre><pre>class MyApp(wxApp):</pre><pre>&nbsp;&nbsp;&nbsp; def OnInit(self):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; frame = wxFrame(NULL, -1, &quot;Hello from wxPython&quot;)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; frame.Show(true)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.SetTopWindow(frame)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return true</pre><pre>&nbsp;</pre><pre>app = MyApp(0)</pre><pre>app.MainLoop()</pre>

<p>When you run this code, you should see a Window appear similar to <a
href="#_Figure_20.6._A_basic_wxPython_appli">Figure 20.6</a>.</p>

<h5 align=center style='text-align:center'><a
name="_Figure_20.6._A_basic_wxPython_appli"></a>Figure 20.6. A basic wxPython
application</h5>

<p class=MsoNormal align=center style='text-align:center'><span
style='font-family:Arial'><img border=0 width=502 height=93
src="images\image068.gif" alt="figs/ppw.2006.gif"></span></p>

<p>The first thing to do is import the entire <tt><span style='font-size:10.0pt'>wxPython</span></tt>
library with the <tt><span style='font-size:10.0pt'>from</span></tt> <tt><span
style='font-size:10.0pt'>wxPython.wx</span></tt> <tt><span style='font-size:
10.0pt'>import</span></tt> <tt><span style='font-size:10.0pt'>*</span></tt>
statement. This is common practice for <tt><span style='font-size:10.0pt'>wxPython</span></tt>
programs, but you can obviously perform more restrictive imports if you prefer.</p>

<p>Every <tt><span style='font-size:10.0pt'>wxPython</span></tt> application
needs to derive a class from <tt><span style='font-size:10.0pt'>wxApp</span></tt>
and provide an <tt><span style='font-size:10.0pt'>OnInit</span></tt> method for
it. The framework calls this method as part of its initialization sequence, and
the usual purpose of <tt><span style='font-size:10.0pt'>OnInit</span></tt> is
to create the windows and essentials necessary for the program to begin
operation. In the sample you created a frame with no parent, with a title of
“Hello from <tt><span style='font-size:10.0pt'>wxPython</span></tt>” and then
showed it. We could also have specified a position and size for the frame in
its constructor, but since we didn’t, defaults are used. The last two lines of
the <tt><span style='font-size:10.0pt'>OnInit</span></tt> method will probably
be the same for all applications; <tt><span style='font-size:10.0pt'>SetTopWindow</span></tt>
method informs <tt><span style='font-size:10.0pt'>wxWindows</span></tt> that
this frame is one of the main frames (in this case the only one) for the
application, and you return <tt><span style='font-size:10.0pt'>true</span></tt>
to indicate success. When all top-level windows have been closed, the
application terminates.</p>

<p>The final two lines of the script again will probably be the same for all
your <tt><span style='font-size:10.0pt'>wxPython</span></tt> applications. You
create an instance of the application class and call its <tt><span
style='font-size:10.0pt'>MainLoop</span></tt> method. <tt><span
style='font-size:10.0pt'>MainLoop</span></tt> is the heart of the application:
it’s where events are processed and dispatched to the various windows, and it
returns when the final window is closed. Fortunately, <tt><span
style='font-size:10.0pt'>wxWindows</span></tt> insulates you from the differences
in event processing in the various GUI toolkits.</p>

<p>Most of the time you will want to customize the main frame of the
application, and so using the stock <tt><span style='font-size:10.0pt'>wxFrame</span></tt>
isn’t sufficient. As you might expect, you can derive your own class from <tt><span
style='font-size:10.0pt'>wxFrame</span></tt> to begin customization. This next
example builds on the last by defining a frame class and creating an instance
in the application’s <tt><span style='font-size:10.0pt'>OnInit</span></tt>
method. Notice that except for the name of the class created in <tt><span
style='font-size:10.0pt'>OnInit</span></tt>, the rest of the <tt><span
style='font-size:10.0pt'>MyApp</span></tt> code is identical to the previous
example. This code is displayed in <a
href="#_Figure_20.7._A_wxPython_application">Figure 20.7</a>.</p>

<pre>from wxPython.wx import *</pre><pre>&nbsp;</pre><pre>ID_ABOUT = 101</pre><pre>ID_EXIT&nbsp; = 102</pre><pre>&nbsp;</pre><pre>class MyFrame(wxFrame):</pre><pre>&nbsp;&nbsp;&nbsp; def __init__(self, parent, ID, title):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wxFrame.__init__(self, parent, ID, title,</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wxDefaultPosition, wxSize(200, 150))</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.CreateStatusBar()</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.SetStatusText(&quot;This is the statusbar&quot;)</pre><pre>&nbsp;</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; menu = wxMenu()</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;menu.Append(ID_ABOUT, &quot;&amp;About&quot;,</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;More information about this program&quot;)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; menu.AppendSeparator()</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; menu.Append(ID_EXIT, &quot;E&amp;xit&quot;, &quot;Terminate the program&quot;)</pre><pre>&nbsp;</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; menuBar = wxMenuBar()</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; menuBar.Append(menu, &quot;&amp;File&quot;);</pre><pre>&nbsp;</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.SetMenuBar(menuBar)</pre><pre>&nbsp;</pre><pre>&nbsp;</pre><pre>class MyApp(wxApp):</pre><pre>&nbsp;&nbsp;&nbsp; def OnInit(self):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; frame = MyFrame(NULL, -1, &quot;Hello from wxPython&quot;)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; frame.Show(true)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.SetTopWindow(frame)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return true</pre><pre>&nbsp;</pre><pre>app = MyApp(0)</pre><pre>app.MainLoop()</pre>

<h5 align=center style='text-align:center'><a
name="_Figure_20.7._A_wxPython_application"></a>Figure 20.7. A wxPython application
with menus</h5>

<p class=MsoNormal align=center style='text-align:center'><span
style='font-family:Arial'><img border=0 width=502 height=141
src="images\image069.gif" alt="figs/ppw.2007.gif"></span></p>

<p>This example shows some of the built-in capabilities of the <tt><span
style='font-size:10.0pt'>wxFrame</span></tt> class. For example, creating a
status bar for the frame is as simple as calling a single method. The frame
itself automatically manages its placement, size, and drawing. On the other
hand, if you want to customize the status bar, create an instance of your own <tt><span
style='font-size:10.0pt'>wxStatusBar</span></tt>-derived class and attach it to
the frame.</p>

<p>Creating a simple menu bar and a drop-down menu is also demonstrated in this
example. The full range of expected menu capabilities is supported: cascading
submenus, checkable items, popup menus, etc.; all you have to do is create a
menu object and append menu items to it. The items can be text as shown here,
or other menus. With each item you can optionally specify some short help text,
as we have done, which are shown in the status bar automatically when the menu
item is selected.</p>

<h5>20.3.3.2 Events in wxPython</h5>

<p>The one thing that the last sample doesn’t do is show how to make the menus
actually do something. If you run the sample and select Exit from the menu,
nothing happens. The next sample takes care of that little problem.</p>

<p>To process events in <tt><span style='font-size:10.0pt'>wxPython</span></tt>,
any method (or standalone function for that matter) can be attached to any
event using a helper function from the toolkit. <tt><span style='font-size:
10.0pt'>wxPython</span></tt> also provides a <tt><span style='font-size:10.0pt'>wxEvent</span></tt>
class and a whole bunch of derived classes for containing the details of the
event. Each time a method is invoked due to an event, an object derived from <tt><span
style='font-size:10.0pt'>wxEvent</span></tt> is sent as a parameter, the actual
type of the event object depends on the type of the event; <tt><span
style='font-size:10.0pt'>wxSizeEvent</span></tt> for when the window changes
size, <tt><span style='font-size:10.0pt'>wxCommandEvent</span></tt> for menu
selections and button clicks, <tt><span style='font-size:10.0pt'>wxMouseEvent</span></tt>
for (you guessed it) mouse events, and so forth.</p>

<p>To solve our little problem with the last sample, all you have to do is add
two lines to the <tt><span style='font-size:10.0pt'>MyFrame</span></tt>
constructor and add some methods to handle the events. We’ll also demonstrate
one of the common dialogs, the <tt><span style='font-size:10.0pt'>wxMessageDialog</span></tt>.
Here’s the code, with the new parts in bold, and the running code shown in <a
href="#_Figure_20.8._The_application_with_a">Figure 20.8</a>:</p>

<pre>from wxPython.wx import *</pre><pre>&nbsp;</pre><pre>ID_ABOUT = 101</pre><pre>ID_EXIT&nbsp; = 102</pre><pre>&nbsp;</pre><pre>class MyFrame(wxFrame):</pre><pre>&nbsp;&nbsp;&nbsp; def __init__(self, parent, ID, title):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wxFrame.__init__(self, parent, ID, title,</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wxDefaultPosition, wxSize(200, 150))</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.CreateStatusBar()</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.SetStatusText(&quot;This is the statusbar&quot;)</pre><pre>&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;menu = wxMenu()</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; menu.Append(ID_ABOUT, &quot;&amp;About&quot;,</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;More information about this program&quot;)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; menu.AppendSeparator()</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; menu.Append(ID_EXIT, &quot;E&amp;xit&quot;, &quot;Terminate the program&quot;)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; menuBar = wxMenuBar()</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; menuBar.Append(menu, &quot;&amp;File&quot;);</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.SetMenuBar(menuBar)</pre><pre><b>&nbsp;</b></pre><pre><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; EVT_MENU(self, ID_ABOUT, self.OnAbout)</b></pre><pre><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; EVT_MENU(self, ID_EXIT,&nbsp; self.TimeToQuit)</b></pre><pre><b>&nbsp;&nbsp;&nbsp; def OnAbout(self, event):</b></pre><pre><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dlg = wxMessageDialog(self, &quot;This sample program shows off\n&quot;</b></pre><pre><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;frames, menus, statusbars, and this\n&quot;</b></pre><pre><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;message dialog.&quot;,</b></pre><pre><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;About Me&quot;, wxOK | wxICON_INFORMATION)</b></pre><pre><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dlg.ShowModal()</b></pre><pre><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dlg.Destroy()</b></pre><pre><b>&nbsp;</b></pre><pre><b>&nbsp;&nbsp;&nbsp; def TimeToQuit(self, event):</b></pre><pre><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.Close(true)</b></pre><pre>&nbsp;</pre><pre>class MyApp(wxApp):</pre><pre>&nbsp;&nbsp;&nbsp; def OnInit(self):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; frame = MyFrame(NULL, -1, &quot;Hello from wxPython&quot;)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; frame.Show(true)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.SetTopWindow(frame)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return true</pre><pre>&nbsp;</pre><pre>app = MyApp(0)</pre><pre>app.MainLoop()</pre>

<h5 align=center style='text-align:center'><a
name="_Figure_20.8._The_application_with_a"></a>Figure 20.8. The application
with an About box</h5>

<p class=MsoNormal align=center style='text-align:center'><span
style='font-family:Arial'><img border=0 width=502 height=168
src="images\image070.gif" alt="figs/ppw.2008.gif"></span></p>

<p>The <tt><span style='font-size:10.0pt'>EVT_MENU</span></tt> function called
here is one of the helper functions for attaching events to methods. Sometimes
it helps to understand what is happening if you translate the function call to
English. The first one says, “For any menu item selection event sent to the
window <tt><span style='font-size:10.0pt'>self</span></tt> with an ID of <tt><span
style='font-size:10.0pt'>ID_ABOUT</span></tt>, invoke the method <tt><span
style='font-size:10.0pt'>self.OnAbout</span></tt>.”</p>

<p>There are many of these <tt><span style='font-size:10.0pt'>EVT_*</span></tt>
helper functions, all of which correspond to a specific type of event, or
events. Some popular ones are listed in <a
href="#_Table_20.4._Common_wxPython_Event_F">Table 20.4</a>. See the <tt><span
style='font-size:10.0pt'>wxPython</span></tt> documentation for details.</p>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 width="100%"
 style='width:100.0%'>
 <tr>
  <td colspan=2 style='border:none;padding:.75pt .75pt .75pt .75pt'>
  <h5 align=center style='text-align:center'><a
  name="_Table_20.4._Common_wxPython_Event_F"></a>Table&nbsp;20.4. Common wxPython
  Event Functions</h5>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><b><span style='font-size:10.0pt'>Event
  Function</span></b></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><b><span style='font-size:10.0pt'>Event
  Description</span></b></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>EVT_SIZE</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Sent to a window when its size has changed,
  either interactively by the user or programmatically.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>EVT_MOVE</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Sent to a window when it has been moved, either
  interactively by the user or programmatically.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>EVT_CLOSE</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Sent to a frame when it has been requested
  to close. Unless the close is being forced, it can be canceled by calling </span><tt><span
  style='font-size:10.0pt'>event.Veto(true)</span></tt><span style='font-size:
  10.0pt'>.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>EVT_PAINT</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>This event is sent whenever a portion of
  the window needs to be redrawn.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>EVT_CHAR</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Sent for each nonmodifier (Shift key, etc.)
  keystroke when the window has the focus.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>EVT_IDLE</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>This event is sent periodically when the system
  isn’t processing other events.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>EVT_LEFT_DOWN</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>The left mouse button has been pressed
  down.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>EVT_LEFT_UP</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>The left mouse button has been let up.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>EVT_LEFT_DCLICK </span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>The left mouse button has been
  double-clicked.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>EVT_MOTION</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>The mouse is in motion.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>EVT_SCROLL</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>A scrollbar has been manipulated. This one
  is actually a collection of events, which can be captured individually if
  desired.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>EVT_BUTTON</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>A button has been clicked.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>EVT_MENU</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>A menu item has been selected.</span></p>
  </td>
 </tr>
</table>

<h4>20.3.4 Building a Doubletalk Browser with wxPython</h4>

<p>Okay, now let’s build something that’s actually useful and learn more about
the <tt><span style='font-size:10.0pt'>wxPython</span></tt> framework along the
way. As has been shown with the other GUI toolkits, we’ll build a small application
around the Doubletalk class library that allows browsing and editing of
transactions.</p>

<h5>20.3.4.1 MDI Frame</h5>

<p>We’re going to implement a Multiple Document Interface, where the child
frames are different views of the transactional data, rather than separate
“documents.” Just as with previous samples, the first thing to do is create an
application class and have it create a main frame in its <tt><span
style='font-size:10.0pt'>OnInit</span></tt> method:</p>

<pre>class DoubleTalkBrowserApp(wxApp):</pre><pre>&nbsp;&nbsp;&nbsp; def OnInit(self):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; frame = MainFrame(NULL)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; frame.Show(true)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.SetTopWindow(frame)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return true</pre><pre>&nbsp;</pre><pre>app = DoubleTalkBrowserApp(0)</pre><pre>app.MainLoop()</pre>

<p>Since we are using MDI, there is a special class to use for the frame’s base
class. Here is the code for the initialization method of the main application
frame:</p>

<pre>class MainFrame(wxMDIParentFrame):</pre><pre>&nbsp;&nbsp;&nbsp; title = &quot;Doubletalk Browser - wxPython Edition&quot;</pre><pre>&nbsp;&nbsp;&nbsp; def __init__(self, parent):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wxMDIParentFrame.__init__(self, parent, -1, self.title)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.bookset = None</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.views = []</pre><pre>&nbsp;</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if wxPlatform == '__WXMSW__':</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.icon = wxIcon('chart7.ico', wxBITMAP_TYPE_ICO)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.SetIcon(self.icon)</pre><pre>&nbsp;</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # create a statusbar that shows the time and date on the right</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sb = self.CreateStatusBar(2)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sb.SetStatusWidths([-1, 150])</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.timer = wxPyTimer(self.Notify)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.timer.Start(1000)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.Notify()</pre><pre>&nbsp;</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; menu = self.MakeMenu(false)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.SetMenuBar(menu)</pre><pre>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;menu.EnableTop(1, false)</pre><pre>&nbsp;</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; EVT_MENU(self, ID_OPEN,&nbsp; self.OnMenuOpen)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; EVT_MENU(self, ID_CLOSE, self.OnMenuClose)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; EVT_MENU(self, ID_SAVE,&nbsp; self.OnMenuSave)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; EVT_MENU(self, ID_SAVEAS,self.OnMenuSaveAs)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; EVT_MENU(self, ID_EXIT,&nbsp; self.OnMenuExit)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; EVT_MENU(self, ID_ABOUT, self.OnMenuAbout)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; EVT_MENU(self, ID_ADD,&nbsp;&nbsp; self.OnAddTrans)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; EVT_MENU(self, ID_JRNL,&nbsp; self.OnViewJournal)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; EVT_MENU(self, ID_DTAIL, self.OnViewDetail)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; EVT_CLOSE(self, self.OnCloseWindow)</pre>

<p><a href="24.htm#_Figure_20.9._The_first_MDI_wxPython">Figure 20.9</a> shows
the state of the application so far.</p>

<h5 align=center style='text-align:center'><a
name="_Figure_20.9._The_first_MDI_wxPython"></a>Figure 20.9. The first MDI
wxPython application</h5>

<p class=MsoNormal align=center style='text-align:center'><span
style='font-family:Arial'><img border=0 width=502 height=124
src="images\image071.gif" alt="figs/ppw.2009.gif"></span></p>

<p>Obviously, we’re not showing all the code yet, but we’ll get to it all
eventually as we go through piece by piece.</p>

<p>Notice the use of <tt><span style='font-size:10.0pt'>wxMDIParentFrame</span></tt>
as the base class of <tt><span style='font-size:10.0pt'>MainFrame</span></tt>. By
using this class you automatically get everything needed to implement MDI for
the application without having to worry about what’s really happening behind
the scenes. The <tt><span style='font-size:10.0pt'>wxMDIParentFrame</span></tt>
class has the same interface as the <tt><span style='font-size:10.0pt'>wxFrame</span></tt>
class, with only a few additional methods. Often changing a single document
interface program to a MDI program is as easy as changing the base classes the
application’s classes are derived from. There is a corresponding <tt><span
style='font-size:10.0pt'>wxMDIChildFrame</span></tt> to be used for the
document windows, as we’ll see later. If you ever need to have access to the
client area (or the background area) of the MDI parent, you can use the <tt><span
style='font-size:10.0pt'>wxMDIClientWindow</span></tt> class. You might use
this for placing a background image behind all the child windows. </p>

<h5 style='page-break-after:avoid'>20.3.4.2 Icons</h5>

<p>The next thing the previous code does is create an icon and associate it
with the frame. Normally Windows applications load items such as icons from a
resource file that is linked with the executable. Since <tt><span
style='font-size:10.0pt'>wxPython</span></tt> programs have no binary
executable file, you create the icon by specifying the full path to a <i>.ico</i>
file. Assigning the icon to the frame only requires calling the frame’s <tt><span
style='font-size:10.0pt'>SetIcon</span></tt> method.</p>

<h5>20.3.4.3 Timers</h5>

<p>You may have noticed from <a
href="24.htm#_Figure_20.9._The_first_MDI_wxPython">Figure 20.9</a> that the
status bar has two sections, with the date and time displayed in the second
one. The next bit of code in the initialization method handles that
functionality. The frame’s <tt><span style='font-size:10.0pt'>CreateStatusBar</span></tt>
method takes an optional parameter specifying the number of sections to create,
and <tt><span style='font-size:10.0pt'>SetStatusWidths</span></tt> can be given
a list of integers to specify how many pixels to reserve for each section. The
-1 means that the first section should take all the remaining space.</p>

<p>In order to update the date and time, you create a <tt><span
style='font-size:10.0pt'>wxPyTimer</span></tt> object. There are two types of
timer classes in <tt><span style='font-size:10.0pt'>wxPython</span></tt>. The
first is the <tt><span style='font-size:10.0pt'>wxPyTimer</span></tt> used
here, which accepts a function or method to use as a callback. The other is the
<tt><span style='font-size:10.0pt'>wxTimer</span></tt> class, which is intended
to be derived from and will call a required method in the derived class when
the timer expires. In the example you specify that when the timer expires, the <tt><span
style='font-size:10.0pt'>Notify</span></tt> method should be called. Then start
the timer, telling it to expire every 1000 milliseconds (i.e., every second).
Here is the code for the <tt><span style='font-size:10.0pt'>Notify</span></tt>
method:</p>

<pre># Time-out handler</pre><pre>def Notify(self):</pre><pre>&nbsp;&nbsp;&nbsp; t = time.localtime(time.time())</pre><pre>&nbsp;&nbsp;&nbsp; st = time.strftime(&quot; %d-%b-%Y&nbsp;&nbsp; %I:%M:%S&quot;, t)</pre><pre>&nbsp;&nbsp;&nbsp; self.SetStatusText(st, 1)</pre>

<p>You first use Python’s <tt><span style='font-size:10.0pt'>time</span></tt>
module to get the current time and format it in to a nice, human-readable
formatted string. Then by calling the frame’s <tt><span style='font-size:10.0pt'>SetStatus-Text</span></tt>
method, you can put that string into the status bar, in this case in slot 1.</p>

<h5>20.3.4.4 Main menu</h5>

<p>As you can see in the next bit of code, we have moved the building of the
menu to a separate method. This is mainly for two reasons. The first is to help
reduce clutter in the <tt><span style='font-size:10.0pt'>__init__</span></tt>
method and better organize the functionality of the class. The second reason
has to do with MDI. As with all MDI applications, each child frame can have its
own menu bar, automatically updated as the frame is selected.</p>

<p>The approach taken by our sample is to either add or remove a single item
from the <tt><span style='font-size:10.0pt'>BookSet</span></tt> menu based on
whether a view can select transactions for editing. Here’s the code for the <tt><span
style='font-size:10.0pt'>MakeMenu</span></tt> method. Notice how the parameter
controls whether the Edit Transaction item is added to the menu. It might have
made better sense to just enable or disable this item as needed, but then you
wouldn’t be able to see how <tt><span style='font-size:10.0pt'>wxPython</span></tt>
changes the menus automatically when the active window changes. Also notice
that you don’t create the Window menu. The <tt><span style='font-size:10.0pt'>wxMDIParentFrame</span></tt>
takes care of that for you:</p>

<pre>def MakeMenu(self, withEdit):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fmenu = wxMenu()</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fmenu.Append(ID_OPEN,&nbsp; &quot;&amp;Open BookSet&quot;,&nbsp; &quot;Open a BookSet file&quot;)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fmenu.Append(ID_CLOSE, &quot;&amp;Close BookSet&quot;,</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;Close the current BookSet&quot;)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fmenu.Append(ID_SAVE,&nbsp; &quot;&amp;Save&quot;, &quot;Save the current BookSet&quot;)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fmenu.Append(ID_SAVEAS,&nbsp; &quot;Save &amp;As&quot;, &quot;Save the current BookSet&quot;)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fmenu.AppendSeparator()</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fmenu.Append(ID_EXIT, &quot;E&amp;xit&quot;,&nbsp;&nbsp; &quot;Terminate the program&quot;)</pre><pre>&nbsp;</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dtmenu = wxMenu()</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dtmenu.Append(ID_ADD, &quot;&amp;Add Transaction&quot;,</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;Add a new transaction&quot;)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if withEdit:</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dtmenu.Append(ID_EDIT, &quot;&amp;Edit Transaction&quot;,</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;Edit selected transaction in current view&quot;)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dtmenu.Append(ID_JRNL, &quot;&amp;Journal view&quot;,</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;Open or raise the journal view&quot;)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dtmenu.Append(ID_DTAIL,&quot;&amp;Detail view&quot;,</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;Open or raise the detail view&quot;)</pre><pre>&nbsp;</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hmenu = wxMenu()</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hmenu.Append(ID_ABOUT, &quot;&amp;About&quot;,</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;More information about this program&quot;)</pre><pre>&nbsp;</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; main = wxMenuBar()</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; main.Append(fmenu, &quot;&amp;File&quot;)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; main.Append(dtmenu,&quot;&amp;Bookset&quot;)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; main.Append(hmenu, &quot;&amp;Help&quot;)</pre><pre>&nbsp;</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return main</pre>

<p>If you skip back to the <tt><span style='font-size:10.0pt'>__init__</span></tt>
method, notice that after you create the menu and attach it to the window, the <tt><span
style='font-size:10.0pt'>EnableTop</span></tt> method of the menubar is called.
This is how to disable the entire <tt><span style='font-size:10.0pt'>BookSet</span></tt>
submenu. (Since there is no <tt><span style='font-size:10.0pt'>BookSet</span></tt>
file open, you can’t really do anything with it yet.) There is also an <tt><span
style='font-size:10.0pt'>Enable</span></tt> method that allows you to enable or
disable individual menu items by ID.</p>

<p>The last bit of the <tt><span style='font-size:10.0pt'>__init__</span></tt>
method attaches event handlers to the various menu items. We’ll be going
through them one by one as we explore the functionality behind those options.
But first, here are some of the simpler ones:</p>

<pre>&nbsp;&nbsp;&nbsp; def OnMenuExit(self, event):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.Close()</pre><pre>&nbsp;</pre><pre>&nbsp;&nbsp;&nbsp; def OnCloseWindow(self, event):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.timer.Stop()</pre><pre>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;del self.timer</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; del self.icon</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.Destroy()</pre><pre>&nbsp;</pre><pre>&nbsp;&nbsp;&nbsp; def OnMenuAbout(self, event):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dlg = wxMessageDialog(self,</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;This program uses the doubletalk package to\n&quot;</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;demonstrate the wxPython toolkit.\n\n&quot;</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;by Robin Dunn&quot;,</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;About&quot;, wxOK | wxICON_INFORMATION)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dlg.ShowModal()</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dlg.Destroy()</pre>

<p>The user selects Exit from the File menu, then the <tt><span
style='font-size:10.0pt'>OnMenuExit</span></tt> method is called, which asks
the window to close itself. Whenever the window wants to close, whether it’s
because its <tt><span style='font-size:10.0pt'>Close</span></tt> method was
called or because the user clicks on the Close button in the titlebar, the <tt><span
style='font-size:10.0pt'>OnCloseWindow</span></tt> method is called. If you
want to prompt the user with an “Are you sure you want to exit?” type of
message, do it here. If he decides not to quit, just call the method <tt><span
style='font-size:10.0pt'>event.Veto(true)</span></tt>.</p>

<p>Most programs will want to have a fancier About box than the <tt><span
style='font-size:10.0pt'>wxMessageDialog</span></tt> provides, but for our
purposes here it works out just fine. Don’t forget to call the dialog’s <tt><span
style='font-size:10.0pt'>Destroy</span></tt> method, or you may leak memory.</p>

<h5>20.3.4.5 wxFileDialog</h5>

<p>Before doing anything with a <tt><span style='font-size:10.0pt'>BookSet</span></tt>,
you have to have one opened. For this, use the common dialog <tt><span
style='font-size:10.0pt'>wxFileDialog</span></tt> . This is the same File <img
border=0 width=20 height=16 src="images\image008.gif"
alt="figs/U2192.gif">Open dialog you see in all your other Windows
applications, all wrapped in a nice <tt><span style='font-size:10.0pt'>wxPython</span></tt>-compatible
class interface.</p>

<p>Here’s the event handler that catches the File <img border=0 width=20
height=16 src="images\image008.gif"
alt="figs/U2192.gif">Open menu event, and <a
href="24.htm#_Figure_20.10._wxPython_browsing_for">Figure 20.10</a> shows the dialog
in action:</p>

<pre>def OnMenuOpen(self, event):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # This should be checking if another is already open,</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # but is left as an exercise for the reader...</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dlg = wxFileDialog(self)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dlg.SetStyle(wxOPEN)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dlg.SetWildcard(&quot;*.dtj&quot;)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if dlg.ShowModal() == wxID_OK:</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.path = dlg.GetPath()</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.SetTitle(self.title + ' - ' + self.path)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.bookset = BookSet()</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.bookset.load(self.path)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.GetMenuBar().EnableTop(1, true)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;win = JournalView(self, self.bookset, ID_EDIT)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.views.append((win, ID_JRNL))</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlg.Destroy()</pre>

<h5 align=center style='text-align:center;page-break-after:avoid'><a
name="_Figure_20.10._wxPython_browsing_for"></a>Figure 20.10. wxPython browsing
for a Doubletalk transaction file</h5>

<p class=MsoNormal align=center style='text-align:center'><span
style='font-family:Arial'><img border=0 width=502 height=214
src="images\image072.gif" alt="figs/ppw.2010.gif"></span></p>

<p>Start off by creating the file dialog and tell it how to behave. Next show
the dialog and give the user a chance to select a <tt><span style='font-size:
10.0pt'>BookSet</span></tt> file. Notice that this time you’re checking the return
value of the <tt><span style='font-size:10.0pt'>ShowModal</span></tt> method.
This is how the dialog says what the result was. By default, dialogs understand
the <tt><span style='font-size:10.0pt'>wxID_OK</span></tt> and <tt><span
style='font-size:10.0pt'>wxID_CANCEL</span></tt> IDs assigned to buttons in the
dialog and do the right thing when they are clicked. For dialogs you create, you
can also specify other values to return if you wish.</p>

<p>The first thing to do after a successful completion of the file dialog is
ask the dialog what the selected pathname was, and then use this to modify the
frame’s title and to open a <tt><span style='font-size:10.0pt'>BookSet</span></tt>
file.</p>

<p>Take a look at the next line. It reenables the <tt><span style='font-size:
10.0pt'>BookSet</span></tt> menu since there is now a file open. It’s really
two statements in one and is equivalent to these two lines:</p>

<pre>menu = self.GetMenuBar()</pre><pre>menu.EnableTop(1, true)</pre>

<p>Since it makes sense to actually let the user see something when they ask to
open a file, you should create and show one of the views in the last bits of
the <tt><span style='font-size:10.0pt'>OnMenuOpen</span></tt> handler above.
We’ll take a look at that next.</p>

<h5>20.3.4.6 wxListCtrl</h5>

<p>The Journal view consists of a <tt><span style='font-size:10.0pt'>wxListCtrl</span></tt>
with a single-line summary for each transaction. It’s placed inside a <tt><span
style='font-size:10.0pt'>wxMDIChildFrame</span></tt> and since it’s the only
thing in the frame, don’t worry about setting or maintaining the size, the
frame does it automatically. (Unfortunately, since some platforms send the
first resize event at different times, sometimes the window shows up without
its child sized properly.) Here’s a simple workaround:</p>

<pre>class JournalView(wxMDIChildFrame):</pre><pre>&nbsp;&nbsp;&nbsp; def __init__(self, parent, bookset, editID):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wxMDIChildFrame.__init__(self, parent, -1, &quot;&quot;)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.bookset = bookset</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.parent = parent</pre><pre>&nbsp;</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tID = wxNewId()</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.lc = wxListCtrl(self, tID, wxDefaultPosition, </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wxDefaultSize, wxLC_REPORT)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ## Forces a resize event to get around a minor bug...</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.SetSize(self.GetSize())</pre><pre>&nbsp;</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.lc.InsertColumn(0, &quot;Date&quot;)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.lc.InsertColumn(1, &quot;Comment&quot;)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.lc.InsertColumn(2, &quot;Amount&quot;)</pre><pre>&nbsp;</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.currentItem = 0</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; EVT_LIST_ITEM_SELECTED(self, tID, self.OnItemSelected)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; EVT_LEFT_DCLICK(self.lc, self.OnDoubleClick)</pre><pre>&nbsp;</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; menu = parent.MakeMenu(true)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.SetMenuBar(menu)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; EVT_MENU(self, editID, self.OnEdit)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; EVT_CLOSE(self, self.OnCloseWindow)</pre><pre>&nbsp;</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.UpdateView()</pre>

<p><a href="24.htm#_Figure_20.11._The_list_of_Doubletal">Figure 20.11</a> shows
the application is progressing nicely and starting to look like a serious
Windows application.</p>

<h5 align=center style='text-align:center'><a
name="_Figure_20.11._The_list_of_Doubletal"></a>Figure 20.11. The list of Doubletalk
transactions</h5>

<p class=MsoNormal align=center style='text-align:center'><span
style='font-family:Arial'><img border=0 width=502 height=303
src="images\image073.gif" alt="figs/ppw.2011.gif"></span></p>

<p>The <tt><span style='font-size:10.0pt'>wxListCtrl</span></tt> has many
personalities, but they should all be familiar to you. Underneath its <tt><span
style='font-size:10.0pt'>wxPython</span></tt> wrappers, it’s the same control
used in Windows Explorer in the right side panel. All the same options are
available: large icons, small icons, list mode, and the report mode used here.
You define the columns with their headers and then set some events for the list
control. You want to be able to edit the transactions when they are
double-clicked, so why are both event handlers needed? The list control sends
an event when an item is selected, but it doesn’t keep track of double-clicks.
The base <tt><span style='font-size:10.0pt'>wxWindow</span></tt> class, on the
other hand, reports double-clicks, but it knows nothing about the list control.
So by catching both events you can easily implement the functionality you need.
Here is the code for the event handlers:</p>

<pre>&nbsp;&nbsp;&nbsp; def OnItemSelected(self, event):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.currentItem = event.m_itemIndex</pre><pre>&nbsp;</pre><pre>&nbsp;&nbsp;&nbsp; def OnDoubleClick(self, event):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.OnEdit()</pre>

<p>After creating and setting up the list control, you create a menubar for
this frame. Here you call the menu-making method in the parent, asking it to
add the Edit Transaction menu item.</p>

<p>The last thing the <tt><span style='font-size:10.0pt'>__init__</span></tt>
method does is call a method to fill the list control from the <tt><span
style='font-size:10.0pt'>BookSet</span></tt>. We’ve split this into a separate
method so it can be called independently whenever the <tt><span
style='font-size:10.0pt'>BookSet</span></tt> data changes. Here’s the <tt><span
style='font-size:10.0pt'>UpdateView</span></tt> method:</p>

<pre>&nbsp;&nbsp;&nbsp; def UpdateView(self):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.lc.DeleteAllItems()</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for x in range(len(self.bookset)):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; trans = self.bookset[x]</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.lc.InsertStringItem(x, trans.getDateString())</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.lc.SetStringItem(x, 1, trans.comment)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.lc.SetStringItem(x, 2, str(trans.magnitude()))</pre><pre>&nbsp;</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.lc.SetColumnWidth(0, wxLIST_AUTOSIZE)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.lc.SetColumnWidth(1, wxLIST_AUTOSIZE)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.lc.SetColumnWidth(2, wxLIST_AUTOSIZE)</pre><pre>&nbsp;</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.SetTitle(&quot;Journal view - %d transactions&quot; %</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; len(self.bookset))</pre>

<p>Putting data in a list control is fairly easy; just insert each item. For
the report mode, you insert an item for the first column and then set values
for the remaining columns. For each column in the example, just fetch some data
from the transaction and send it to the list control. If you were using icons
or combination of icons and text, there are different methods to handle that.</p>

<p>Now that there’s data in the list control, you should resize the columns.
You can either specify actual pixel widths or have the list auto-size the
columns based on the widths of the data.</p>

<p>The last thing the <tt><span style='font-size:10.0pt'>JournalView</span></tt>
class needs to do is to enable the editing of the transactions. We saw
previously that when an item is double-clicked, a method named <tt><span
style='font-size:10.0pt'>OnEdit</span></tt> is invoked. Here it is:</p>

<pre>&nbsp;&nbsp;&nbsp; def OnEdit(self, *event):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if self.currentItem:</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; trans = self.bookset[self.currentItem]</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dlg = EditTransDlg(self, trans,</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.bookset.getAccountList())</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if dlg.ShowModal() == wxID_OK:</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; trans = dlg.GetTrans()</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.bookset.edit(self.currentItem, trans)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.parent.UpdateViews()</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dlg.Destroy()</pre>

<p>This looks like what we did with the file dialog in the main frame, and
indeed you will find yourself using this pattern quite often when using
dialogs. The one item to notice here is the call to <tt><span style='font-size:
10.0pt'>UpdateViews()</span></tt> in the parent window. This is how to manage
keeping all the views of the <tt><span style='font-size:10.0pt'>BookSet</span></tt>
up to date. Whenever a transaction is updated, this method is called and then
loops through all open views, telling the views to update themselves with their
<tt><span style='font-size:10.0pt'>UpdateView()</span></tt> method.</p>

<div align=center>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 width="90%"
 style='width:90.0%'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <h3 align=center style='text-align:center'>wxPython Window Layout</h3>
  <p><tt><span style='font-size:10.0pt'>wxPython</span></tt> includes a number
  of powerful techniques for controlling the layout of your windows and
  controls. There are several alternative mechanisms provided and potentially
  several ways to accomplish the same thing. This allows the programmer to use
  whichever mechanism works best in a particular situation or whichever they
  are most comfortable with.</p>
  <p class=MsoNormal><i><span style='font-family:Arial;color:#990000'>Constraints</span></i><span
  style='font-family:Arial'> </span></p>
  <p style='margin-left:.5in'>There is a class called <tt><span
  style='font-size:10.0pt'>wxLayoutConstraints</span></tt> that allows the
  specification of a window’s position and size in relationship to its siblings
  and its parent. Each <tt><span style='font-size:10.0pt'>wxLayoutContraints</span></tt>
  object is composed of eight <tt><span style='font-size:10.0pt'>wxIndividualLayoutConstraint</span></tt>
  objects, which define different sorts of relationships, such as which window
  is above this window, what is the relative width of this window, etc. You
  usually have to specify four of the eight individual constraints in order for
  the window to be fully constrained. For example, this button will be
  positioned in the center of its parent and will always be 50% of the parent’s
  width:</p>
  <pre style='margin-left:.5in'>b = wxButton(self.panelA, 100, ' Panel A `)</pre><pre
  style='margin-left:.5in'>lc = wxLayoutConstraints()</pre><pre
  style='margin-left:.5in'>lc.centreX.SameAs&nbsp;&nbsp; (self.panelA, wxCentreX)</pre><pre
  style='margin-left:.5in'>lc.centreY.SameAs&nbsp;&nbsp; (self.panelA, wxCentreY)</pre><pre
  style='margin-left:.5in'>lc.height.AsIs&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ()</pre><pre
  style='margin-left:.5in'>lc.width.PercentOf&nbsp; (self.panelA, wxWidth, 50)</pre><pre
  style='margin-left:.5in'>b.SetConstraints(lc);</pre>
  <p class=MsoNormal><i><span style='font-family:Arial;color:#990000'>Layout
  algorithm</span></i><span style='font-family:Arial'> </span></p>
  <p style='margin-left:.5in'>The class named <tt><span style='font-size:10.0pt'>wxLayoutAlgorithm</span></tt>
  implements layout of subwindows in MDI or SDI frames. It sends a <tt><span
  style='font-size:10.0pt'>wxCalculateLayoutEvent</span></tt> to children of
  the frame, asking them for information about their size. Because the event
  system is used this technique can be applied to any window, even those that
  aren’t necessarily aware of the layout classes. However, you may wish to use <tt><span
  style='font-size:10.0pt'>wxSashLayoutWindow</span></tt> for your subwindows
  since this class provides handlers for the required events and accessors to
  specify the desired size of the window. The sash behavior in the base class
  can be used, optionally, to make the windows user-resizable. <tt><span
  style='font-size:10.0pt'>wxLayoutAlgorithm</span></tt> is typically used in
  IDE style of applications, where there are several resizable windows in
  addition to the MDI client window or other primary editing window. Resizable
  windows might include toolbars, a project window, and a window for displaying
  error and warning messages.</p>
  <p class=MsoNormal><i><span style='font-family:Arial;color:#990000'>Sizers</span></i><span
  style='font-family:Arial'> </span></p>
  <p style='margin-left:.5in'>In an effort to simplify the programming of
  simple layouts, a family of wxSizer classes has been added to the wxPython library.
  These are classes that are implemented in pure Python instead of wrapping C++
  code from wxWindows. They are somewhat reminiscent of the layout managers
  from Java in that you select the type of sizer you want and then add windows
  or other sizers to it, and they all follow the same rules for layout. For
  example, this code fragment creates five buttons that are laid out
  horizontally in a box, and the last button is allowed to stretch to fill the
  remaining space allocated to the box:</p>
  <pre style='margin-left:.5in'>box = wxBoxSizer(wxHORIZONTAL)</pre><pre
  style='margin-left:.5in'>box.Add(wxButton(win, 1010, &quot;one&quot;), 0)</pre><pre
  style='margin-left:.5in'>box.Add(wxButton(win, 1010, &quot;two&quot;), 0)</pre><pre
  style='margin-left:.5in'>box.Add(wxButton(win, 1010, &quot;three&quot;), 0)</pre><pre
  style='margin-left:.5in'>box.Add(wxButton(win, 1010, &quot;four&quot;), 0)</pre><pre
  style='margin-left:.5in'>box.Add(wxButton(win, 1010, &quot;five&quot;), 1)</pre>
  <p class=MsoNormal><i><span style='font-family:Arial;color:#990000'>Resources</span></i><span
  style='font-family:Arial'> </span></p>
  <p style='margin-left:.5in'>The wxWindows library has a simple dialog editor
  available that can assist with the layout of controls on a dialog and
  generates a portable cross-platform resource file. This file can be loaded
  into a program at runtime and transformed on the fly into a window with the
  specified controls on it. The only downfall with this approach is that you
  don’t have the opportunity to subclass the windows that are generated, but if
  you can do everything you need with existing control types and event
  handlers, it should work out great. Eventually, there will be a
  wxPython-specific application builder tool that will generate either a
  resource type of file or actual Python source code for you.</p>
  <p class=MsoNormal><i><span style='font-family:Arial;color:#990000'>Brute
  force</span></i><span style='font-family:Arial'> </span></p>
  <p style='margin-left:.5in'>Finally, there is the brute-force mechanism of
  specifying the exact position of every component programmatically. Sometimes
  the layout needs of a window don’t fit with any of the sizers or don’t
  warrant the complexity of the constraints or the layout algorithm. For these
  situations, you can fall back on doing it “by hand,” but you probably don’t
  want to attempt it for anything much more complex than the Edit Transaction
  dialog.</p>
  </td>
 </tr>
</table>

</div>

<h5 style='page-break-after:avoid'>20.3.4.7 wxDialog and friends</h5>

<p>The next step is to build a dialog to edit a transaction. As you’ve seen,
the transaction object is composed of a date, a comment, and a variable number
of transaction lines each of which has an account name and an amount. We know
that all the lines should add up to zero and that the date should be a valid
date. In addition to editing the date and comment, you need to be able to add,
edit, and delete lines. <a href="24.htm#_Figure_20.12._The_wxPython_Doubleta">Figure
20.12</a> shows one possible layout for this dialog and the one used for this
example.</p>

<h5 align=center style='text-align:center'><a
name="_Figure_20.12._The_wxPython_Doubleta"></a>Figure 20.12. The wxPython
Doubletalk transaction editor</h5>

<p class=MsoNormal align=center style='text-align:center'><span
style='font-family:Arial'><img border=0 width=502 height=259
src="images\image074.gif" alt="figs/ppw.2012.gif"></span></p>

<p>Since there’s quite a bit going on here, let’s go through the initialization
of this class step by step. Here’s the first bit:</p>

<pre>class EditTransDlg(wxDialog):</pre><pre>&nbsp;&nbsp;&nbsp; def __init__(self, parent, trans, accountList):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wxDialog.__init__(self, parent, -1, &quot;&quot;)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.item = -1</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if trans:</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.trans = copy.deepcopy(trans)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.SetTitle(&quot;Edit Transaction&quot;)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else:</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.trans = Transaction()</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.trans.setDateString(dates.ddmmmyyyy(self.trans.date))</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.SetTitle(&quot;Add Transaction&quot;)</pre>

<p>This is fairly simple stuff. Just invoke the parent class’s <tt><span
style='font-size:10.0pt'>__init__</span></tt> method, do some initialization,
and determine if you’re editing an existing transaction or creating a new one.
If editing an existing transaction, use the Python copy module to make a copy
of the object. You do this because you will be editing the transaction in-place
and don’t want to have any partially edited transactions stuck in the <tt><span
style='font-size:10.0pt'>BookSet</span></tt>. If the dialog is being used to
add a new transaction, create one, and then fix its date by truncating the time
from it. The default date in the transaction includes the current time, but
this dialog is equipped to deal only with the date portion.</p>

<p>If you review the sidebar wxPython Window Layout, you’ll see a number of
choices available, but we have chosen to use the brute-force mechanism for the
Edit Transaction dialog:</p>

<pre># Create some controls</pre><pre>wxStaticText(self, -1, &quot;Date:&quot;, wxDLG_PNT(self, 5,5))</pre><pre>self.date = wxTextCtrl(self, ID_DATE, &quot;&quot;,</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wxDLG_PNT(self, 35,5), wxDLG_SZE(self, 50,-1))</pre><pre>&nbsp;</pre><pre>&nbsp;&nbsp;&nbsp; wxStaticText(self, -1, &quot;Comment:&quot;, wxDLG_PNT(self, 5,21))</pre><pre>&nbsp;&nbsp;&nbsp; self.comment = wxTextCtrl(self, ID_COMMENT, &quot;&quot;,</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wxDLG_PNT(self, 35, 21), wxDLG_SZE(self, 195,-1)</pre>

<p>The code shows how to create the labels and the text fields at the top of
the dialog. Notice the use of <tt><span style='font-size:10.0pt'>wxDLG_PNT</span></tt>
and <tt><span style='font-size:10.0pt'>wxDLG_SZE</span></tt> to convert dialog
units to a <tt><span style='font-size:10.0pt'>wxPoint</span></tt> and a <tt><span
style='font-size:10.0pt'>wxSize</span></tt>, respectively. (The -1’s used above
mean that the default size should be used for the height.) Using dialog units
instead of pixels to define the dialog means you are somewhat insulated from
changes in the font used for the dialog, so you use dialog units wherever possible.
The <tt><span style='font-size:10.0pt'>wxPoint</span></tt> and <tt><span
style='font-size:10.0pt'>wxSize</span></tt> are always defined in terms of
pixels, but these conversion functions allow the actual number of pixels used
to vary automatically from machine to machine with different fonts. This makes
it easy to move programs between platforms that have completely different
window managers. <a href="24.htm#_Figure_20.13._The_wxPython_Doubleta">Figure
20.13</a> shows this same program running on RedHat Linux 6.0, and you can see
that for the most part, the controls are still spaced appropriately even though
a completely different font is used on the form. It looks like the <tt><span
style='font-size:10.0pt'>wxTextCtrl</span></tt> is a few dialog units taller on
this platform, so perhaps there should be a bit more space between the rows. We
leave this as an exercise for you.</p>

<p>The next control to be defined is the <tt><span style='font-size:10.0pt'>wxListCtrl</span></tt>
that displays the account and amount lines:</p>

<pre>&nbsp;&nbsp;&nbsp; self.lc = wxListCtrl(self, ID_LIST,</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wxDLG_PNT(self, 5,34), wxDLG_SZE(self, 225,60),</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wxLC_REPORT)</pre><pre>&nbsp;</pre><pre>&nbsp;&nbsp; &nbsp;self.lc.InsertColumn(0, &quot;Account&quot;)</pre><pre>&nbsp;&nbsp;&nbsp; self.lc.InsertColumn(1, &quot;Amount&quot;)</pre><pre>&nbsp;&nbsp;&nbsp; self.lc.SetColumnWidth(0, wxDLG_SZE(self, 180,-1).width)</pre><pre>&nbsp;&nbsp;&nbsp; self.lc.SetColumnWidth(1, wxDLG_SZE(self,&nbsp; 40,-1).width)</pre>

<p>It’s important to note that the width of this control is 225 dialog units.
Since this control spans the entire width of the dialog, you know the space you
have to work with. You can use this value when deciding where to place or how
to size the other controls.</p>

<p>Instead of auto-sizing the width of the list columns, let’s now use explicit
sizes. But you can still use dialog units to do it by extracting the <tt><span
style='font-size:10.0pt'>width</span></tt> attribute from the <tt><span
style='font-size:10.0pt'>wxSize</span></tt> object returned from <tt><span
style='font-size:10.0pt'>wxDLG_SZE</span></tt>. We should mention the following
points:</p>

<p>&nbsp;</p>

<h5 align=center style='text-align:center;page-break-after:avoid'><a
name="_Figure_20.13._The_wxPython_Doubleta"></a>Figure 20.13. The wxPython
Doubletalk editor running on Redhat Linux 6.0</h5>

<p class=MsoNormal align=center style='text-align:center'><span
style='font-family:Arial'><img border=0 width=502 height=380
src="images\image075.gif" alt="figs/ppw.2013.gif"></span></p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>The balance field is disabled, as you only want to use it to display a
value.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Use a <tt><span style='font-size:10.0pt'>wxStaticLine</span></tt>
control for drawing the line across the dialog.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>A <tt><span style='font-size:10.0pt'>wxComboBox</span></tt> is used for
selecting existing account names from a list.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Use the standard IDs <tt><span style='font-size:10.0pt'>wxID_OK</span></tt>
and <tt><span style='font-size:10.0pt'>wxID_CANCEL</span></tt> for OK and
Cancel buttons, respectively, and force the OK button as the default button.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Call the base class <tt><span style='font-size:10.0pt'>Fit()</span></tt>
method to determine the initial size of the dialog window. This function
calculates the total required size based on the size information specified in
each of the children.</p>

<p>Here’s the rest of the code for creating the controls:</p>

<pre>&nbsp;&nbsp;&nbsp; wxStaticText(self, -1, &quot;Balance:&quot;, wxDLG_PNT(self, 165,100))</pre><pre>&nbsp;&nbsp;&nbsp; self.balance = wxTextCtrl(self, ID_BAL, &quot;&quot;,</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wxDLG_PNT(self, 190,100), </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wxDLG_SZE(self, 40, -1))</pre><pre>&nbsp;&nbsp;&nbsp; self.balance.Enable(false)</pre><pre>&nbsp;</pre><pre>&nbsp;&nbsp;&nbsp; wxStaticLine(self, -1, wxDLG_PNT(self, 5,115), </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wxDLG_SZE(self, 225,-1))</pre><pre>&nbsp;</pre><pre>&nbsp;&nbsp;&nbsp; wxStaticText(self, -1, &quot;Account:&quot;, wxDLG_PNT(self, 5,122))</pre><pre>&nbsp;&nbsp;&nbsp; self.account = wxComboBox(self, ID_ACCT, &quot;&quot;,</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wxDLG_PNT(self, 30,122), wxDLG_SZE(self, 130,-1),</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;accountList, wxCB_DROPDOWN | wxCB_SORT)</pre><pre>&nbsp;</pre><pre>&nbsp;&nbsp;&nbsp; wxStaticText(self, -1, &quot;Amount:&quot;, wxDLG_PNT(self, 165,122))</pre><pre>&nbsp;&nbsp;&nbsp; self.amount = wxTextCtrl(self, ID_AMT, &quot;&quot;,</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wxDLG_PNT(self, 190,122), </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wxDLG_SZE(self, 40, -1))</pre><pre>&nbsp;</pre><pre>&nbsp;&nbsp;&nbsp; btnSz = wxDLG_SZE(self, 40,12)</pre><pre>&nbsp;&nbsp;&nbsp; wxButton(self, ID_ADD, &quot;&amp;Add Line&quot;, wxDLG_PNT(self, 52,140), btnSz)</pre><pre>&nbsp;&nbsp;&nbsp; wxButton(self, ID_UPDT, &quot;&amp;Update Line&quot;, wxDLG_PNT(self, 97,140),</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; btnSz)</pre><pre>&nbsp;&nbsp;&nbsp; wxButton(self, ID_DEL, &quot;&amp;Delete Line&quot;, wxDLG_PNT(self, 142,140),</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; btnSz)</pre><pre>&nbsp;</pre><pre>&nbsp;&nbsp;&nbsp; self.ok = wxButton(self, wxID_OK, &quot;OK&quot;, wxDLG_PNT(self, 145,5),</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; btnSz)</pre><pre>&nbsp;&nbsp;&nbsp; self.ok.SetDefault()</pre><pre>&nbsp;&nbsp;&nbsp; wxButton(self, wxID_CANCEL, &quot;Cancel&quot;, wxDLG_PNT(self, 190,5), btnSz)</pre><pre>&nbsp;</pre><pre>&nbsp;&nbsp;&nbsp; # Resize the window to fit the controls</pre><pre>&nbsp;&nbsp;&nbsp; self.Fit()</pre>

<p>The last thing to do is set up some event handlers and load the dialog
controls with data. The event handling for the controls is almost identical to
the menu handling discussed previously, so there shouldn’t be any surprises:</p>

<pre>&nbsp;&nbsp;&nbsp; # Set some event handlers</pre><pre>&nbsp;&nbsp;&nbsp; EVT_BUTTON(self, ID_ADD,&nbsp; self.OnAddBtn)</pre><pre>&nbsp;&nbsp;&nbsp; EVT_BUTTON(self, ID_UPDT, self.OnUpdtBtn)</pre><pre>&nbsp;&nbsp;&nbsp; EVT_BUTTON(self, ID_DEL,&nbsp; self.OnDelBtn)</pre><pre>&nbsp;&nbsp;&nbsp; EVT_LIST_ITEM_SELECTED(self,&nbsp;&nbsp; ID_LIST, self.OnListSelect)</pre><pre>&nbsp;&nbsp;&nbsp; EVT_LIST_ITEM_DESELECTED(self, ID_LIST, self.OnListDeselect)</pre><pre>&nbsp;&nbsp;&nbsp; EVT_TEXT(self, ID_DATE, self.Validate)</pre><pre>&nbsp;</pre><pre>&nbsp;&nbsp;&nbsp; # Initialize the controls with current values</pre><pre>&nbsp;&nbsp;&nbsp; self.date.SetValue(self.trans.getDateString())</pre><pre>&nbsp;&nbsp;&nbsp; self.comment.SetValue(self.trans.comment)</pre><pre>&nbsp;&nbsp;&nbsp; for x in range(len(self.trans.lines)):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; account, amount, dict = self.trans.lines[x]</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.lc.InsertStringItem(x, account)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.lc.SetStringItem(x, 1, str(amount))</pre><pre>&nbsp;</pre><pre>&nbsp;&nbsp;&nbsp; self.Validate()</pre>

<p>The last thing the code snippet does is call a <tt><span style='font-size:
10.0pt'>Validate()</span></tt> method, which as you can probably guess, is
responsible for validating the dialog data; in this case, validating the date
and that all transaction lines sum to zero. Check the date when the field is
updated (via the <tt><span style='font-size:10.0pt'>EVT_TEXT()</span></tt> call
shown in the code) and check the balance any time a line is added or updated.
If anything doesn’t stack up, disable the OK button. Here is <tt><span
style='font-size:10.0pt'>Validate</span></tt>:</p>

<pre>def Validate(self, *ignore):</pre><pre>&nbsp;&nbsp;&nbsp; bal = self.trans.balance()</pre><pre>&nbsp;&nbsp;&nbsp; self.balance.SetValue(str(bal))</pre><pre>&nbsp;&nbsp;&nbsp; date = self.date.GetValue()</pre><pre>&nbsp;&nbsp;&nbsp; try:</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dateOK = (date == dates.testasc(date))</pre><pre>&nbsp;&nbsp;&nbsp; except:</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dateOK = 0</pre><pre>&nbsp;</pre><pre>&nbsp;&nbsp;&nbsp; if bal == 0 and dateOK:</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.ok.Enable(true)</pre><pre>&nbsp;&nbsp;&nbsp; else:</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.ok.Enable(false)</pre>

<p>Notice that the balance field is updated. The next thing we demonstrate is
the Add Line functionality. To do this, you need to take whatever is in the
account and amount fields, add them to the transaction, and also add them to
the list control:</p>

<pre>def OnAddBtn(self, event):</pre><pre>&nbsp;&nbsp;&nbsp; account = self.account.GetValue()</pre><pre>&nbsp;&nbsp;&nbsp; amount = string.atof(self.amount.GetValue())</pre><pre>&nbsp;&nbsp;&nbsp; self.trans.addLine(account, amount)</pre><pre>&nbsp;</pre><pre>&nbsp;&nbsp;&nbsp; # update the list control</pre><pre>&nbsp;&nbsp;&nbsp; idx = len(self.trans.lines)</pre><pre>&nbsp;&nbsp;&nbsp; self.lc.InsertStringItem(idx-1, account)</pre><pre>&nbsp;&nbsp;&nbsp; self.lc.SetStringItem(idx-1, 1, str(amount))</pre><pre>&nbsp;</pre><pre>&nbsp;&nbsp;&nbsp; self.Validate()</pre><pre>&nbsp;&nbsp;&nbsp; self.account.SetValue(&quot;&quot;)</pre><pre>&nbsp;&nbsp;&nbsp; self.amount.SetValue(&quot;&quot;)</pre>

<p>You call <tt><span style='font-size:10.0pt'>Validate</span></tt> again to
check if the transaction’s lines are in balance. The event handlers for the
Update and Delete buttons are similar and not shown here.</p>

<p>That’s about all there is to it! <tt><span style='font-size:10.0pt'>wxPython</span></tt>
takes care of the tab-traversal between fields, auto-completion on the Enter
key, auto-cancel on Esc, and all the rest. </p>

<h4>20.3.5 wxPython Conclusion</h4>

<p>This small section has barely touched the surface of what <tt><span
style='font-size:10.0pt'>wxPython</span></tt> is capable of. There are many
more window and control types than what have been shown here, and the advanced
features lend themselves to highly flexible and dynamic GUI applications across
many platforms. Combined with the flexibility of Python, you end up with a
powerful tool for quickly creating world-class applications.</p>

<p>For more information on <tt><span style='font-size:10.0pt'>wxPython</span></tt>,
including extensive documentation and sample code, see the <tt><span
style='font-size:10.0pt'>wxPython</span></tt> home page at <a
href="http://alldunn.com/wxPython/" target="_blank">http://alldunn.com/wxPython/</a>.</p>

<p>For more information on the underlying <tt><span style='font-size:10.0pt'>wxWindows</span></tt>
framework, please visit its home page at <a href="http://www.wxwindows.org/"
target="_blank">http://www.wxwindows.org/</a>.</p>

<p class=MsoFootnoteText><a name="_ftn19"></a><a
href="24.htm#_ftnref19" title=""><span
class=MsoFootnoteReference>[1]</span></a> <span style='font-size:7.5pt'>When
getting started, you should probably avoid using PythonWin or IDLE for running </span><tt>wxPython</tt><span
style='font-size:7.5pt'> programs, because the interactions between the various
toolkits may have unexpected consequences.</span></p>

<p class=MsoNormal>&nbsp;</p>

<div align=center>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 width="90%"
 style='width:90.0%;background:#ECECD9;border-collapse:collapse;border:none'>
 <tr>
  <td width="33%" style='width:33.0%;border:inset #111111 1.0pt;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><a href="23.htm"><span style='text-decoration:none'><img
  border=0 width=37 height=34 src="leftarrw.gif"></span></a></p>
  </td>
  <td width="33%" style='width:33.0%;border:inset #111111 1.0pt;border-left:
  none;padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><a href="0.htm"><span
  style='font-size:13.5pt'>Table of Contents</span></a></p>
  </td>
  <td width="34%" style='width:34.0%;border:inset #111111 1.0pt;border-left:
  none;padding:.75pt .75pt .75pt .75pt'>
  <p align=right style='text-align:right'><a href="25.htm"><span
  style='text-decoration:none'><img border=0 width=37 height=34
  src="rightarrw.gif"></span></a></p>
  </td>
 </tr>
</table>

</div>

<p class=MsoNormal>&nbsp;</p>

</div>

</body>

</html>
