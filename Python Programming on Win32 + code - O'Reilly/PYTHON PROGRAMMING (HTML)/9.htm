<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=utf-8">
<meta name=Generator content="Microsoft Word 10 (filtered)">
<title> </title>

<link rel=Stylesheet type="text/css" media=all href="1.css">
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Tahoma;
	panose-1:2 11 6 4 3 5 4 4 2 4;}
@font-face
	{font-family:Verdana;
	panose-1:2 11 6 4 3 5 4 4 2 4;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;}
h1
	{margin-top:1.0in;
	margin-right:0in;
	margin-bottom:.5in;
	margin-left:0in;
	text-align:center;
	page-break-before:always;
	font-size:24.0pt;
	font-weight:bold;}
h2
	{page-break-before:always;
	font-size:18.0pt;
	font-weight:bold;}
h3
	{font-size:13.5pt;
	font-weight:bold;}
h4
	{font-size:12.0pt;
	font-weight:bold;}
h5
	{font-size:10.0pt;
	font-weight:bold;}
p.MsoFootnoteText, li.MsoFootnoteText, div.MsoFootnoteText
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;}
p.MsoTitle, li.MsoTitle, div.MsoTitle
	{font-size:12.0pt;
	font-weight:bold;}
p.MsoBodyText3, li.MsoBodyText3, div.MsoBodyText3
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:0in;
	font-size:8.0pt;}
p.MsoDocumentMap, li.MsoDocumentMap, div.MsoDocumentMap
	{margin:0in;
	margin-bottom:.0001pt;
	background:navy;
	font-size:12.0pt;}
p
	{font-size:12.0pt;}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;}
p.footnote, li.footnote, div.footnote
	{font-size:12.0pt;}
p.monofont, li.monofont, div.monofont
	{font-size:12.0pt;}
p.romanfont, li.romanfont, div.romanfont
	{font-size:12.0pt;}
p.atitle, li.atitle, div.atitle
	{font-size:9.0pt;
	font-weight:bold;}
p.chaptertitle, li.chaptertitle, div.chaptertitle
	{margin-top:0in;
	margin-right:7.5pt;
	margin-bottom:0in;
	margin-left:7.5pt;
	margin-bottom:.0001pt;
	font-size:12.0pt;}
p.sectiontitle, li.sectiontitle, div.sectiontitle
	{margin-top:0in;
	margin-right:15.0pt;
	margin-bottom:0in;
	margin-left:15.0pt;
	margin-bottom:.0001pt;
	font-size:12.0pt;}
p.itable, li.itable, div.itable
	{font-size:12.0pt;}
p.tiny, li.tiny, div.tiny
	{font-size:7.0pt;}
p.multiselect, li.multiselect, div.multiselect
	{font-size:7.5pt;}
p.safnavoff, li.safnavoff, div.safnavoff
	{font-size:8.5pt;}
p.safnavon, li.safnavon, div.safnavon
	{font-size:8.5pt;
	font-weight:bold;}
p.navtopbg, li.navtopbg, div.navtopbg
	{background:#990000;
	font-size:12.0pt;}
p.navleftbg, li.navleftbg, div.navleftbg
	{background:#666666;
	font-size:12.0pt;}
p.navleftbgalt, li.navleftbgalt, div.navleftbgalt
	{background:#666666;
	font-size:12.0pt;}
p.navtitle, li.navtitle, div.navtitle
	{font-size:9.0pt;
	font-weight:bold;}
p.nonavtitle, li.nonavtitle, div.nonavtitle
	{font-size:9.0pt;
	font-weight:bold;}
p.bimodoff, li.bimodoff, div.bimodoff
	{font-size:12.0pt;}
p.bimodon, li.bimodon, div.bimodon
	{font-size:12.0pt;}
p.btblinks, li.btblinks, div.btblinks
	{font-size:8.5pt;}
p.btlinksactive, li.btlinksactive, div.btlinksactive
	{font-size:12.0pt;
	font-weight:bold;}
p.inputtext, li.inputtext, div.inputtext
	{font-size:12.0pt;}
p.inputbutton, li.inputbutton, div.inputbutton
	{font-size:12.0pt;
	font-weight:bold;}
p.endsearch, li.endsearch, div.endsearch
	{font-size:12.0pt;
	font-weight:bold;}
p.dropdown, li.dropdown, div.dropdown
	{font-size:12.0pt;}
p.navtoptoolbg, li.navtoptoolbg, div.navtoptoolbg
	{background:black;
	font-size:12.0pt;}
p.headingbarbg, li.headingbarbg, div.headingbarbg
	{background:#333333;
	font-size:12.0pt;}
p.headingsubbarbg, li.headingsubbarbg, div.headingsubbarbg
	{background:#CCCCCC;
	font-size:12.0pt;}
p.headingbartitle, li.headingbartitle, div.headingbartitle
	{font-size:10.5pt;
	font-weight:bold;}
p.headingsubbartitle, li.headingsubbartitle, div.headingsubbartitle
	{font-size:9.0pt;
	font-weight:bold;}
p.tablestripe, li.tablestripe, div.tablestripe
	{background:#EEEEEE;
	font-size:12.0pt;}
p.pgtitle, li.pgtitle, div.pgtitle
	{font-size:12.0pt;
	font-weight:bold;}
p.buyprint, li.buyprint, div.buyprint
	{font-size:7.5pt;}
p.resulthighlight, li.resulthighlight, div.resulthighlight
	{background:lightblue;
	font-size:12.0pt;}
p.pgsubtitle, li.pgsubtitle, div.pgsubtitle
	{font-size:12.0pt;
	font-weight:bold;}
p.helphead, li.helphead, div.helphead
	{font-size:12.0pt;
	font-weight:bold;}
p.helpsubhead, li.helpsubhead, div.helpsubhead
	{font-size:10.0pt;}
p.helpcaption, li.helpcaption, div.helpcaption
	{font-size:10.0pt;}
p.helptab, li.helptab, div.helptab
	{font-size:10.0pt;}
p.sm, li.sm, div.sm
	{font-size:6.0pt;}
p.gowild, li.gowild, div.gowild
	{font-size:13.5pt;
	font-weight:bold;
	font-style:italic;}
p.getstarted, li.getstarted, div.getstarted
	{font-size:10.0pt;
	font-weight:bold;
	font-style:italic;}
@page Section1
	{size:8.5in 11.0in;
	margin:1.0in 1.25in 1.0in 1.25in;}
div.Section1
	{page:Section1;}
-->
</style>

</head>

<body lang=EN-US link="#990000" vlink=purple>

<div class=Section1>

<div align=center>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 width="90%"
 style='width:90.0%;background:#ECECD9;border-collapse:collapse;border:none'>
 <tr>
  <td width="33%" style='width:33.0%;border:inset #111111 1.0pt;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><a href="8.htm"><span style='text-decoration:none'><img
  border=0 width=37 height=34 src="leftarrw.gif"></span></a></p>
  </td>
  <td width="33%" style='width:33.0%;border:inset #111111 1.0pt;border-left:
  none;padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><a href="0.htm"><span
  style='font-size:13.5pt'>Table of Contents</span></a></p>
  </td>
  <td width="34%" style='width:34.0%;border:inset #111111 1.0pt;border-left:
  none;padding:.75pt .75pt .75pt .75pt'>
  <p align=right style='text-align:right'><a href="10.htm"><span
  style='text-decoration:none'><img border=0 width=37 height=34
  src="rightarrw.gif"></span></a></p>
  </td>
 </tr>
</table>

</div>

<p class=MsoNormal style='margin-bottom:12.0pt'>&nbsp;</p>

<h2><a name="_Chapter_6._A_Financial_Modeling_Too"></a>Chapter 6. A Financial
Modeling Toolkit in Python</h2>

<p>Welcome to <a href="8.htm#_Part_II:_Building_an_Advanced_Pytho">Part II</a>.
By now you should have a good idea what Python is and the general techniques
for integrating Python into a Windows environment. <a
href="#_Part_II:_Building_an_Advanced_Pytho">Part II</a> focuses on developing
an advanced Windows application using Python and COM. Over the next few
chapters, we’ll build the core of an application, put an industry-standard
Visual Basic GUI up front, demonstrate how to access it from other Office applications,
show how to give the users a macro language and their own scripting
capabilities, and introduce distributed processing.</p>

<p>In this chapter, there won’t be any Windows specifics. Instead, we’ll design
and build a Python engine that is sophisticated enough to do some interesting
and useful work; we’ll then develop and integrate this further into Windows
over the next few chapters. If you are new to Python, this chapter should also
strengthen your understanding of object-oriented programming in Python and of
manipulating basic data structures such as lists and dictionaries. Although
this is just an example application, we’ll touch on how you would optimize for
both performance and robustness in a commercial environment.</p>

<h3><a name="_6.1_Doubletalk"></a>6.1 Doubletalk</h3>

<p>The example application is a slimmed-down version of a set of tools
developed by one of the authors over the last few years. The toolkit is
intended to be a language for <i>double-entry bookkeeping</i> , hence the name <i>DoubleTalk</i>.
The original intention, many years ago, was to develop a language for dealing
with financial objects, in which users could express and solve a variety of
financial problems. An absolute requirement is for end users to be able to work
interactively and compile and run their own scripts. Python took away the need
to create a whole new language; all that is needed is a class library.</p>

<p>We believe this general approach has great benefits in other fields. If you
can build a class library to capture the essence of some problem domain and
expose those classes to users in an easy-to-use environment like Python, you
give them the ability to create new applications for themselves.</p>

<div align=center>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 width="90%"
 style='width:90.0%;background:black'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 width="100%"
   style='width:100.0%;background:white'>
   <tr>
    <td width=60 valign=top style='width:45.0pt;padding:4.5pt 4.5pt 4.5pt 4.5pt'>
    <p class=MsoNormal><span style='font-family:Arial'><img border=0 width=51
    height=36 src="images\image003.gif"></span></p>
    </td>
    <td valign=top style='padding:4.5pt 4.5pt 4.5pt 4.5pt'>
    <p>Since this is an example in a book and not a commercial product, let’s
    clearly state our “quality objective.” We want a simple class library that
    lets a careful user write scripts to manipulate financial data. We aren’t
    creating a production-quality application that checks everything and saves
    the user from all possible mistakes, and there will be a number of
    shortcuts and hacks a production application would not take; we’ll point
    these out as we go.</p>
    </td>
   </tr>
  </table>
  <p class=MsoNormal></p>
  </td>
 </tr>
</table>

</div>

<p>The core of the library is a pair of classes, <tt><span style='font-size:
10.0pt'>Transaction</span></tt> and <tt><span style='font-size:10.0pt'>BookSet</span></tt>
, which aim to capture the essence of a set of accounts. They enforce the rules
of accounting that must be obeyed, but allow the user to perform a wide range
of high-level manipulations.</p>

<p>Applications for the toolkit might include:</p>

<p class=MsoNormal><i><span style='font-family:Arial;color:#990000'>Doing real
accounts </span></i></p>

<p style='margin-left:.5in'>Although the class library could do this, it
probably shouldn’t; the place for a small company’s accounts is in a commercial
accounting package, and the place for a large company’s accounts is in a
well-managed and secure database. Nevertheless, the toolkit could be used as a
layer on top of a more-secure form of storage.</p>

<p class=MsoNormal><i><span style='font-family:Arial;color:#990000'>Doing
forecast accounts</span></i><span style='font-family:Arial'> </span></p>

<p style='margin-left:.5in'>You can write a Python simulation program to
generate streams of future transactions. Such a simulation starts off with some
sort of real accounts to date and adds expected future transactions. This
builds a seamless picture for a business in which past and future results are
evaluated on the same basis.</p>

<p class=MsoNormal><i><span style='font-family:Arial;color:#990000'>Matching up
sets of accounts</span></i><span style='font-family:Arial'> </span></p>

<p style='margin-left:.5in'>Accountants and financial analysts often need to
compare accounts. The comparison could be for different companies, different
periods with varying accounting standards, or several subsidiaries needing to
consolidate accounts into one coherent set of books. To do this you need
interactive tools to spot gaps, close them with the right entries, establish
the transformations, and write cleanup scripts.</p>

<p class=MsoNormal><i><span style='font-family:Arial;color:#990000'>Data
laundering</span></i><span style='font-family:Arial'> </span></p>

<p style='margin-left:.5in'>You can acquire data from various databases and
manual sources and write scripts to convert the data into transactions, integrating
them into one overall picture of a business.</p>

<p class=MsoNormal><i><span style='font-family:Arial;color:#990000'>Market
models </span></i></p>

<p style='margin-left:.5in'>In the securities business people frequently model
the behavior of financial instruments under various conditions. These instruments
can be created as objects that generate transactions in response to chronology
or changing economic variables. A Python simulation won’t be as fast as C++,
but you can have it today instead of next month. The model output includes
detailed portfolio breakdowns (the balance sheet) at each point, as well as a
profit-and-loss picture.</p>

<p class=MsoNormal><i><span style='font-family:Arial;color:#990000'>Reporting</span></i><span
style='font-family:Arial'> </span></p>

<p style='margin-left:.5in'>Financial reports can be complex; they involve a
lot of tables with numbers. But there are also things that must add up and
rules the numbers must obey. These constraints derive from the double-entry
accounting model, and reports are far easier to design if you start with a
coherent data model.</p>

<p>Why use Python? Quite simply, because all these tasks vary slightly from
company to company and from situation to situation. Rather than a monolithic
application, what you need is a basic set of tools for dealing with financial
objects that ensure the rules are respected and a macro language to let you
customize their behavior. </p>

<h3><a name="_6.2_A_Crash_Course_in_Accounting"></a>6.2 A Crash Course in
Accounting</h3>

<p>We’ll make this as quick as possible. There are two concepts to grasp:
transactions and the chart of accounts.</p>

<h4>6.2.1 Transactions</h4>

<p>The <i>double-entry</i> system of accounting dates back over 400 years, to
an Italian named Fra. Luca Pacioli (who recently had a PC accounting package
named after him). The key idea was to keep track of where money comes from and
where it goes. Double-entry must rate as one of the most powerful notations
ever, the business equivalent of Newton’s achievements in physics. What follows
is a formal notation and set of rules to encapsulate double-entry. As with
physics, it’s best just to work through a few examples rather than analyze the
concepts too early.</p>

<p>A <i>transaction</i> is a financial event. It occurs at a certain point in
time, affects two or more accounts, and the effect of those accounts sums to
zero. The use of the term transaction<i> </i>in the database world was borrowed
from accountants, who got there first by a few centuries. The key concept is
that the whole thing has to happen at once or not at all; if only part of a
transaction takes place, your system goes out of whack. Conceptually you can
lay one out on the page like the following table.</p>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 width="100%"
 style='width:100.0%'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Date:</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>01/01/1998</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Comment:</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Start the company</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Cash</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>+10 000</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Share Capital</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>-10 000</span></p>
  </td>
 </tr>
</table>

<p>A set of accounts (or <tt><span style='font-size:10.0pt'>BookSet</span></tt>
) is basically a list of such transactions. An account is a way of categorizing
money, but it has no precise economic meaning; fortunately, it soon becomes
obvious what an account means in practice.</p>

<p>Here’s what happens when you go out and buy something for cash.</p>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 width="100%"
 style='width:100.0%'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Date:</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>07/03/1998</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Comment:</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Buy computer manuals</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Cash</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>-27.95</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Expenditure (Publications)</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>+27.95</span></p>
  </td>
 </tr>
</table>

<p>By convention, increases in cash are positive, and decreases are negative. Thus,
accounts for tracking expenditure like the previous one for Publications, are
usually positive, and Share Capital (from the first example) has to be
negative. The nonintuitive part is that accounts for classifying income have to
be negative<i>, </i>and so does profit, which is income minus expenditure. It
could as easily have been the other way around, but the decision was made
centuries ago.</p>

<p>Cleaning this process up for the shareholders and managers should be a
function of the <i>reporting layer</i> of the system, which aims to hide the
complexity of these negative numbers. Only the programmer or database designer
really needs to grasp them.</p>

<p>The ancients were not so happy with negative numbers and used the left and
right sides of a sheet of paper, naming them <i>debit</i> and <i>credit</i>,
which are <i>plus</i> and <i>minus</i> in our system. Accountants just knew
that cash went on the left and income went on the right, and nobody saw a minus
sign. Most people expect it to be the other way around, but the banks have been
fooling you by using their viewpoint on statements and not the customer’s; when
your bank statement says “CR” in small letters, it means the bank is in credit:
they owe you money. We programmers should be perfectly happy with a minus sign
and a list of numbers, so we’ll use the raw data.</p>

<p>It’s worth noting that the phrase double-entry bookkeeping itself is
slightly out of date. The old paper procedures involved two entries, but with
the addition of sales taxes, many real-world transactions have three entries,
and others have many entries. So <i>multiple-entry</i> would be a better name.
If a business sells three items in the United Kingdom you want to classify
separately and where sales tax is 17.5%, the sales transaction needs five
entries that look like the following table.</p>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 width="100%"
 style='width:100.0%'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Date:</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>10/03/1999</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Comment:</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Sell Widgets</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Cash</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>+117.50</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Sales Category 1</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>-50.00</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Sales Category 2</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>-30.00</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Sales Category 3</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>-20.00</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Sales tax on all three (owed to Customs
  &amp; Excise)</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>-17.50</span></p>
  </td>
 </tr>
</table>

<p>Unfortunately, accountants generally are not database designers, and
arguments rage in theoretical texts over the proper way to deconstruct this
into pairs of entries. We won’t worry about it; we’ve got a simple
master-detail view and a constraint that the right column sums to zero, and
that’s all there is to it. </p>

<h4>6.2.2 The Chart of Accounts</h4>

<p>The second concept to grasp is that of the <i>chart</i> <i>of</i> <i>accounts</i>,
or as we call it, the <i>tree</i> <i>of</i> <i>accounts</i>. There is an almost
universal consensus on what standard accounts should be called and how they
relate to each other. This is a large part of what is known as Generally
Accepted Accounting Practice or GAAP<i>.</i> If you have ever struggled with
rules such as <i>assets = liabilities + capital</i> , relax: we deal with that
in the next few minutes. Every company’s balance sheet is just a tree, and
(with the arrival of Windows 95) almost everyone in the world knows what tree
views look like, as shown in <a
href="9.htm#_Figure_6.1._The_outermost_layers_of">Figure 6.1</a>.</p>

<p><a href="9.htm#_Figure_6.1._The_outermost_layers_of">Figure 6.1</a> shows a
tree view of a company’s account structure. The balance sheet has two sections,
Net Assets and Capital, both of which necessarily have equal size and opposite
signs.<a name="_ftnref4"></a><a href="#_ftn4"><span class=atitlechar><sup><span
style='font-size:9.0pt'>[1]</span></sup></span></a> Net Assets are what the
company is worth on paper and include Assets, which have a plus sign, and
Liabilities, which have a negative sign. The totals on the right are inclusive
balances showing everything in the tree below that point; ignore them for now.</p>

<h5 align=center style='text-align:center'><a
name="_Figure_6.1._The_outermost_layers_of"></a>Figure 6.1. The outermost
layers of a balance sheet, as a tree</h5>

<p class=MsoNormal align=center style='text-align:center'><span
style='font-family:Arial'><img border=0 width=502 height=114
src="images\image018.gif" alt="figs/ppw.0601.gif"></span></p>

<p>If you investigate further (see <a
href="#_Figure_6.2._A_simple_tree_of_accoun">Figure 6.2</a>), you’ll see that
Assets are made up of cash, tangible assets a company owns (like computers),
and money owed by others. Similarly, Liabilities includes overdrafts, money owed
to creditors, and long-term loans. Capital, which has to match Net Assets, is
made up of what you started with (your capital) and what you have made or lost
since (Profit/Loss). Profit/Loss is simply income minus expenditure.</p>

<h5 align=center style='text-align:center'><a
name="_Figure_6.2._A_simple_tree_of_accoun"></a>Figure 6.2. A simple tree of
accounts</h5>

<p class=MsoNormal align=center style='text-align:center'><span
style='font-family:Arial'><img border=0 width=502 height=211
src="images\image019.gif" alt="figs/ppw.0602.gif"></span></p>

<p>Naturally, Income and Expenditure can be divided into further specific
categories, as can just about any of the accounts. But this is the simplest,
reasonably complete picture of an accounting system.</p>

<h5>6.2.2.1 Timing considerations</h5>

<p><a href="9.htm#_Figure_6.2._A_simple_tree_of_accoun">Figure 6.2</a> is
essentially correct but a bit too simple for the real world. What follows presents
more realistic data, so feel free to skip to the next section if it doesn’t
interest you.</p>

<p>One of the main reasons companies have to publish accounts is to tell the
world how safe they are to do business with. There are two definitions of
insolvency. If a company’s net assets go below zero, it’s insolvent. However,
an important consideration for managers, suppliers, and shareholders is whether
the company has enough cash to meet its short-term obligations. If a company
doesn’t appear able to meet its short-term obligations, it can also be ruled
insolvent. In the United Kingdom, there are titled aristocrats who own huge,
historic estates they are not allowed to sell or modify for heritage reasons,
and they can’t possibly meet the running costs. These people have positive net
assets, but they are insolvent by the second criterion. Company accounts have
to handle these possibilities. We therefore introduce a distinction between
current assets (cash, or things that should turn into cash within a year, like
stock and debtors) and fixed assets (things with longer term value, like your
factory). We then regroup things to get a single total of net current assets
(NCA), a key indication of the short-term health of a business.</p>

<p><a href="http://safari.oreilly.com/main.asp?bookname=pythonwin32&amp;snode=52#16">Figure
6.3</a> shows a simple business from two viewpoints. The left side displays six
transactions occurring in date order; the right, a tree view at a point in time
following the six transactions, with inclusive totals at each level. This is
the tree structure we will use in examples from now on. You may find it
interesting to trace how the totals were worked out.</p>

<h5 align=center style='text-align:center'><a
name="_Figure_6.3._A_set_of_books_showing_"></a>Figure 6.3. A set of books
showing Journal and Tree Views</h5>

<p class=MsoNormal align=center style='text-align:center'><span
style='font-family:Arial'><img border=0 width=502 height=370
src="images\image020.gif" alt="figs/ppw.0603.gif"></span></p>

<p>In the real world, category names differ from country to country, and there
are many more sublevels and exceptions to deal with. But the chart of accounts
is still a tree and broadly follows that pattern.</p>

<p>A large number of accounting systems don’t actually use a tree structure.
They have a flat list of numbered accounts with hardcoded rules defining which
numeric ranges are assets, liabilities, income, and expenditure. This can lead
to complex reporting problems, when the accounts system doesn’t quite match the
desired grouping for a particular kind of report. We’re going to sidestep all
that.</p>

<p>The data structures we need, then, must capture the following features:</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>A transaction affects a number of accounts, but must sum to zero.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>The accounts must be arranged in a tree.</p>

<h4>6.2.3 Back to Python</h4>

<p>Our design goal is a general-purpose toolkit that allows you to formulate
and solve financial problems in Python. To create the toolkit, we will build classes
to represent common financial objects. All the code is available for
downloading, so we show only selected excerpts; we do, however, list the main
functions our class library makes available, for use in later chapters.</p>

<p>First of all, let’s look at a few utilities. If you are fluent in Python,
the code will be straightforward and not particularly interesting; but please
skim through it anyway to grasp the business logic. If you are new to Python,
this chapter should help consolidate your understanding of the language.</p>

<h5>6.2.3.1 Dates and times</h5>

<p>Python uses the Unix time system, which measures seconds since midnight on
January 1, 1970 (which is when urban legend says the first Unix system booted
up). The latest time possible in the system is sometime on January 19, 2038. We
don’t want to be tied to this system forever and will therefore express input
and output in calendar units, hiding the actual implementation. The <i>dates.py</i>
module defines a few helper constants and functions.</p>

<p><tt><span style='font-size:10.0pt'>EARLY</span></tt> is defined as the
earliest date possible on your system or at least earlier than any transactions
you will enter. <tt><span style='font-size:10.0pt'>LATE</span></tt> is an
arbitrary date later than any transaction you will enter. The functions <tt><span
style='font-size:10.0pt'>asc2sec(aDateString</span></tt><i>)</i> and <tt><span
style='font-size:10.0pt'>sec2asc (aTime)</span></tt> convert between a string
representation such as 31-Dec-1998 and seconds. Be aware that the Python <tt><span
style='font-size:10.0pt'>time</span></tt> module exposes functions to do the
same thing, in a slightly wordy manner, but with more options. There is also a
package available called <tt><span style='font-size:10.0pt'>mxDateTime</span></tt>
that offers a wider range of date utilities and functions and is worth
considering for a commercial application.</p>

<p>The function <tt><span style='font-size:10.0pt'>later()</span></tt> works
with the constants <tt><span style='font-size:10.0pt'>YEARS</span></tt>, <tt><span
style='font-size:10.0pt'>MONTHS</span></tt>, <tt><span style='font-size:10.0pt'>WEEKS</span></tt>,
<tt><span style='font-size:10.0pt'>DAYS</span></tt>, <tt><span
style='font-size:10.0pt'>HOURS</span></tt>, <tt><span style='font-size:10.0pt'>MINUTES</span></tt>,
and <tt><span style='font-size:10.0pt'>SECONDS</span></tt> to let you do
calendar math easily. The following console session should clarify these:</p>

<pre>&gt;&gt;&gt; from dates import *</pre><pre>&gt;&gt;&gt; sec2asc(EARLY), sec2asc(LATE)</pre><pre>('1-Jan-1970', '19-Jan-2038')</pre><pre>&gt;&gt;&gt; endAugust = asc2sec('31-Aug-1999')</pre><pre>&gt;&gt;&gt; billingDate = later(endAugust, 5, DAYS)</pre><pre>&gt;&gt;&gt; sec2asc(billingDate)</pre><pre>'5-Sep-1999'</pre><pre>&gt;&gt;&gt; paymentDate = later(billingDate, 2, MONTHS)</pre><pre>&gt;&gt;&gt; sec2asc(paymentDate)</pre><pre>'5-Nov-1999'</pre><pre>&gt;&gt;&gt;</pre>

<p>Now we examine a couple of helper data structures that will come in handy
later. These can be found in the module <i>datastruct.py</i> . A <tt><span
style='font-size:10.0pt'>Set</span></tt> holds only one copy of each item; we’ll
use it to find the unique elements in a big list quickly. A <tt><span
style='font-size:10.0pt'>NumDict</span></tt> categorizes numbers. Here’s the
usage:</p>

<pre>&gt;&gt;&gt; import datastruct</pre><pre>&gt;&gt;&gt; myset = datastruct.Set()</pre><pre>&gt;&gt;&gt; myset.add('Spam')</pre><pre>&gt;&gt;&gt; myset.add('Eggs')</pre><pre>&gt;&gt;&gt; myset.add('Spam')</pre><pre>&gt;&gt;&gt; myset.contains('beer')</pre><pre>0</pre><pre>&gt;&gt;&gt; myset.elements()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # returned in alpha order</pre><pre>['Eggs', 'Spam']</pre><pre>&gt;&gt;&gt; sales = datastruct.NumDict()</pre><pre>&gt;&gt;&gt; sales['North'] = 100&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # direct assignment, like a dictionary</pre><pre>&gt;&gt;&gt; sales.inc('North',50)&nbsp;&nbsp;&nbsp;&nbsp; # increment it</pre><pre>&gt;&gt;&gt; sales.inc('East', 130)</pre><pre>&gt;&gt;&gt; sales['East']</pre><pre>130</pre><pre>&gt;&gt;&gt; sales.items()</pre><pre>[('East', 130), ('North', 150)]</pre><pre>&gt;&gt;&gt; sales['South']&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # returned in alpha order</pre><pre>0</pre><pre>&gt;&gt;&gt;</pre>

<p>Both structures are built on top of Python dictionaries and are extremely
efficient with large amounts of data. <tt><span style='font-size:10.0pt'>NumDict</span></tt>
is particularly useful as we will spend a lot of time categorizing numeric
data.</p>

<p>Now to see how these are defined. Here is the module <i>datastruct.py </i>:</p>

<pre># datastruct.py - some generic data structures</pre><pre># see the Language Reference under 3.3, Special Method Names</pre><pre>&nbsp;</pre><pre>class Set:</pre><pre>&nbsp;&nbsp;&nbsp; &quot;minimal implementation to help clarity of code elsewhere&quot;</pre><pre>&nbsp;&nbsp;&nbsp; def __init__(self):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.data = {}</pre><pre>&nbsp;&nbsp;&nbsp; def contains(self, element):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return self.data.has_key(element)</pre><pre>&nbsp;&nbsp;&nbsp; def add(self, element):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.data[element] = 1</pre><pre>&nbsp;&nbsp;&nbsp; def elements(self):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; keys = self.data.keys()</pre><pre> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;keys.sort()</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return keys</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </pre><pre>class NumDict:</pre><pre>&nbsp;&nbsp;&nbsp; &quot;Dictionary to categorize numbers.&quot;</pre><pre>&nbsp;</pre><pre>&nbsp;&nbsp;&nbsp; def __init__(self, input = None):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.data = {}</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if input is not None:</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for item in input:</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (category, value) = item</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.inc(category, value)&nbsp;&nbsp;&nbsp; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</pre><pre>&nbsp;</pre><pre>&nbsp;&nbsp;&nbsp; def __getitem__(self, key):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return self.data.get(key, 0)</pre><pre>&nbsp;</pre><pre>&nbsp;&nbsp;&nbsp; def __setitem__(self, key, value): </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.data[key] = value</pre><pre>&nbsp;&nbsp;&nbsp; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;def inc(self, key, value):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.data[key] = self.data.get(key, 0) + value</pre><pre>&nbsp;&nbsp;&nbsp; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;def items(self):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; it = self.data.items()</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; it.sort()</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return it</pre><pre>&nbsp;</pre><pre>&nbsp;&nbsp;&nbsp; def clear(self):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.data.clear()</pre>

<p>These data structures introduce some of Python’s Magic Methods such as __<tt><span
style='font-size:10.0pt'>getitem</span></tt>__<tt><span style='font-size:10.0pt'>(self,</span></tt>
<tt><span style='font-size:10.0pt'>key)</span></tt>. Magic Methods allow
user-defined classes to respond to just about every operator Python provides.
You can think of the most compact syntax you want for users of your class, and
then implement it with Magic Methods. They are fully documented in the Python
reference manual, Section 3.3, which is part of the standard distribution.</p>

<h4>6.2.4 Coding Transactions</h4>

<p>Now it’s time to design a core object model. The module <i>transac.py </i>defines
a <tt><span style='font-size:10.0pt'>Transaction</span></tt> class that
captures the key notions we covered earlier. It also goes somewhat further;
we’ve used Magic Methods to define a basic algebra of accounting. The class
construction is straightforward. However, first we need to mention three design
issues. Since this is a contrived application, we’ve gone for simple solutions
that are good enough for our needs; for a proper accounting system, the
solutions would be different.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>The first issue is how to represent the tree structure behind a
company’s accounts. After several years of experimenting with different
designs, it’s clear that simple strings do the job nicely. Thus a cash account
can be represented with a string like <i>MyCo.Assets.NCA.CurAss.Cash.MyWallet</i>.
This reduces lots of complex tree operations to simple string functions;
finding the sum of all cash accounts becomes trivial. It should of course be
hidden in the user interface to save end users from typing, but it clarifies
the data structure.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>The second issue is how to keep the balance sheet in the right order as
shown in <a href="9.htm#_Figure_6.3._A_set_of_books_showing_">Figure 6.3</a>.
You’ll see that the accounts were named in alphabetical order at every level;
we cheated and used <tt><span style='font-size:10.0pt'>1_NetAssets</span></tt>
and <tt><span style='font-size:10.0pt'>2_Capital</span></tt> at the top level
to force an alphabetical order. This hack keeps our tree in the conventional
balance sheet order without needing any extra sort fields. The display account
names used in reports (or indeed a GUI) could easily be looked up in a
dictionary.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>The final design issue is whether to have a separate class instance for
every single transaction, or to go for a lower-level (and faster)
implementation involving nested lists and tuples, since indexing into a list is
faster than accessing a class attribute. For this book we’ve opted for a slower
but more readable implementation, and a recent upgrade from 75 to 266 MHz
largely covers up the loss. We discuss options for optimizing later on.</p>

<p>Let’s take a quick tour of how to construct and work with transactions:</p>

<pre>&gt;&gt;&gt; import transac</pre><pre>&gt;&gt;&gt; T1 = transac.Transaction()</pre><pre>&gt;&gt;&gt; T1.date = asc2sec('1/1/1999')</pre><pre>&gt;&gt;&gt; T1.comment = 'Start the company'</pre><pre>&gt;&gt;&gt; T1.addLine('MyCo.Assets.NCA.CurAss.Cash', 10000)</pre><pre>&gt;&gt;&gt; T1.addLine('MyCo.Capital.Shares', -10000)</pre><pre>&gt;&gt;&gt; T1.validate()</pre><pre>&gt;&gt;&gt; T1.display()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # print to standard output</pre><pre>Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1-Jan-1999</pre><pre>Comment:&nbsp;&nbsp;&nbsp;&nbsp; Start the company</pre><pre>MyCo.Assets.NCA.CurAss.Cash&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 10000.000000</pre><pre>MyCo.Capital.Shares&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -10000.000000</pre><pre>&nbsp;</pre><pre>&gt;&gt;&gt; T2 = transac.Transaction()</pre><pre>&gt;&gt;&gt; T2.date = asc2sec('5-Jan-1999')&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # four days later...</pre><pre>&gt;&gt;&gt; T2.comment = 'Loan from Grandma'</pre><pre>&gt;&gt;&gt; T2.addLine('MyCo.Assets.NCA.CurAss.Cash', 15000)</pre><pre>&gt;&gt;&gt; T2.addLastLine('MyCo.Assets.OtherLia.Loans')&nbsp;&nbsp; # addLastLine rounds\</pre><pre>&gt;&gt;&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # off the final line for you</pre><pre>&gt;&gt;&gt; T2.display()</pre><pre>Date: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5-Jan-1999</pre><pre>Comment:&nbsp;&nbsp;&nbsp;&nbsp; Loan from Grandma</pre><pre>MyCo.Assets.NCA.CurAss.Cash&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 15000.000000</pre><pre>MyCo.Assets.OtherLia.Loans&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -15000.000000</pre>

<p>The <tt><span style='font-size:10.0pt'>validate()</span></tt> method checks
if a transaction balances and raises an error if it doesn’t. Later on we’ll
show how to ensure this is called.</p>

<p><tt><span style='font-size:10.0pt'>Transaction</span></tt> objects are
atomic packets of data; they don’t do a lot by themselves and get interesting
only in large numbers. However, they can display themselves, convert themselves
to and from other formats such as blocks of text, and most important, they
support some mathematical operations:</p>

<pre>&gt;&gt;&gt; T3 = T1 + T2&nbsp;&nbsp; # we can add them together</pre><pre>&gt;&gt;&gt; T3.display()</pre><pre>Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 5-Jan-1999</pre><pre>Comment:&nbsp;&nbsp;&nbsp;&nbsp; &lt;derived transaction&gt;</pre><pre>MyCo.Assets.NCA.CurAss.Cash&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 25000.000000</pre><pre>MyCo.Assets.OtherLia.Loans&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -15000.000000</pre><pre>MyCo.Capital.Shares&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -10000.000000</pre><pre>&nbsp;</pre><pre>&gt;&gt;&gt; T4 = T1 * 1.2</pre><pre>&gt;&gt;&gt; T4.display()</pre><pre>Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1-Jan-1999</pre><pre>Comment:&nbsp;&nbsp; &lt;New Transaction&gt;</pre><pre>MyCo.Assets.NCA.CurAss.Cash&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 12000.000000</pre><pre>MyCo.Capital.Shares&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -12000.000000</pre><pre>&nbsp;</pre><pre>&gt;&gt;&gt;</pre>

<p>These operations make it simple to express, for example, the combined
effects of a complex multistage deal or to model sales growing by 10% per
month. The full API supported by <tt><span style='font-size:10.0pt'>Transaction</span></tt>
objects is as follows:</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>def
__init__(self):</span></span><span style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Creates <tt><span style='font-size:10.0pt'>Transaction</span></tt>s
with the current time and no lines.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>__cmp__(self,
other)</span></span><span style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Sorts <tt><span style='font-size:10.0pt'>Transaction</span></tt>s
according to date.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>__str__(self)</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Returns a printable description suitable for
inclusion in, e.g., a list box.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>getDateString(self)</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Returns its date as a string formatted as “12-Aug-1999
18:55:42.”</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>setDateString(self,
aDateString)</span></span><span style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Allows date to be set from a text string as well as
directly.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>isEqual(self,
other)</span></span><span style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Returns <tt><span style='font-size:10.0pt'>true</span></tt>
if the <tt><span style='font-size:10.0pt'>Transaction</span></tt>s agree to the
nearest second and 1/100 of a currency unit (even if comments differ).</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>addLine(self,
account, amount, dict=None)</span></span><span style='font-family:Arial;
color:#990000'> </span></p>

<p style='margin-left:.5in'>Lets you build transactions up a line at a time.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>addLastLine(self,
account, dict=None)</span></span><span style='font-family:Arial;color:#990000'>
</span></p>

<p style='margin-left:.5in'>Saves you doing the math. The amount for the last
line is worked out for you to ensure the transaction balances.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>validate(self,
autocorrect=0)</span></span><span style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>By default, raises an exception if the transaction
isn’t zero. If <tt><span style='font-size:10.0pt'>autocorrect</span></tt> is
set to zero, it silently adds an entry for the magic account <tt><span
style='font-size:10.0pt'>(uncategorized)</span></tt> to round it off. This
might be useful in a huge import, and the extra account shows up on all your
reports.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>renameAccount(self,
oldAcct, newAcct)</span></span><span style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Renames accounts, or the first part of any
accounts, within the transaction, thereby allowing you to restructure the tree
of accounts.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>compact(self)</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>If there are several lines, e.g., for Cash,
compacts them into one total.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>effectOn(self,
targetAccount)</span></span><span style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Tells you the effect the transaction has on the
target account.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>__add__(self,</span></span><span
style='font-family:Arial;color:#990000'> </span><span class=monofont1><span
style='color:#990000'>other)</span></span><span style='font-family:Arial;
color:#990000'> , </span><span class=monofont1><span style='color:#990000'>__neg__(self)</span></span><span
style='font-family:Arial;color:#990000'> , </span><span class=monofont1><span
style='color:#990000'>__mul__(self,</span></span><span style='font-family:Arial;
color:#990000'> </span><span class=monofont1><span style='color:#990000'>scalar)</span></span><span
style='font-family:Arial;color:#990000'> , </span><span class=monofont1><span
style='color:#990000'>__div__(self, scalar)</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Implements basic transaction algebra.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>flows(self,
fromAccount)</span></span><span style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>For analyzing financial flows: tells you how much
money flowed into (or out of, if negative) the transaction from the given
account.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>display(self)</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Prints a readable representation containing all the
lines on standard output.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>asTuple(self)</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Returns a compact representation as a Python tuple,
useful sometimes for portability and speed, as we will see later on. The module
defines a function <tt><span style='font-size:10.0pt'>tranFromTuple<i>(aTuple)</i></span></tt>
that converts these back to <tt><span style='font-size:10.0pt'>Transaction</span></tt>
class instances.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>asString(self)</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Returns a multiline string for use in displaying or
saving to text files. The module defines a function <tt><span style='font-size:
10.0pt'>tranFromString<i>(aChunk)</i></span></tt> to help parse transactions in
text files, although slight rounding errors can become a problem with text
storage and prevent perfect round trips.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>asDicts(self)</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Returns a set of dictionaries holding data for
multidimensional analysis.</p>

<p class=MsoNormal><span class=monofont1><span style='color:#990000'>magnitude(self)</span></span><span
style='font-family:Arial;color:#990000'> </span></p>

<p style='margin-left:.5in'>Returns a number indicating the rough size of the
transaction, for display in graphical views to help users find transactions.
The meaning is somewhat undefined for complex multiline transactions!</p>

<p>Finally, the <tt><span style='font-size:10.0pt'>transac</span></tt> module
defines a function <tt><span style='font-size:10.0pt'>transfer<i>(date,</i></span></tt>
<tt><i><span style='font-size:10.0pt'>comment,</span></i></tt> <tt><i><span
style='font-size:10.0pt'>debitAccount,</span></i></tt> <tt><i><span
style='font-size:10.0pt'>creditAccount,</span></i></tt> <tt><i><span
style='font-size:10.0pt'>amount</span></i></tt><i>)</i> that lets you create a
transaction rapidly with just two lines.</p>

<h4>6.2.5 BookSets</h4>

<p>The next step is to represent a set of books. Many accounting systems grew
up with programmers and analysts trying to model the paper processes of old
accounting systems, with complex posting and validation rules. Our
representation turns out to be nothing more than a list of transactions in date
order. Many of the common financial reports can be extracted with some simple
loops through this list. In database parlance, we have normalized our design,
and will now define lots of <i>views</i> on top of it to get the data the users
want. By storing transactions and only transactions, rather than allowing the
line items to exist separately in some other kind of database, it’s easy to
ensure that the whole system obeys the fundamental rule of summing to zero as
we manipulate the data.</p>

<p>The <tt><span style='font-size:10.0pt'>BookSet</span></tt> class now
captures the logical structure of a general set of books. We also give it the
ability to load and save its data, add, edit, and delete transactions, and
display common views of the data.</p>

<p>The examples at the web site <a
href="http://starship.python.net/crew/mhammond/ppw32" target="_blank">http://starship.python.net/crew/mhammond/ppw32</a>/
include a script, <i>demodata1.py</i>, that generates a <tt><span
style='font-size:10.0pt'>BookSet</span></tt> with 1,000 transactions and saves
it to a file for future use. This test set of data is constant and can be used
for volume testing and optimization. It shows a two-year forecast business
model for a small consulting company called Pythonics Ltd. which, after a shaky
start, achieves superior productivity and wealth through Python.</p>

<p>As before, we kick off with a quick demo of some of <tt><span
style='font-size:10.0pt'>BookSet</span></tt>’s capabilities. We adopt the
convention that methods beginning with <tt><span style='font-size:10.0pt'>get</span></tt>
retrieve data, usually in the form of a list of strings or tuples, and methods
beginning with <tt><span style='font-size:10.0pt'>list</span></tt> print that
data to the console:</p>

<pre>&gt;&gt;&gt; bs = demodata1.getData()</pre><pre>&gt;&gt;&gt; bs[0].display()</pre><pre>Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1-Jan-1999</pre><pre>Comment:&nbsp;&nbsp;&nbsp; Initial investment</pre><pre>MyCo.Assets.NCA.CurAss.Cash&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 10000.000000</pre><pre>MyCo.Capital.Shares&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -10000.000000</pre><pre>&nbsp;</pre><pre>&gt;&gt;&gt; bs.listAccountDetails('MyCo.Assets.OtherLia.BankLoan')</pre><pre>Details of account MyCo.Assets.OtherLia.BankLoan</pre><pre>------------------ -----------------------------</pre><pre>&nbsp;&nbsp; 37 1-Feb-1999&nbsp;&nbsp;&nbsp;&nbsp; Loan drawdown&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -10000.00&nbsp; -10000.00</pre><pre>&nbsp;&nbsp; 72 1-Mar-1999&nbsp; &nbsp;&nbsp;&nbsp;Loan repayment&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 378.12&nbsp;&nbsp; -9621.88</pre><pre>&nbsp; 113 1-Apr-1999&nbsp;&nbsp;&nbsp;&nbsp; Loan repayment&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 381.27&nbsp;&nbsp; -9240.61</pre><pre>&nbsp; 149 1-May-1999&nbsp;&nbsp;&nbsp;&nbsp; Loan repayment&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 384.45&nbsp;&nbsp; -8856.16</pre><pre>&lt;&lt;lines omitted&gt;&gt;</pre><pre>&nbsp; 993 1-Jan-2001&nbsp;&nbsp;&nbsp;&nbsp; Loan repayment&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;453.86&nbsp;&nbsp;&nbsp; -457.50</pre><pre>&nbsp; 998 1-Feb-2001&nbsp;&nbsp;&nbsp;&nbsp; Final loan repayment&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 457.50&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0.00</pre><pre>&nbsp;</pre><pre>&gt;&gt;&gt; endOfYear2 = asc2sec('31-Dec-2000')</pre><pre>&gt;&gt;&gt; bs.getAccountBalance('MyCo.Capital.PL', endOfYear2)&nbsp; # are we in profit yet?</pre><pre>-258416.088</pre><pre>&gt;&gt;&gt; # Yes, rolling in it&nbsp; (remember, cash is positive, profits and income are </pre><pre>&gt;&gt;&gt; # negative)</pre><pre>&gt;&gt;&gt; Q1, Q2 = asc2sec('31-Mar-2000'), asc2sec('30-Jun-2000') </pre><pre>&gt;&gt;&gt; bs.getAccountActivity('MyCo.Capital.PL.Expenses', Q1, Q2)</pre><pre>69961.19</pre><pre>&gt;&gt;&gt;</pre>

<p>All these queries are implemented as simple loops over the transactions in
the <tt><span style='font-size:10.0pt'>BookSet</span></tt>. For example, to get
the previous account details, we implement an internal function called <tt><span
style='font-size:10.0pt'>getAccountDetails()</span></tt> as follows:</p>

<pre>&nbsp;&nbsp;&nbsp; def getAccountDetails(self, match):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; from string import find&nbsp; # import into local namespace, a bit faster</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; runtot = 0</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tranNo = 0</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; results = []</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for tran in self.__journal:</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dateStr = sec2asc(tran.date)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; comment = tran.comment</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (account, delta, etc) in tran.lines:</pre><pre>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if find(account,match)&lt;&gt; -1:</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; runtot = runtot + delta</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; results.append((tranNo, dateStr, comment, delta, runtot)) </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tranNo = tranNo + 1</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return results</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;def listAccountDetails(self, match):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print 'Details of account',match</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print '------------------ ' + ('-' * len(match))</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for row in self.getAccountDetails(match):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print '%5d %-12s %-40s %10.2f %10.2f' % row</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print</pre>

<p>Note line 6, <tt><span style='font-size:10.0pt'>for</span></tt> <tt><span
style='font-size:10.0pt'>tran</span></tt> <tt><span style='font-size:10.0pt'>in</span></tt>
<tt><span style='font-size:10.0pt'>self.__journal</span></tt>. The <tt><span
style='font-size:10.0pt'>__</span></tt> convention provides private attributes;
these attributes can be referenced by name only inside the class, not by
external users of the class. This is a good way to hide information.</p>

<p>It’s worth noting the way transactions are added. They must be stored
internally in date order. To ensure this, use a modified binary insertion
routine lifted from the Python library module <i>insort.py</i> . You first
validate the transaction, and then do a quick check to see if it’s the first
transaction in the <tt><span style='font-size:10.0pt'>BookSet</span></tt> or if
it’s dated the same or later than the last one, and put it at the end. Loading
from a file that’s already in date order is fast and saves searching.
Otherwise, you should do a binary search. Inserting a transaction in a
1000-transaction journal takes no more than eight comparisons:</p>

<pre>&nbsp;&nbsp;&nbsp; def add(self, tran):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # this could be optimized by putting the</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # length=0 case in an exception handler</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tran.validate()</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if len(self.__journal) == 0:</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.__journal.append(tran)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else:</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # quick check if it's the last - might happen</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # very often when loading from a file</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if cmp(tran, self.__journal[-1]) &gt;= 0:</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.__journal.append(tran)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else:</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self._insertInOrder(tran)</pre><pre>&nbsp;</pre><pre>&nbsp;&nbsp;&nbsp; def _insertInOrder(self, tran):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # copied from Python library - binary</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # insertion routine</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lo = 0</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hi = len(self.__journal)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while lo &lt; hi:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mid = (lo + hi) / 2</pre><pre>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if tran &lt; self.__journal[mid]:</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hi = mid</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else:</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lo = mid + 1</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.__journal.insert(lo, tran)</pre>

<h5>6.2.5.1 Adding persistence: Pickles last forever</h5>

<p>In most languages you would have to write a lot of code to save and load
your data. In Python you don’t.</p>

<p><tt><span style='font-size:10.0pt'>BookSet</span></tt> uses one of Python’s
persistence tools, the <tt><span style='font-size:10.0pt'>cPickle</span></tt>
module. Python has three modules that can save almost any structure to disk for
you. <tt><span style='font-size:10.0pt'>Marshal</span></tt> is written in C and
is the fastest, but is limited to numbers, strings, lists, dictionaries, and
tuples. <tt><span style='font-size:10.0pt'>Pickle</span></tt> was written in
Python and allows arbitrary objects to be stored to disk. <tt><span
style='font-size:10.0pt'>cPickle</span></tt> is a recent rewrite of <tt><span
style='font-size:10.0pt'>pickle</span></tt> in C, which allows high-speed
storage approaching that of <tt><span style='font-size:10.0pt'>Marshal</span></tt>.
Here are the <tt><span style='font-size:10.0pt'>BookSet</span></tt> methods to
save and load the data:</p>

<pre>&nbsp;&nbsp;&nbsp; def save(self, filename):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; f = open(filename,'wb')</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cPickle.dump(self.__journal,f)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; f.close()</pre><pre>&nbsp;</pre><pre>&nbsp;&nbsp;&nbsp; def load(self, filename):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; f = open(filename, 'r')</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; data = cPickle.load(f)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;for tran in data:</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.add(tran)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; f.close()</pre>

<p>We did a little preparation by opening a file, but it takes only one line to
save and reload all of our data. If you subsequently redesign your <tt><span
style='font-size:10.0pt'>Transaction</span></tt> class, you don’t need to rewrite
the persistence code. Persistence is one of Python’s most powerful features.</p>

<h5>6.2.5.2 Summary of the BookSet API</h5>

<p><tt><span style='font-size:10.0pt'>BookSet</span></tt> offers a lot of
methods. We won’t list them exhaustively—you’ll see plenty later on—but here
are the main families:</p>

<p class=MsoNormal><i><span style='font-family:Arial;color:#990000'>Editing
methods</span></i><span style='font-family:Arial'> </span></p>

<p style='margin-left:.5in'><tt><span style='font-size:10.0pt'>add(</span></tt>
<tt><i><span style='font-size:10.0pt'>self,</span></i></tt> <tt><i><span
style='font-size:10.0pt'>tran</span></i></tt><tt><span style='font-size:10.0pt'>)</span></tt>,
<tt><span style='font-size:10.0pt'>remove(<i>self,</i></span></tt> <tt><i><span
style='font-size:10.0pt'>index</span></i></tt><tt><span style='font-size:10.0pt'>)</span></tt>,
<tt><span style='font-size:10.0pt'>edit(<i>self,</i></span></tt> <tt><i><span
style='font-size:10.0pt'>index,</span></i></tt> <tt><i><span style='font-size:
10.0pt'>newTran</span></i></tt><tt><span style='font-size:10.0pt'>)</span></tt>,
<tt><span style='font-size:10.0pt'>renameAccount(<i>seDates lf,</i></span></tt>
<tt><i><span style='font-size:10.0pt'>oldAcct,</span></i></tt> <tt><i><span
style='font-size:10.0pt'>newAcct,</span></i></tt> <tt><span style='font-size:
10.0pt'>compact=1</span></tt><i>)</i>. These allow modification. <tt><span
style='font-size:10.0pt'>edit()</span></tt> breaks down into a <tt><span
style='font-size:10.0pt'>remove()</span></tt> followed by an <tt><span
style='font-size:10.0pt'>add()</span></tt>, since the date and thus the
location in the array might have changed. <tt><span style='font-size:10.0pt'>renameAccount()</span></tt>
loops over the whole bookset; like the DOS rename command, it can also move
things to a different part of the tree.</p>

<p class=MsoNormal><i><span style='font-family:Arial;color:#990000'>Storage
methods</span></i><span style='font-family:Arial'> </span></p>

<p style='margin-left:.5in'><tt><span style='font-size:10.0pt'>save</span></tt>
<tt><i><span style='font-size:10.0pt'>(self,</span></i></tt> <tt><i><span
style='font-size:10.0pt'>filename)</span></i></tt>, <tt><span style='font-size:
10.0pt'>saveAsText<i>(self,</i></span></tt> <tt><i><span style='font-size:10.0pt'>filename)</span></i></tt>,
<tt><span style='font-size:10.0pt'>load<i>(self,</i></span></tt> <tt><i><span
style='font-size:10.0pt'>filename)</span></i></tt>, <tt><span style='font-size:
10.0pt'>loadFromText<i>(self,</i></span></tt> <tt><i><span style='font-size:
10.0pt'>filename)</span></i></tt> allow storage in files in either a fast
native format or human-readable text. The native format is that produced by the
<tt><span style='font-size:10.0pt'>cPickle</span></tt> utility discussed
previously.</p>

<p class=MsoNormal><i><span style='font-family:Arial;color:#990000'>Query
methods</span></i><span style='font-family:Arial'> </span></p>

<p style='margin-left:.5in'><tt><span style='font-size:10.0pt'>getAccountDetails(</span></tt>
<tt><i><span style='font-size:10.0pt'>self,</span></i></tt> <tt><i><span
style='font-size:10.0pt'>account</span></i></tt><tt><span style='font-size:
10.0pt'>)</span></tt> gets the full history of entries in an account. <tt><span
style='font-size:10.0pt'>getAccountList(<i>self </i>)</span></tt> returns a
list of all the unique accounts in a <tt><span style='font-size:10.0pt'>BookSet</span></tt>.
<tt><span style='font-size:10.0pt'>getAccountBalance (<i>self,</i></span></tt> <tt><i><span
style='font-size:10.0pt'>acct,</span></i></tt> <tt><i><span style='font-size:
10.0pt'>date=LATE</span></i></tt><tt><span style='font-size:10.0pt'>)</span></tt>
tells you the balance of an account on a date, and <tt><span style='font-size:
10.0pt'>getAccountActivity(<i>self,</i></span></tt> <tt><i><span
style='font-size:10.0pt'>acct, startDate=EARLY,</span></i></tt> <tt><i><span
style='font-size:10.0pt'>endDate=LATE</span></i></tt><tt><span
style='font-size:10.0pt'>)</span></tt> gives the change in the account between
two dates. <tt><span style='font-size:10.0pt'>getAllBalancesOn(<i>self,</i></span></tt>
<tt><i><span style='font-size:10.0pt'>date=LATE</span></i></tt><tt><span
style='font-size:10.0pt'>)</span></tt> returns the balances of all accounts on
the given date or the closing balances if no date is given. We’ll see how to
extend the <tt><span style='font-size:10.0pt'>BookSet</span></tt> to let the
user create custom queries in <a
href="11.htm#_Chapter_8._Adding_a_Macro_Language">Chapter 8</a>.</p>

<h4>6.2.6 Storing Extra Information in Transactions</h4>

<p>We’ve defined some basic classes that represent what is commonly known as
the general ledger or nominal ledger, the core of any accounting system.
Accounting systems generally build layers and modules around the general ledger
to handle things like sales and purchases, cash management, payroll, and job
and project tracking. In a conventional architecture, these might each be extra
modules (sold separately) that add tables, editing screens, and reports. When
new items are added, these modules might post entries to the general ledger as
well as keep their own records. Unfortunately, this is the point at which
businesses start to vary from each other: it’s hard to predict in advance what
facts companies need to keep track of.</p>

<p>Our transactions so far deal with the two dimensions of time and account.
However, you may wish to store extra information in the future, such as the
name of a customer or supplier, a check number for a payment, or a tax code for
an invoice line; and you don’t want to be limited to a predefined set of
attributes.</p>

<p>Python has an unusual and extremely flexible (but potentially dangerous)
feature that enables you to minimize the number of these extensions: any class
instance can be given any attribute, regardless of its class definition. Let’s
look at how a transaction is initialized:</p>

<pre>class Transaction:</pre><pre>&nbsp;&nbsp;&nbsp; def __init__(self):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;By default, you get a zero transaction with time = now&quot;</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; import time</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.date = int(time.time())</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.comment = '&lt;New Transaction&gt;'</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.lines = []</pre>

<p>It has three attributes, <tt><span style='font-size:10.0pt'>date</span></tt>,
<tt><span style='font-size:10.0pt'>comment</span></tt>, and <tt><span
style='font-size:10.0pt'>lines</span></tt>. In most other object-oriented languages
you would be limited to these. In Python there is absolutely nothing to stop
you from doing the following:</p>

<pre>&gt;&gt;&gt; import doubletalk.transac</pre><pre>&gt;&gt;&gt; t = doubletalk.transac.Transaction()</pre><pre>&gt;&gt;&gt; t.Customer = 'HugeCo'</pre><pre>&gt;&gt;&gt; t.InvoiceNo = 199904007</pre><pre>&gt;&gt;&gt;</pre>

<p>You don’t need to define the attributes <tt><span style='font-size:10.0pt'>Customer</span></tt>
and <tt><span style='font-size:10.0pt'>InvoiceNo</span></tt> in the class
definition, which means you aren’t limited. Your transactions can store any
extra facts you wish. Furthermore, the <tt><span style='font-size:10.0pt'>cPickle</span></tt><i>
</i>module that provides the persistence capabilities will still save and load
the objects.</p>

<p>In general, adding attributes on the fly like this is a bad design, because
there is a strong chance users will overwrite attributes that are important to
the functioning of the program. We can get away with it here since <tt><span
style='font-size:10.0pt'>Transaction</span></tt> is essentially just a packet
of data to be manipulated, and we want to keep the code short. In <a
href="#_Chapter_13._Databases">Chapter 13</a>, you will see a much safer
technique for doing the same thing, which preserves the friendly user-level
syntax.</p>

<p>By adding these two facts to sales invoices and records of payments, you can
generate reports showing who owes what or breaking down sales by customer. The
converse also applies to invoices received and payments to suppliers. You can
also imagine end users finding interesting new applications for this; you could
tag transactions with the person who entered them, add cross references to
check stubs, or anything else you want. </p>

<div align=center>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 width="90%"
 style='width:90.0%'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <h3 align=center style='text-align:center'>Introspection in Python</h3>
  <p>Python objects can examine their own insides and trap access to them, a
  feature rarely found in compiled languages. This enables modules such as <tt><span
  style='font-size:10.0pt'>pickle</span></tt><i> </i>and <tt><span
  style='font-size:10.0pt'>cPickle</span></tt><i> </i>to be written. <tt><span
  style='font-size:10.0pt'>dir(<i>objec</i></span></tt><i>t</i><tt><span
  style='font-size:10.0pt'>)</span></tt> lists the attributes of any object;
  the magic attribute _ _<tt><span style='font-size:10.0pt'>dict</span></tt>__
  returns a dictionary of keys and values. <tt><span style='font-size:10.0pt'>getattr(<i>object,</i></span></tt>
  <tt><i><span style='font-size:10.0pt'>key</span></i></tt><tt><span
  style='font-size:10.0pt'>)</span></tt> and <tt><span style='font-size:10.0pt'>setattr<i>(object,</i></span></tt>
  <tt><i><span style='font-size:10.0pt'>key,</span></i></tt> <tt><i><span
  style='font-size:10.0pt'>value</span></i></tt>) let you create and access
  attributes dynamically at runtime. Let’s explore the transaction object
  previously created:</p>
  <pre>&gt;&gt;&gt; dir(t)&nbsp;&nbsp; # lists an object's attributes</pre><pre>['Customer', 'InvoiceNo', 'comment', 'date', 'lines']</pre><pre>&gt;&gt;&gt; from pprint import pprint # displays nicely over several lines</pre><pre>&gt;&gt;&gt; pprint(t. _&nbsp;&nbsp; _dict_&nbsp;&nbsp; _)</pre><pre>{'Customer': 'HugeCo',</pre><pre>'InvoiceNo': 199904007,</pre><pre>'comment': '&lt;New Transaction&gt;',</pre><pre>'date': 925245509,</pre><pre>'lines': []}</pre><pre>&gt;&gt;&gt; getattr(t, 'Customer')</pre><pre>'HugeCo'</pre><pre><span
  lang=DE>&gt;&gt;&gt; setattr(t, 'InputBy', 'A.Anorak')</span></pre><pre>&gt;&gt;&gt; t.InputBy</pre><pre>'A.Anorak'</pre>
  <p>It’s also possible for objects to trap attempts to set and get attributes
  and react in special ways using the Magic Methods <tt><span style='font-size:
  10.0pt'>__getattr__</span></tt>(<tt><i><span style='font-size:10.0pt'>self,</span></i></tt>
  <tt><i><span style='font-size:10.0pt'>name</span></i></tt><tt><span
  style='font-size:10.0pt'>)</span></tt> and <tt><span style='font-size:10.0pt'>_
  _setattr__<i>(self,</i></span></tt> <tt><i><span style='font-size:10.0pt'>name,</span></i></tt>
  <tt><i><span style='font-size:10.0pt'>value</span></i></tt>). We’ve defined a
  class that lets you set attributes unless they are named “spam”:</p>
  <pre>class HateSpam:</pre><pre>&nbsp;&nbsp;&nbsp; def __setattr__(self, name, value):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if name == 'spam':</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print &quot;Keep that stuff away from me&quot;</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else:</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.__dict__[name] = value</pre><pre>&nbsp;&nbsp;&nbsp; def __getattr__(self, name):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if name == 'spam':</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print &quot;you won't find any of that here&quot;</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else:</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return self.__dict__[name]</pre>
  <p>Having defined this, we can do the following:</p>
  <pre>&gt;&gt;&gt; h = HateSpam()</pre><pre>&gt;&gt;&gt; h.eggs = 12</pre><pre>&gt;&gt;&gt; h.spam = 3</pre><pre>Keep that stuff away from me</pre><pre>&gt;&gt;&gt; h.spam</pre><pre>you won't find any of that here</pre><pre>&gt;&gt;&gt; h.eggs</pre><pre>12</pre>
  <p>You can even grab a function and attach it to an object at runtime:</p>
  <pre>&gt;&gt;&gt; def sing(food) :</pre><pre>…&nbsp;&nbsp;&nbsp; print '%s, %s, %s, everybody loves %s' %</pre><pre>(food,food,food,food,food)</pre><pre>…</pre><pre>&gt;&gt;&gt; sing ('eggs')</pre><pre>eggs, eggs, eggs, eggs, everybody loves eggs</pre><pre>&gt;&gt;&gt; h.shout = sing</pre><pre>&gt;&gt;&gt; h.shout('beer')</pre><pre>beer, beer, beer, beer, everybody loves beer</pre><pre>&gt;&gt;&gt; dir (h)</pre><pre>['eggs', 'shout']</pre><pre>&gt;&gt;&gt;</pre></td>
 </tr>
</table>

</div>

<p>However, there are occasions when an attribute doesn’t apply to the whole
transaction but just to one line. Imagine you are billing a large customer for
consulting work done by four of your staff, all working in different
departments, and you want to track the income by department or team internally.
You have only one transaction, but different attributes per line. To cope with
this, the lines inside transactions are three-element tuples. Element three is
usually <tt><span style='font-size:10.0pt'>None</span></tt>, but can be a
dictionary. Later we will write queries that can loop over a <tt><span
style='font-size:10.0pt'>BookSet</span></tt> and query based on these
attributes. In the next example, we create a transaction with extra attributes
at both the transaction and line level and split the income from a sale between
two internal projects:</p>

<pre>&gt;&gt;&gt; INCOME='MyCo.Capital.PL.Income.Consulting'&nbsp; # save typing</pre><pre>&gt;&gt;&gt; t = doubletalk.transac.Transaction()</pre><pre>&gt;&gt;&gt; t.Customer = 'HugeCo'</pre><pre>&gt;&gt;&gt; t.InvoiceNo = 199904007</pre><pre>&gt;&gt;&gt; t.addLine(INCOME, 15000, {'Project':'P1'} )</pre><pre>&gt;&gt;&gt; t.addLine(INCOME, 10000, {'Project':'P2'} )</pre><pre>&gt;&gt;&gt; t.addLine('MyCo.NCA.CurrentAssets.Creditors', 25000)</pre><pre>&gt;&gt;&gt; t.display()&nbsp;&nbsp; # shows the basics</pre><pre>Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 27-Apr-1999 21:17:52</pre><pre>Comment:&nbsp;&nbsp; &lt;New Transaction&gt;</pre><pre>MyCo.Capital.PL.Income.Consulting&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 10000.000000</pre><pre>MyCo.Capital.PL.Income.Consulting&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 15000.000000</pre><pre>MyCo.NCA.CurrentAssets.Creditors&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 25000.000000</pre><pre>&gt;&gt;&gt; from pprint import pprint</pre><pre>&gt;&gt;&gt; pprint(t.__dict__)&nbsp;&nbsp; # look inside the object</pre><pre>{'Customer': 'HugeCo',</pre><pre> 'InvoiceNo': 199904007,</pre><pre> 'comment': '&lt;New Transaction&gt;', </pre><pre>&nbsp;'date': 925247872,</pre><pre> 'lines': [('MyCo.Capital.PL.Income.Consulting', 10000, {'Project': 'P2'}),</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ('MyCo.Capital.PL.Income.Consulting', 15000, {'Project': 'P1'}),</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ('MyCo.NCA.CurrentAssets.Creditors', 25000, None)]}</pre><pre>&gt;&gt;&gt;</pre>

<p>Our data model still obeys all the fundamental rules of double-entry
accounting but is now much more extensible: users can add their own attributes
at will. This is the basis of a highly open, extensible system.</p>

<h3><a name="_6.3_The_Doubletalk_Toolkit_at_Work"></a>6.3 The Doubletalk
Toolkit at Work</h3>

<p>In the next few chapters we’ll see some examples of the class library at
work. At the beginning of the chapter, we listed some application areas. Now
we’ll run briefly through how the toolkit supports some of these to give a feel
for how it might be useful.</p>

<h4>6.3.1 Comparing, Combining, and Contrasting Accounts</h4>

<p>Imagine that you had one accounting system until the end of 1997. You
switched in 1998, and there were some slight differences in the new chart of
accounts that grouped things differently at a high level, in addition to
merging one or two existing accounts. Not being administratively perfect, you
didn’t get it all set up on the first of January, and there is an annoying
discrepancy at the changeover point you can’t figure out. Export scripts can be
written to get the data into <tt><span style='font-size:10.0pt'>BookSet</span></tt>s.
A dictionary can be prepared that maps account names in the old system to
account names in the new one, and then both sets of data can be merged. Ad hoc
queries using an interactive prompt also make it easy to see where data doesn’t
match.</p>

<h4>6.3.2 Building Business Models</h4>

<p>One of the main uses of Doubletalk is building detailed cash-flow forecasts.
Most cash-flow forecasts are done in Excel, but they tend to focus only on
cash; building and maintaining a spreadsheet to correctly handle a full balance
sheet and profit and loss is hard work in Excel, and anything less is
ultimately not useful for long-term planning. It’s also important to lay out
your forecast using the same headings and tree structure as the actual data and
to take care not to leave black holes where the past data meets the future.
Large corporations have often invested a great deal in building such models of
their businesses. The combination of object-oriented programming and our class
library makes it easy.</p>

<p>The general concept is to create a hierarchy of business model objects that
represent things in the business; these generate a stream of future
transactions at the right time. The module <i>demodata.py </i>uses crude
examples of this to generate a file of 1000 transactions. Here’s a simple base
class for this hierarchy:</p>

<pre>class BusinessObject:</pre><pre>&nbsp;&nbsp;&nbsp; def getTransactions(self):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return []</pre>

<p>There are a limited number of common business objects that can be modeled
quite accurately. For example, a simple loan can be described by just four
attributes: amount, date drawn, interest rate, and number of periods. A <tt><span
style='font-size:10.0pt'>Loan</span></tt> object is initialized with these
attributes and generates a stream of transactions covering the drawdown and the
subsequent repayments. An <tt><span style='font-size:10.0pt'>IncomeItem</span></tt>
gives rise to an invoice and a payment transaction, with a time lag. An <tt><span
style='font-size:10.0pt'>IncomeStream</span></tt> creates a series of <tt><span
style='font-size:10.0pt'>IncomeItems</span></tt>, perhaps with a given annual
growth rate. The model usually needs changing only a little each month and
represents cash flows accurately.</p>

<p>A more sophisticated model uses a discrete-event simulation approach,
sending ticks of the clock to the business objects and allowing objects to make
decisions based on the state of the accounts and to interact with each other.
For example, a <tt><span style='font-size:10.0pt'>CorporationTax</span></tt>
object could wake up once a year, look at the profits, and schedule in a few
payments a few months ahead.</p>

<p>This approach is also important in the securities industry, where
quantitative analysts (<i>quants</i>) build models of portfolios of financial
instruments and see how they behave under different economic scenarios. A
financial instrument can be seen as a business model object that gives rise to
transactions at various points in its lifetime.</p>

<h4>6.3.3 Multidimensional Analysis of Financial Data</h4>

<p>Our <tt><span style='font-size:10.0pt'>BookSet</span></tt> and <tt><span
style='font-size:10.0pt'>Transaction</span></tt> classes can be thought of as
classifying amounts of money by time and by account—a 2D classification. In
fact, many standard financial reports follow a format of months across the top,
and accounts (drawn from some level of the tree) down the left. Previously, we
saw how to extend the system to add any attributes we wish. This effectively
makes it a multidimensional model. Analyzing multidimensional data is a big
business currently using the buzzword OLAP (online analytical processing).
Furthermore, a common problem is to ensure the integrity of the double-entry
while querying and selecting subsets of data. There is almost have a data
warehouse in our <tt><span style='font-size:10.0pt'>BookSet</span></tt>;
however, it’s currently optimized for adding, editing, and deleting
transactions, not for querying.</p>

<p>To query the <tt><span style='font-size:10.0pt'>BookSet</span></tt> ,
flatten the transactions into a separate list of facts per line. Taking the
sales transaction earlier, you might extract something like what’s in <a
href="#_Table_6.1._Multidimensional_Analysi">Table 6.1</a>.</p>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 width="100%"
 style='width:100.0%'>
 <tr>
  <td colspan=5 style='border:none;padding:.75pt .75pt .75pt .75pt'>
  <h5 align=center style='text-align:center'><a
  name="_Table_6.1._Multidimensional_Analysi"></a>Table&nbsp;6.1.
  Multidimensional Analysis of Accounts</h5>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><b><span style='font-size:10.0pt'>Date</span></b></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><b><span style='font-size:10.0pt'>Account</span></b></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><b><span style='font-size:10.0pt'>Customer</span></b></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><b><span style='font-size:10.0pt'>Project</span></b></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><b><span style='font-size:10.0pt'>Amount</span></b></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>27-Apr-1999</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>...Income.Consulting</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>HugeCo</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>P1</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>-15000</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>27-Apr-1999</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>...Income.Consulting</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>HugeCo</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>P2</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>-10000</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>27-Apr-1999</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>...Creditors</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>HugeCo</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>(none)</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>25000</span></p>
  </td>
 </tr>
</table>

<p>This kind of fact-table structure is as easy to analyze in Python as it is
in SQL. However, Python has a big advantage over the database world in that
it’s not tied to particular sets of facts, or column headings, beforehand.
Transactions have the following method, which converts a three-line transaction
to a list of three dictionaries, each with all the facts about transaction and
line:</p>

<pre>class Transaction:</pre><pre>&nbsp;&nbsp;&nbsp; # (one method of many)</pre><pre>&nbsp;&nbsp;&nbsp; def asDicts(self):</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dicts = []</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i = 0</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for line in self.lines:</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rowdict = self.__dict__.copy()</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; del rowdict['lines']</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rowdict['account'] = line[0]</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rowdict['amount'] = line[1]</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if line[2]:</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rowdict.update(line[2])</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i = i + 1</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dicts.append(rowdict)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return dicts</pre>

<p>Running this on the example transaction gives everything you need to know:</p>

<pre>&gt;&gt;&gt; pprint(t.asDicts())</pre><pre>[{'Customer': 'HugeCo',</pre><pre>&nbsp; 'InvoiceNo': 199904007,</pre><pre>&nbsp; 'Project': 'P2',</pre><pre>&nbsp; 'account': 'MyCo.Capital.PL.Income.Consulting',</pre><pre>&nbsp; 'amount': 10000,</pre><pre>&nbsp; 'comment': '&lt;New Transaction&gt;',</pre><pre>&nbsp; 'date': 925247872},</pre><pre> {'Customer': 'HugeCo',</pre><pre>&nbsp; 'InvoiceNo': 199904007,</pre><pre>&nbsp; 'Project': 'P1',</pre><pre>&nbsp; 'account': 'MyCo.Capital.PL.Income.Consulting',</pre><pre>&nbsp; 'amount': 15000,</pre><pre> &nbsp;'comment': '&lt;New Transaction&gt;',</pre><pre>&nbsp; 'date': 925247872},</pre><pre> {'Customer': 'HugeCo',</pre><pre>&nbsp; 'InvoiceNo': 199904007,</pre><pre>&nbsp; 'account': 'MyCo.NCA.CurrentAssets.Creditors',</pre><pre>&nbsp; 'amount': 25000,</pre><pre>&nbsp; 'comment': '&lt;New Transaction&gt;',</pre><pre>&nbsp; 'date': 925247872}]</pre><pre>&gt;&gt;&gt;</pre>

<p>This is just a few lines away from an SQL-like query language that can pull
out arbitrary queries from a <tt><span style='font-size:10.0pt'>BookSet</span></tt>,
tabulating the keys it’s interested in from the previous lists of dictionaries.
You also have the ability to drill down from higher-level summaries of the data
to the individual transactions that gave rise to them.</p>

<h4>6.3.4 Cash-Flow Analysis</h4>

<p>Many accounting systems can’t do a cash-flow report. This sounds shocking,
but it’s true. The reason is they store the individual transaction lines, often
in a separate table for each account and have lost the transaction itself. The
cash flow report records where all the cash came from and where it went to, and
is an important tool for managers.</p>

<p>To get a basic cash-flow report, you need to look at the other lines in all
the transactions affecting the cash account. If you buy all your supplies with
cash, this report breaks down how you spent your money. But if most sales and
purchases are on account, the system produces the earth-shattering observation
that most of your cash comes from other people paying your bills, and it goes
to pay other peoples’ bills. We’ll call this the Brain-Dead Cash-Flow Analysis
(BDCFA). A general ledger doesn’t formally store the information needed to
trace through the system and see what the bill you just paid was actually for.</p>

<p>This analysis is easy to do, if you tag the transactions with a customer and
invoice number. Write a script to find all transactions with a given invoice
number, add together the invoice and payment using the magic addition methods, and
then perform a BDCFA on that. This lets you trace where cash went through a
series of transactions.</p>

<h4>6.3.5 Putting It Together</h4>

<p>In the context of a business, our toolkit could easily be (and has been)
used to:</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Hold data exported from an accounts system</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Generate future data from a financial model</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Put the past and future together on the same basis</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Analyze this stream in various ways to produce the data for reports</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Dig down to extract more detail from totals in reports</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Compare this month’s actual/forecast data against what we thought we
would achieve at the beginning of the year</p>

<h3><a name="_6.4_Conclusion"></a>6.4 Conclusion</h3>

<p>This part of the book showed how Python can easily build extensible
applications that capture the essence of a business problem and leave users
free to build their own solutions around the core.</p>

<p>As an example, we built a small class library which, while quick and dirty,
is applicable to a wide range of financial problems. We hope that this has
demonstrated the ease with which Python can capture abstractions and manipulate
data.</p>

<p>We don’t yet have an application program to use these classes or a way to
look at the data. Over the next few chapters, we will build one around this
class library.</p>

<p class=MsoFootnoteText><a name="_ftn4"></a><a
href="9.htm#_ftnref4" title=""><span
class=MsoFootnoteReference>[1]</span></a> <span style='font-size:7.5pt'>Some
companies cut the cake differently, displaying Assets as the top half of the
balance sheet, and Liabilities and Capital together on the bottom half. If you
are interested in the book value of the company, the way we have done it brings
the right numbers to the top. It won’t affect our data structures either way.</span></p>

<p class=MsoNormal>&nbsp;</p>

<div align=center>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 width="90%"
 style='width:90.0%;background:#ECECD9;border-collapse:collapse;border:none'>
 <tr>
  <td width="33%" style='width:33.0%;border:inset #111111 1.0pt;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><a href="8.htm"><span style='text-decoration:none'><img
  border=0 width=37 height=34 src="leftarrw.gif"></span></a></p>
  </td>
  <td width="33%" style='width:33.0%;border:inset #111111 1.0pt;border-left:
  none;padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><a href="0.htm"><span
  style='font-size:13.5pt'>Table of Contents</span></a></p>
  </td>
  <td width="34%" style='width:34.0%;border:inset #111111 1.0pt;border-left:
  none;padding:.75pt .75pt .75pt .75pt'>
  <p align=right style='text-align:right'><a href="10.htm"><span
  style='text-decoration:none'><img border=0 width=37 height=34
  src="rightarrw.gif"></span></a></p>
  </td>
 </tr>
</table>

</div>

<p class=MsoNormal>&nbsp;</p>

</div>

</body>

</html>
