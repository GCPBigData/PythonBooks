<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=utf-8">
<meta name=Generator content="Microsoft Word 10 (filtered)">
<title> </title>

<link rel=Stylesheet type="text/css" media=all href="1.css">
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Tahoma;
	panose-1:2 11 6 4 3 5 4 4 2 4;}
@font-face
	{font-family:Verdana;
	panose-1:2 11 6 4 3 5 4 4 2 4;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;}
h1
	{margin-top:1.0in;
	margin-right:0in;
	margin-bottom:.5in;
	margin-left:0in;
	text-align:center;
	page-break-before:always;
	font-size:24.0pt;
	font-weight:bold;}
h2
	{page-break-before:always;
	font-size:18.0pt;
	font-weight:bold;}
h3
	{font-size:13.5pt;
	font-weight:bold;}
h4
	{font-size:12.0pt;
	font-weight:bold;}
h5
	{font-size:10.0pt;
	font-weight:bold;}
p.MsoFootnoteText, li.MsoFootnoteText, div.MsoFootnoteText
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;}
p.MsoTitle, li.MsoTitle, div.MsoTitle
	{font-size:12.0pt;
	font-weight:bold;}
p.MsoBodyText3, li.MsoBodyText3, div.MsoBodyText3
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:0in;
	font-size:8.0pt;}
p.MsoDocumentMap, li.MsoDocumentMap, div.MsoDocumentMap
	{margin:0in;
	margin-bottom:.0001pt;
	background:navy;
	font-size:12.0pt;}
p
	{font-size:12.0pt;}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;}
p.footnote, li.footnote, div.footnote
	{font-size:12.0pt;}
p.monofont, li.monofont, div.monofont
	{font-size:12.0pt;}
p.romanfont, li.romanfont, div.romanfont
	{font-size:12.0pt;}
p.atitle, li.atitle, div.atitle
	{font-size:9.0pt;
	font-weight:bold;}
p.chaptertitle, li.chaptertitle, div.chaptertitle
	{margin-top:0in;
	margin-right:7.5pt;
	margin-bottom:0in;
	margin-left:7.5pt;
	margin-bottom:.0001pt;
	font-size:12.0pt;}
p.sectiontitle, li.sectiontitle, div.sectiontitle
	{margin-top:0in;
	margin-right:15.0pt;
	margin-bottom:0in;
	margin-left:15.0pt;
	margin-bottom:.0001pt;
	font-size:12.0pt;}
p.itable, li.itable, div.itable
	{font-size:12.0pt;}
p.tiny, li.tiny, div.tiny
	{font-size:7.0pt;}
p.multiselect, li.multiselect, div.multiselect
	{font-size:7.5pt;}
p.safnavoff, li.safnavoff, div.safnavoff
	{font-size:8.5pt;}
p.safnavon, li.safnavon, div.safnavon
	{font-size:8.5pt;
	font-weight:bold;}
p.navtopbg, li.navtopbg, div.navtopbg
	{background:#990000;
	font-size:12.0pt;}
p.navleftbg, li.navleftbg, div.navleftbg
	{background:#666666;
	font-size:12.0pt;}
p.navleftbgalt, li.navleftbgalt, div.navleftbgalt
	{background:#666666;
	font-size:12.0pt;}
p.navtitle, li.navtitle, div.navtitle
	{font-size:9.0pt;
	font-weight:bold;}
p.nonavtitle, li.nonavtitle, div.nonavtitle
	{font-size:9.0pt;
	font-weight:bold;}
p.bimodoff, li.bimodoff, div.bimodoff
	{font-size:12.0pt;}
p.bimodon, li.bimodon, div.bimodon
	{font-size:12.0pt;}
p.btblinks, li.btblinks, div.btblinks
	{font-size:8.5pt;}
p.btlinksactive, li.btlinksactive, div.btlinksactive
	{font-size:12.0pt;
	font-weight:bold;}
p.inputtext, li.inputtext, div.inputtext
	{font-size:12.0pt;}
p.inputbutton, li.inputbutton, div.inputbutton
	{font-size:12.0pt;
	font-weight:bold;}
p.endsearch, li.endsearch, div.endsearch
	{font-size:12.0pt;
	font-weight:bold;}
p.dropdown, li.dropdown, div.dropdown
	{font-size:12.0pt;}
p.navtoptoolbg, li.navtoptoolbg, div.navtoptoolbg
	{background:black;
	font-size:12.0pt;}
p.headingbarbg, li.headingbarbg, div.headingbarbg
	{background:#333333;
	font-size:12.0pt;}
p.headingsubbarbg, li.headingsubbarbg, div.headingsubbarbg
	{background:#CCCCCC;
	font-size:12.0pt;}
p.headingbartitle, li.headingbartitle, div.headingbartitle
	{font-size:10.5pt;
	font-weight:bold;}
p.headingsubbartitle, li.headingsubbartitle, div.headingsubbartitle
	{font-size:9.0pt;
	font-weight:bold;}
p.tablestripe, li.tablestripe, div.tablestripe
	{background:#EEEEEE;
	font-size:12.0pt;}
p.pgtitle, li.pgtitle, div.pgtitle
	{font-size:12.0pt;
	font-weight:bold;}
p.buyprint, li.buyprint, div.buyprint
	{font-size:7.5pt;}
p.resulthighlight, li.resulthighlight, div.resulthighlight
	{background:lightblue;
	font-size:12.0pt;}
p.pgsubtitle, li.pgsubtitle, div.pgsubtitle
	{font-size:12.0pt;
	font-weight:bold;}
p.helphead, li.helphead, div.helphead
	{font-size:12.0pt;
	font-weight:bold;}
p.helpsubhead, li.helpsubhead, div.helpsubhead
	{font-size:10.0pt;}
p.helpcaption, li.helpcaption, div.helpcaption
	{font-size:10.0pt;}
p.helptab, li.helptab, div.helptab
	{font-size:10.0pt;}
p.sm, li.sm, div.sm
	{font-size:6.0pt;}
p.gowild, li.gowild, div.gowild
	{font-size:13.5pt;
	font-weight:bold;
	font-style:italic;}
p.getstarted, li.getstarted, div.getstarted
	{font-size:10.0pt;
	font-weight:bold;
	font-style:italic;}
@page Section1
	{size:8.5in 11.0in;
	margin:1.0in 1.25in 1.0in 1.25in;}
div.Section1
	{page:Section1;}
-->
</style>

</head>

<body lang=EN-US link="#990000" vlink=purple>

<div class=Section1>

<div align=center>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 width="90%"
 style='width:90.0%;background:#ECECD9;border-collapse:collapse;border:none'>
 <tr>
  <td width="33%" style='width:33.0%;border:inset #111111 1.0pt;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><a href="5.htm"><span style='text-decoration:none'><img
  border=0 width=37 height=34 src="leftarrw.gif"></span></a></p>
  </td>
  <td width="33%" style='width:33.0%;border:inset #111111 1.0pt;border-left:
  none;padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><a href="0.htm"><span
  style='font-size:13.5pt'>Table of Contents</span></a></p>
  </td>
  <td width="34%" style='width:34.0%;border:inset #111111 1.0pt;border-left:
  none;padding:.75pt .75pt .75pt .75pt'>
  <p align=right style='text-align:right'><a href="7.htm"><span
  style='text-decoration:none'><img border=0 width=37 height=34
  src="rightarrw.gif"></span></a></p>
  </td>
 </tr>
</table>

</div>

<p class=MsoNormal style='margin-bottom:12.0pt'>&nbsp;</p>

<h2><a name="_Chapter_4._Integrated_Development_E"></a>Chapter 4. Integrated
Development Environments for Python</h2>

<p>In this chapter we look at two integrated development environments (IDEs)
for Python on Windows:</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>PythonWin provides IDE capabilities for Python on Windows. It has a
number of features in its environment that make editing and debugging Python
code more pleasant and productive than standard text editors. Because the IDE
features are part of the PythonWin package, you can take advantage of them if
you develop your GUI application using PythonWin or if you extend your existing
C++ MFC application by embedding PythonWin. More detail on the PythonWin
framework can be found in <a href="24.htm#_Chapter_20._GUI_Development">Chapter
20</a>.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>IDLE is an IDE developed by Python author, Guido van Rossum. IDLE uses
the Tkinter GUI framework and is portable to all Python platforms with Tkinter
support. IDLE is a standalone IDE for Python; it doesn’t attempt to provide a
GUI or application framework. IDLE would be particularly suitable if you
develop your GUI applications using Tkinter or regularly use Python on
operating systems other than Windows. Guido has kindly assisted in the section
of this chapter devoted to IDLE.</p>

<h3><a name="_4.1_The_PythonWin_IDE"></a>4.1 The PythonWin IDE</h3>

<p>PythonWin is many things. As we discuss in <a
href="#_Chapter_20._GUI_Development">Chapter 20</a>, one of PythonWin’s major
roles is to be a Python interface to the Microsoft Foundation Classes, allowing
an application to take advantage of some of the more esoteric user interface
features available on Windows.</p>

<p>PythonWin is almost a sample application for these MFC extensions. Over
time, it has slowly developed features that make it useful as an IDE. As time
goes on, we can expect these features to improve.</p>

<h4>4.1.1 The PythonWin Environment</h4>

<p>When PythonWin starts, it automatically opens its Interactive Window, where
you see the Python copyright message and the standard Python prompt:</p>

<pre>&gt;&gt;&gt;</pre>

<p>If you are familiar with Python on any other operating system or have used the
standard <i>Python.exe</i> included with the Python distribution, you can
immediately start entering Python commands to be executed interactively. <a
href="#_Chapter_2._Python_Language_Review">Chapter 2</a>, and the Python
tutorial (optionally installed with the Python distribution), describes using
Python interactively, and we discuss some additional PythonWin features later
in this chapter.</p>

<p>As much as possible, PythonWin conforms to the standard user-interface
features of Windows. Thus, you will notice a Windows toolbar with familiar File
<img border=0 width=20 height=16 src="images\image008.gif"
alt="figs/U2192.gif">Open and File <img border=0 width=20 height=16
src="images\image008.gif" alt="figs/U2192.gif">New
icons, and a fairly standard set of menus at the top of the application. Most
of the items on the menus are obvious, so we won’t describe the exact operation
of the File <img border=0 width=20 height=16
src="images\image008.gif" alt="figs/U2192.gif">Open
and File <img border=0 width=20 height=16
src="images\image008.gif" alt="figs/U2192.gif">New
operations. Instead, we will focus on the features specific to PythonWin.</p>

<p>Now would be a good time to create a new Python source file to demonstrate
some of the features of PythonWin. To create a new file, select the blank
document toolbar item, then select File <img border=0 width=20 height=16
src="images\image008.gif" alt="figs/U2192.gif">New or
press Ctrl-N. A dialog box appears that asks which type of document to create.
Select Python Script.</p>

<p>A blank source file is created. Type the following code:</p>

<pre>def hello(msg):</pre><pre>&nbsp;&nbsp;&nbsp; print &quot;Hello, &quot; + msg</pre><pre>&nbsp;&nbsp;&nbsp; </pre><pre>def main():</pre><pre>&nbsp;&nbsp;&nbsp; import sys</pre><pre>&nbsp;&nbsp;&nbsp; print &quot;Script name is&quot;, sys.argv[0]</pre><pre>&nbsp;&nbsp;&nbsp; if len(sys.argv)&gt;=2:</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hello(sys.argv[1])</pre><pre>&nbsp;&nbsp;&nbsp; else:</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hello(&quot;Please say something next time&quot;)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </pre><pre>if __name__=='__main__':</pre><pre>&nbsp;&nbsp;&nbsp; main()</pre>

<p>As you type, notice the first feature: Python syntax coloring. If you don’t
like the particular styles, they can be changed via the View <img border=0
width=20 height=16 src="images\image008.gif"
alt="figs/U2192.gif">Options menu. Now save the file as <i>pywindemo.py</i> in
a convenient directory, and you’re ready to begin.</p>

<h5>4.1.1.1 Running scripts</h5>

<p>PythonWin allows you to run arbitrary scripts from within its environment.
Changes to the file are saved before the script is run. You can execute a
script by selecting the “running man” toolbar button, and then select File <img
border=0 width=20 height=16 src="images\image008.gif"
alt="figs/U2192.gif">Run, or press Ctrl-R.</p>

<p>Let’s run the script we just created. When you select this option, the
PythonWin environment should look something like <a
href="#_Figure_4.1._PythonWin's_Run_Script_">Figure 4.1</a>.</p>

<p>For now, ignore the debugger, so you can leave everything with its default
values and select OK.</p>

<p>You should see the following message output to the interactive window:</p>

<pre>Script name is c:\scripts\pywindemo.py</pre><pre>Hello, Please say something next time</pre>

<p>Notice that the script is run the same way you executed <tt><span
style='font-size:10.0pt'>python.exe</span></tt> <tt><span style='font-size:
10.0pt'>pywindemo.py</span></tt>. The <tt><span style='font-size:10.0pt'>if
__name__=='__main__':</span></tt> block is entered, and <tt><span
style='font-size:10.0pt'>sys.argv</span></tt> is used to obtain the
command-line parameters. If you perform this procedure again, you can
experiment with adding command-line arguments in the Run dialog.</p>

<h5 align=center style='text-align:center'><a
name="_Figure_4.1._PythonWin's_Run_Script_"></a>Figure 4.1. PythonWin's Run
Script dialog</h5>

<p class=MsoNormal align=center style='text-align:center'><span
style='font-family:Arial'><img border=0 width=502 height=384
src="images\image009.gif" alt="figs/ppw.0401.gif"></span></p>

<p>A handy feature to note is that if you hold down the Shift key while running
the module (i.e., while clicking the toolbar or by pressing Ctrl-Shift-R), the
code runs without displaying the dialog. This is handy for repeatedly running
the same script with the same arguments.</p>

<h5>4.1.1.2 Import modules</h5>

<p>Importing modules in the PythonWin environment is similar to running Python
scripts; they both execute Python code. However, there is an important
distinction between importing modules and running scripts.</p>

<p>Importing the module <i>pywindemo.py</i> operates almost identically to
typing the Python statement:</p>

<pre>&gt;&gt;&gt; import pywindemo</pre>

<p>When a module is imported this way, the <tt><span style='font-size:10.0pt'>if
__name__=='_ _main__':</span></tt> block isn’t entered, but the name of the
script is entered into the Python namespace.</p>

<p>There are two important differences between the PythonWin import
functionality and simply typing <tt><span style='font-size:10.0pt'>import</span></tt>
<tt><span style='font-size:10.0pt'>pywindemo</span></tt>. First, the file is
saved; and second, PythonWin automatically performs a <tt><span
style='font-size:10.0pt'>reload()</span></tt> of the module if necessary. These
features combine to ensure the latest version of the code is made available.</p>

<p>You can import a module in PythonWin by selecting the Import toolbar icon,
and selecting File <img border=0 width=20 height=16
src="images\image008.gif" alt="figs/U2192.gif">Import
or pressing Ctrl-I. If an editor window has the focus, that module is imported;
otherwise, a dialog is opened allowing you to select the Python module to be
imported.</p>

<p>Let’s import the test module. Make sure it’s the foreground window and press
Ctrl-I. The status bar displays the message <tt><span style='font-size:10.0pt'>Successfully</span></tt>
<tt><span style='font-size:10.0pt'>imported</span></tt> <tt><span
style='font-size:10.0pt'>the</span></tt> <tt><span style='font-size:10.0pt'>module</span></tt>
<tt><span style='font-size:10.0pt'>'pywindemo'</span></tt>, and no message is
printed to the interactive window. So although the module is imported, the <tt><span
style='font-size:10.0pt'>if __name__=='__main__':</span></tt> block isn’t
executed.</p>

<p>Now that you’ve imported the module, you can use it as you would any Python
module. Go to the Interactive Window and type:</p>

<pre>&gt;&gt;&gt; pywindemo.hello(&quot;how are you&quot;)</pre><pre>Hello, how are you</pre><pre>&gt;&gt;&gt;</pre>

<p>Importing modules is primarily useful when developing or debugging a fairly
large application under PythonWin. For example, let’s assume you have the
following code structure:</p>

<pre># module spam1</pre><pre>import spamutil</pre><pre>...</pre><pre>&nbsp;&nbsp;&nbsp; spamutil.MakeEggs()</pre>

<p>And another similar module:</p>

<pre># module spam2</pre><pre>import spamutil</pre><pre>...</pre><pre>&nbsp;&nbsp;&nbsp; spamutil.MakeEggs()</pre>

<p>If you find a bug in the <tt><span style='font-size:10.0pt'>spamutil</span></tt>
module, you can edit it in PythonWin, then import the module. The <tt><span
style='font-size:10.0pt'>spam1</span></tt> and <tt><span style='font-size:10.0pt'>spam2</span></tt>
modules will then also be working with the new version of <tt><span
style='font-size:10.0pt'>spamutil</span></tt>.</p>

<h5>4.1.1.3 Checking modules</h5>

<p>PythonWin includes a function that allows you to check a Python source file
without executing it. The syntax of the source code is checked using Python
itself, while the Python <i>tabnanny</i> tool checks the source-code
whitespace. Any syntax or whitespace errors are reported in the PythonWin
status bar.</p>

<p>You can check a module by selecting the Check Module toolbar item, then
selecting File <img border=0 width=20 height=16
src="images\image008.gif" alt="figs/U2192.gif">Check
or pressing Ctrl-Shift-C.</p>

<h5>4.1.1.4 Locating source files</h5>

<p>To assist in locating your Python source files, PythonWin can look down the
Python <tt><span style='font-size:10.0pt'>sys.path</span></tt> for a file.</p>

<p>To locate a Python file, select File <img border=0 width=20 height=16
src="images\image008.gif" alt="figs/U2192.gif">Locate
or press Ctrl-L. A dialog is displayed asking for the name of a module to
locate.</p>

<p>If you enter <tt><span style='font-size:10.0pt'>string</span></tt> into this
dialog, PythonWin searches the path for a module named <i>string.py</i>.
PythonWin should locate and open the standard Python string module.</p>

<p>This feature is aware of Python packages. You could enter a module name of <tt><span
style='font-size:10.0pt'>pywin.framework.app</span></tt> to locate the
PythonWin application module in the file <i>pywin\framework\app.py</i>.</p>

<h4><a name="_4.1.2_Command-Line_Parameters"></a>4.1.2 Command-Line Parameters</h4>

<p>PythonWin supports a number of command-line parameters as shown in this
table.</p>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 width="100%"
 style='width:100.0%'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><b><span style='font-size:10.0pt'>Command
  Line</span></b></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><b><span style='font-size:10.0pt'>Description</span></b></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>/edit</span></tt><span
  style='font-size:10.0pt'> </span><tt><i><span style='font-size:10.0pt'>filename</span></i></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Starts PythonWin and opens the named file
  for editing.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>/run</span></tt><span style='font-size:
  10.0pt'> </span><tt><i><span style='font-size:10.0pt'>filename</span></i></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Starts PythonWin and runs the specified
  script.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>/nodde</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Must be the first parameter. Starts PythonWin
  without DDE support, allowing for multiple PythonWin instances.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>/app</span></tt><span style='font-size:
  10.0pt'> </span><tt><i><span style='font-size:10.0pt'>appmodule</span></i></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Treats the named file as a PythonWin
  application. This is for advanced users only and is discussed in <a
  href="#_Chapter_20._GUI_Development">Chapter 20</a>.</span></p>
  </td>
 </tr>
</table>

<p>By default, PythonWin allows only one instance to be open. If you attempt to
start a new instance of PythonWin, the existing instance is reused, primarily
to support better integration with Windows Explorer, as described later in this
chapter. PythonWin uses Dynamic Data Exchange (DDE) to communicate between
instances, so the <tt><span style='font-size:10.0pt'>/nodde</span></tt>
parameter can disable this behavior and allow as many PythonWin instances as
you care to start.</p>

<p>To demonstrate these command lines, close the source file <i>pywindemo.py</i>
(leave PythonWin running) and start a command prompt window. Enter the command:</p>

<pre>C:\Somewhere&gt; start pythonwin.exe /edit C:\Scripts\pywindemo.py</pre>

<p>You should see your existing PythonWin application come to the foreground,
and see <i>pywindemo.py</i> opened for editing. Switch back to the command
prompt and enter the command:</p>

<pre>C:\Somewhere&gt; start pythonwin.exe /run c:\Scripts\pywindemo.py</pre>

<p>You should see the same messages printed as when you ran the script directly
from PythonWin. Finally, from the command prompt enter:</p>

<pre>C:\Somewhere&gt; start pythonwin.exe /nodde /edit c:\scripts\pywindemo.py</pre>

<p>And a new instance of PythonWin starts, with its own copy of <i>pywindemo.py</i>
open for editing.</p>

<h4 style='page-break-after:avoid'>4.1.3 The Interactive Window</h4>

<p>At the most obvious level, the PythonWin interactive window simulates the
built-in Python interpreter in interactive mode. Almost anything you type in
the standard Python shell can be used in PythonWin.</p>

<p>To reexecute blocks of code you previously executed, scroll the cursor to the
old block and press Enter. The block is copied to the end of the interactive
window, allowing you to make any changes before finally reexecuting the code.
Alternatively, the Ctrl-Up and Ctrl-Down keys allow you to scroll through the
previously executed commands.</p>

<p>PythonWin can also help you locate the source of errors in standard Python
tracebacks. All Python tracebacks are printed to the interactive window, and
you can double-click (or press Enter) on any line in a traceback to open the
offending line in the editor.</p>

<p>As an example, let’s force an error in our test script. Open the same <i>pywindemo.py</i>
created earlier and select File <img border=0 width=20 height=16
src="images\image008.gif" alt="figs/U2192.gif">Import.
Now close the source file. In the interactive window, type:</p>

<pre>&gt;&gt;&gt; pywindemo.hello(0)</pre>

<p>PythonWin responds with:</p>

<pre>Traceback (innermost last):</pre><pre>&nbsp; File &quot;&lt;interactive input&gt;&quot;, line 0, in ?</pre><pre>&nbsp; File &quot;c:\scripts\pywindemo.py&quot;, line 2, in hello</pre><pre>&nbsp;&nbsp;&nbsp; print &quot;Hello, &quot; + msg</pre><pre>TypeError: illegal argument type for built-in operation</pre><pre>&gt;&gt;&gt;</pre>

<p>If you double-click on the third or fourth lines of this traceback, the test
script is opened, and you are at line 2, the line with the indicated error.</p>

<h4>4.1.4 The Python Editor</h4>

<p>The PythonWin editor has many features especially designed for Python
programs. In many cases these features are shared between IDLE and PythonWin;
both IDEs use exactly the same (Python!) code to implement the same features.<a
name="_ftnref3"></a><a href="#_ftn3" title=""><span class=atitlechar><sup><span
style='font-size:9.0pt'>[1]</span></sup></span></a> The most important features
with a brief description are provided here:</p>

<p class=footnote style='margin-top:5.0pt;margin-right:.5in;margin-bottom:5.0pt;
margin-left:.5in'>Unlimited undo and redo capabilities </p>

<p style='margin-left:.5in'>Enough said!</p>

<p class=MsoNormal><i><span style='font-family:Arial;color:#990000'>Smart
indentation</span></i><span style='font-family:Arial'> </span></p>

<p style='margin-left:.5in'>The editor examines existing source files to
determine their indentation. If configured, the editor can override your tab
preferences to match the existing file. When indenting an incomplete expression
(such as a multiline list definition or function call), the correct indentation
is applied to line up elements in the list or the call parameters. Entire
blocks can be indented or not to allow easy program restructuring.</p>

<p class=MsoNormal><i><span style='font-family:Arial;color:#990000'>Block
commenting</span></i><span style='font-family:Arial'> </span></p>

<p style='margin-left:.5in'>You can select a block of text and have it all
commented or not with a single command.</p>

<p class=MsoNormal><i><span style='font-family:Arial;color:#990000'>Comment and
multiline string formatting</span></i><span style='font-family:Arial'> </span></p>

<p style='margin-left:.5in'>Comment blocks and multiline strings can be
reformatted. This command correctly reformats paragraphs to a 70-character
width.</p>

<p class=MsoNormal><i><span style='font-family:Arial;color:#990000'>Attribute
expansion</span></i><span style='font-family:Arial'> </span></p>

<p style='margin-left:.5in'>If you type the name of a module and certain other
objects, then press the period key, a list box is displayed with a selection of
attributes. The arrow keys allow you to change the selection, and the Tab key
selects it. You can see this by typing <tt><span style='font-size:10.0pt'>string.</span></tt>
in an editor or interactive window. As this book goes to press, this feature
had not yet been ported to IDLE.</p>

<p class=MsoNormal><i><span style='font-family:Arial;color:#990000'>Call tips</span></i><span
style='font-family:Arial'> </span></p>

<p style='margin-left:.5in'>As you type the name of a Python function and open
the parenthesis, a pop-up window with information about the function may be
displayed. The easiest way to see this in action is to type <tt><span
style='font-size:10.0pt'>string.split(</span></tt>, and the Call Tip window
should display.</p>

<p class=MsoNormal><i><span style='font-family:Arial;color:#990000'>Auto
completion</span></i><span style='font-family:Arial'> </span></p>

<p style='margin-left:.5in'>This is a handy feature that means you need never mistype
a variable name again. You can type the start of any word and press the ALT-/
key to complete the word. The current file is searched for words, and all words
that match are selected. For example, let’s assume you have an editor window
with the code:</p>

<pre style='margin-left:.5in'>import string</pre><pre style='margin-left:.5in'>strval = string.join([&quot;hi&quot;, &quot;there&quot;])</pre>

<p style='margin-left:.5in'>If you type <tt><span style='font-size:10.0pt'>st</span></tt>
and press ALT-/, <tt><span style='font-size:10.0pt'>string</span></tt> is
substituted. If you press it again, <tt><span style='font-size:10.0pt'>strval</span></tt>
is substituted, and so forth.</p>

<p class=MsoNormal><i><span style='font-family:Arial;color:#990000'>View
whitespace</span></i><span style='font-family:Arial'> </span></p>

<p style='margin-left:.5in'>As whitespace is significant in Python, there is an
option in PythonWin that allows you to view the whitespace in your file. Space
characters are shown as a soft dot; tab characters are shown as an arrow. IDLE
doesn’t support this feature.</p>

<p class=MsoNormal><i><span style='font-family:Arial;color:#990000'>Fixed and
proportional fonts</span></i><span style='font-family:Arial'> </span></p>

<p style='margin-left:.5in'>Many people prefer to use proportional fonts to
edit source code, but proportional fonts often make it hard to see if your
source code is correctly aligned. PythonWin allows you to choose your preferred
fixed and proportional font and quickly toggle between the two.</p>

<p class=MsoNormal><i><span style='font-family:Arial;color:#990000'>Integrated
object browser</span></i><span style='font-family:Arial'> </span></p>

<p style='margin-left:.5in'>Each editor window in PythonWin has an integrated
browser window. This window is initially closed, but can be shown by selecting
the splitter bar on the left side of the window. This browser allows you to see
all the classes and functions defined in the current source file and quickly
move between them.</p>

<p class=MsoNormal><i><span style='font-family:Arial;color:#990000'>Bookmarks</span></i><span
style='font-family:Arial'> </span></p>

<p style='margin-left:.5in'>The Ctrl-F2 key allows you to set a bookmark at any
line in a source file. Pressing F2 moves you between bookmarks defined in the
current file. A bookmark is indicated in the margin of the editor window.
Bookmarks are not available in IDLE.</p>

<p class=MsoNormal><i><span style='font-family:Arial;color:#990000'>Automatic
file backup</span></i><span style='font-family:Arial'> </span></p>

<p style='margin-left:.5in'>PythonWin can be configured to save backup copies
of your source files. These backups can be saved either in the same directory
as the original but with the file extensions changed to <i>.bak</i>, or with
the same name into a <i>bak</i> subdirectory in your Windows <i>temp</i>
directory. </p>

<h4>4.1.5 Python Path Browser</h4>

<p>Available from the Tools menu, the Python path browser is really a bit of a
misnomer. When you open the browser, it does indeed display each directory on
your PythonPath and each module in that directory. However, the browser also
allows you to delve into the modules, examining the functions and classes
defined within.</p>

<h4>4.1.6 Object Browser</h4>

<p>PythonWin supports a fairly simple object browser. This allows you to peer
deep inside any Python object, allowing you to discover various details about
the object.</p>

<p>In contrast with the Python path browser, the object browser doesn’t browse
Python source code: only Python objects. This means that objects you wish to
browse must actually exist in the Python environment. For example, the only way
to browse a Python module in this browser is to import the module.</p>

<p>The object browser can be found by selecting Tools <img border=0 width=20
height=16 src="images\image008.gif"
alt="figs/U2192.gif">Browser or by pressing Ctrl-B. A dialog is presented
asking for the object to browse; to browse the sample Python module, enter <tt><span
style='font-size:10.0pt'>pywindemo</span></tt> and select OK.</p>

<p>If you expand the <tt><span style='font-size:10.0pt'>hello()</span></tt> function
in the browser, you should have a window similar to that shown in <a
href="#_Figure_4.2._The_PythonWin_browser">Figure 4.2</a>.</p>

<h5 align=center style='text-align:center'><a
name="_Figure_4.2._The_PythonWin_browser"></a>Figure 4.2. The PythonWin browser</h5>

<p class=MsoNormal align=center style='text-align:center'><span
style='font-family:Arial'><img border=0 width=502 height=214
src="images\image010.gif" alt="figs/ppw.0402.gif"></span></p>

<p>Because the browser digs deeply into Python’s internals, some of the
information presented is quite esoteric. However, it can often provide useful
information about your objects.</p>

<h4>4.1.7 Windows Explorer Integration</h4>

<p>PythonWin provides basic integration with the Windows Explorer. All <i>.py</i>
and <i>.pyw</i> files shown in the Windows Explorer have an Edit option on
their context (i.e., right-click) menu. Selecting this option starts PythonWin
if it isn’t already running, and opens the file for editing.</p>

<p>You can also drag and drop files from the Windows Explorer into PythonWin.
These files are also open for editing.</p>

<p>PythonWin has also been registered with Windows in such a way that it can be
run without knowing its specific location and without having it on your system
path. If you select Start <img border=0 width=20 height=16
src="images\image008.gif" alt="figs/U2192.gif">Run
from the Windows taskbar and enter <tt><span style='font-size:10.0pt'>pythonwin</span></tt>,
it’s correctly located and started. From a command prompt, you can also execute
the command <tt><span style='font-size:10.0pt'>start</span></tt> <tt><span
style='font-size:10.0pt'>pythonwin</span></tt> from any directory, and
PythonWin starts. See the previous section, <a
href="#_4.1.2_Command-Line_Parameters">Section 4.1.2</a>.</p>

<h4>4.1.8 The Debugger</h4>

<p>PythonWin also has a built-in Python debugger to help you develop your
scripts. The PythonWin debugger includes all the features you expect in
debuggers, including:</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Breakpoints that can be set at any location. Optionally, these
breakpoints may have a condition that must evaluate to <tt><span
style='font-size:10.0pt'>true</span></tt> before the breakpoint stops.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>A watch window allowing easy tracking of changes to key variables.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Commands allowing you to step into, over, or out of functions.</p>

<p>If you are familiar with other Windows IDE debugging environments (such as
Visual C++, Visual Basic, or Delphi) you should find the debugger easy to work
with.</p>

<p>For a language as flexible as Python, there is one huge limitation in the
debugger that is worth noting. It isn’t possible to modify the code while it’s
being debugged. If you spot a bug while debugging, code changes you make aren’t
applied until you reload the module. Further, any source-code changes are
likely to disrupt the debugging session, as the debugger will still be stepping
though the original line positions even though they are likely to have changed.</p>

<p>The simplest way to use the debugger is to run scripts using the same
technique described earlier, but this time select one of the debugging options.
The Run Script dialog provides the following debugging options:</p>

<p class=MsoNormal><i><span style='font-family:Arial;color:#990000'>No
debugging</span></i><span style='font-family:Arial'> </span></p>

<p style='margin-left:.5in'>This means that the script runs normally without
any debugging; it doesn’t stop at breakpoints.</p>

<p class=MsoNormal><i><span style='font-family:Arial;color:#990000'>Step
through in the debugger</span></i><span style='font-family:Arial'> </span></p>

<p style='margin-left:.5in'>Steps through each line in the debugger. Selecting
this option invokes the debugger at the first line in our script. The default PythonWin
configuration binds the F11 (step in) or F10 (step over) keys to this function.</p>

<p class=MsoNormal><i><span style='font-family:Arial;color:#990000'>Run in the
debugger</span></i><span style='font-family:Arial'> </span></p>

<p style='margin-left:.5in'>Runs the script under the debugger, stopping only
at breakpoints. If you select this option when no breakpoints are set,
PythonWin warns you that the debugger is unlikely to be invoked. Of course,
PythonWin can’t determine if your breakpoints are on lines that are actually
executed. If none of your breakpoints are actually hit, this command appears to
run without the debugger at all; the script starts and completes normally
(albeit slightly slower due to the debugger overhead). The default PythonWin
configuration binds the F5 key (Go) to this function.</p>

<p class=MsoNormal><i><span style='font-family:Arial;color:#990000'>Postmortem
of unhandled exceptions</span></i><span style='font-family:Arial'> </span></p>

<p style='margin-left:.5in'>The script isn’t run under the debugger, but if an
unhandled exception occurs, the debugger is invoked to perform postmortem
analysis. This can be handy, as it can show you the complete state of your
Python program, including all variable values, at the point where the exception
was raised. If your script runs successfully (i.e., doesn’t generate a
traceback while running), this option has no effect.</p>

<p>The following discussion demonstrates the debugger using the same script
developed earlier in this chapter. For the example, set a breakpoint at the
first line of the <tt><span style='font-size:10.0pt'>main()</span></tt>
function. You can set a breakpoint by moving to the line where the breakpoint
should be applied and either display the debugging toolbar (View <img border=0
width=20 height=16 src="images\image008.gif"
alt="figs/U2192.gif">Toolbars <img border=0 width=20 height=16
src="images\image008.gif" alt="figs/U2192.gif">Debugging)
and selecting the appropriate button or press the F9 key. PythonWin should
respond by placing a breakpoint indicator in the margin of the editor window.
The breakpoint is simply a black outline as shown in <a
href="#_Figure_4.3._PythonWin_about_to_debu">Figure 4.3</a>, to indicate the
breakpoint is currently disabled (the debugger isn’t yet running).</p>

<h5 align=center style='text-align:center'><a
name="_Figure_4.3._PythonWin_about_to_debu"></a>Figure 4.3. PythonWin about to
debug our sample script</h5>

<p class=MsoNormal align=center style='text-align:center'><span
style='font-family:Arial'><img border=0 width=502 height=402
src="images\image011.gif" alt="figs/ppw.0403.gif"></span></p>

<p>Select the OK button, and if all goes well, the PythonWin debugger kicks in,
and you will be stopped at your breakpoint. Notice a number of changes to the
PythonWin environment, as shown in <a
href="#_Figure_4.4._PythonWin_debugging_our">Figure 4.4</a>. The most obvious
are:</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>A new Debugging toolbar appears, giving access to debugger-related
features (this toolbar can always be displayed using View <img border=0
width=20 height=16 src="images\image008.gif"
alt="figs/U2192.gif">Toolbars <img border=0 width=20 height=16
src="images\image008.gif" alt="figs/U2192.gif">Debugging).</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>A few new debugging windows appear. These windows can be docked in the
PythonWin frame or left floating. <a
href="#_Figure_4.4._PythonWin_debugging_our">Figure 4.4</a> shows the Stack
window docked on the left side of PythonWin, and the Breakpoints and Watch
windows floating.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>The debugger breakpoint turns red, indicating the debugger is active.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>The Interactive Window shows a <tt><span style='font-size:10.0pt'>[Dbg]</span></tt>
indicator before the standard <tt><span style='font-size:10.0pt'>&gt;&gt;&gt;</span></tt>
and <tt><span style='font-size:10.0pt'>...</span></tt> prompts, indicating that
expressions you enter will be evaluated under the debugger’s current context rather
than in the global context used by default. This means you can view or change
any local or global variables in the debugger’s current function.</p>

<h5 align=center style='text-align:center;page-break-after:avoid'><a
name="_Figure_4.4._PythonWin_debugging_our"></a>Figure 4.4. PythonWin debugging
our sample script</h5>

<p class=MsoNormal align=center style='text-align:center'><span
style='font-family:Arial'><img border=0 width=502 height=411
src="images\image012.gif" alt="figs/ppw.0404.gif"></span></p>

<p>At this point, you can experiment with some of the debugger windows and use
the debugger toolbar (or the keyboard shortcuts) to step through the program. <a
href="#_Figure_4.4._PythonWin_debugging_our">Figure 4.4</a> shows the debugger
after stopping at the breakpoint and selecting the Step command once.</p>

<h5>4.1.8.1 Hard breakpoints</h5>

<p>The term <i>hard breakpoint</i> refers to the process of changing your
source code to explicitly invoke the debugger. You add a line of code that
invokes the debugger directly, regardless of how you are running the script.
These breakpoints are called hard because they can’t be removed by the
debugger: they are embedded in your code, and there is no way to reset them
other than again changing the code!</p>

<p>Hard breakpoints are particularly useful when you are unable or would find
it difficult to run your scripts under PythonWin. You can add a hard breakpoint
to almost any Python program, be it a PythonWin program or even a Python COM
object running under Active Server Pages or Internet Explorer. In almost all
cases, the PythonWin debugger environment will start up, and you can debug to
your heart’s content.</p>

<p>You can set a hard breakpoint by calling the function <tt><span
style='font-size:10.0pt'>pywin.debugger.brk()</span></tt> . It’s likely that
you will need to import the <tt><span style='font-size:10.0pt'>pywin.debugger</span></tt>
module before making the call, so the code to invoke the debugger typically
looks like:</p>

<pre>import pywin.debugger</pre><pre>pywin.debugger.brk()</pre>

<p>The PythonWin debugger is installed with thorough documentation, including a
tutorial and sample code that demonstrates these techniques. You should
familiarize yourself with this documentation to discover other debugger
features.</p>

<h3><a name="_4.2_IDLE"></a>4.2 IDLE</h3>

<p>IDLE is an alternative Integrated Development Environment for Python. By
default, the Python 1.5.2 and later installations install IDLE and a shortcut
to start IDLE on your Start menu.</p>

<p>“IDLE” is a twist on the standard IDE acronym and is also named after Eric
Idle, one of the sillier members of the Monty Python comedy troupe, but don’t
tell him.</p>

<p>As we have discussed, many IDE functions are shared between PythonWin and
IDLE (or more correctly, stolen from IDLE by PythonWin, with Guido’s blessing).
So the differences between PythonWin and IDLE have less to do with features and
more to do with platforms.</p>

<p>IDLE runs on almost all platforms that support Python. Although the user
interface it provides isn’t quite as slick as PythonWin’s, you do have an IDE
that runs places other than Windows. For many people, this is the single killer
feature!</p>

<p>Of course, your choice of environment is up to you, but it appears that
people who use Python on multiple platforms prefer IDLE because their
environment can follow them. People who use Python only on Windows typically
prefer PythonWin and its interface. As IDLE evolves further and the Tkinter GUI
framework offers more features on Windows, we may find this simple distinction
blurring. We recommend you spend time with both IDE environments and choose for
yourself.</p>

<h4>4.2.1 Platforms and Versions</h4>

<p>IDLE is itself written in Python, using Tkinter, Python’s de facto
cross-platform GUI package based on Tcl/Tk. Because Python and Tcl/Tk are cross
platform, so is IDLE; it works as well on Windows (95, 98, NT) as on Unix
(including Linux), with minor, unavoidable differences because of inherent differences
between the platforms. It also works on Macintosh (although occasionally you
may experience a slight problem, because this platform gets less testing).</p>

<p>This section describes IDLE Version 0.5, which hasn’t been released at the
time of writing. The Python 1.5.2 distribution comes with IDLE Version 0.4,
which differs in a number of details, so these will be detailed where
appropriate. In any case, IDLE requires Python 1.5.2 or later to run. Tcl/Tk
8.0 or later (optionally installed with Python 1.5.2) is needed.</p>

<p>As the version number should imply, IDLE is still a young application, and
features are developing at a great rate. Check the online documentation
regularly to keep up with the current feature set.</p>

<h4>4.2.2 Shell Window</h4>

<p>When IDLE starts, it presents its shell window. This window is equivalent to
PythonWin’s Interactive Window or the interactive Python session, and it’s
where you enter arbitrary Python commands.</p>

<p>By now, you should be completely familiar with Python’s own interactive
(command-line) mode. We first discussed this in <a
href="#_Chapter_2._Python_Language_Review">Chapter 2</a>, and also previously
in this chapter, so you already know how to use IDLE’s Python shell window! <a
href="#_Figure_4.5._IDLE's_shell_window_on_">Figure 4.5</a> shows the Python
shell window with a few interactive commands.</p>

<h5 align=center style='text-align:center'><a
name="_Figure_4.5._IDLE's_shell_window_on_"></a>Figure 4.5. IDLE's shell window
on Windows</h5>

<p class=MsoNormal align=center style='text-align:center'><span
style='font-family:Arial'><img border=0 width=502 height=274
src="images\image013.gif" alt="figs/ppw.0405.gif"></span></p>

<p>Since we made a big song-and-dance about the cross-platform capabilities of
IDLE, <a href="6.htm#_Figure_4.6._IDLE's_shell_window_on_">Figure 4.6</a> shows
the Python shell window running on a Unix system. You will probably notice some
subtle differences between the two windows; the fonts are different, hence the
slightly different window sizes: the default is 80 × 24 character cells on all
platforms. You may also notice that on Windows the Help menu is placed next to
the other menus, while on Unix it’s placed to the far right of the menu bar.</p>

<p>One of the first things the astute reader might query is the lack of the <tt><span
style='font-size:10.0pt'>...</span></tt> prompt in multiline statements. Using
the “official” interactive Python mode or PythonWin, multiline statements
normally look like:</p>

<pre>&gt;&gt;&gt; while x &lt; 10:</pre><pre>...&nbsp;&nbsp;&nbsp;&nbsp; x = x + 1</pre><pre>...&nbsp;&nbsp;&nbsp;&nbsp; print x, x**3</pre><pre>... </pre><pre>&gt;&gt;&gt;</pre>

<p>IDLE takes a different approach. Instead of showing secondary prompts,
Python automatically indents these lines with whitespace, just like the regular
editor. This is one feature not provided by PythonWin; although the interactive
window does perform some smart indentation, it doesn’t offer the full-blown
smart indentation used by IDLE and the PythonWin editor.</p>

<h5 align=center style='text-align:center'><a
name="_Figure_4.6._IDLE's_shell_window_on_"></a>Figure 4.6. IDLE's shell window
on Unix</h5>

<p class=MsoNormal align=center style='text-align:center'><span
style='font-family:Arial'><img border=0 width=502 height=310
src="images\image014.gif" alt="figs/ppw.0406.gif"></span></p>

<p>Just like PythonWin, you can move to a previous command and press Enter to
copy the command to the end of the buffer, ready for subsequent editing and
execution. The shell window also provides history capabilities, allowing you to
quickly recall next and previous commands, activated by the ALT-N and ALT-P
keys, respectively.</p>

<h4>4.2.3 The Python Editor</h4>

<p>You can use IDLE as an ordinary text editor to write Python programs. As
discussed previously in this chapter, PythonWin recently adopted many of IDLE’s
best editor features, so the same, rich, Python-aware editing environment is
available in IDLE. It’s worth noting that IDLE and PythonWin have different
default keyboard bindings, so the same features may be accessed in different
ways; check the IDLE menus for the shortcut keys.</p>

<p>IDLE also colors the text of your program according to syntactic categories.
For example, strings are displayed in green, so when you forget a string quote,
you will probably notice before you run the program. Other editors have this
feature, and some support Python’s syntax, but not many (not even Emacs) get it
right at all times. The inaccuracy can be annoying, especially when you are
editing multiline string literals. IDLE boasts that it gets the coloring 100%
right, but you wouldn’t expect any less from a Python source-code editor
written in Python!</p>

<h4 style='page-break-after:avoid'>4.2.4 Path and Class Browsers</h4>

<p>IDLE supports a Python path and Python class browser by selecting the
appropriate entry from the File menu. These browsers look remarkably similar to
the equivalent browsers in PythonWin, which should come as no surprise, as both
IDLE and PythonWin use the standard Python module <tt><span style='font-size:
10.0pt'>pyclbr</span></tt> to obtain their functionality.</p>

<h4>4.2.5 Running and Importing Scripts</h4>

<p>As with PythonWin, IDLE supports the concept of running and importing
scripts. To run or import a script, the file must be opened in the text editor
and Edit <img border=0 width=20 height=16
src="images\image008.gif" alt="figs/U2192.gif">Run
Script or Edit <img border=0 width=20 height=16
src="images\image008.gif" alt="figs/U2192.gif">Import
Module selected.</p>

<p>These features work the same as under PythonWin. Since we have experimented
with these functions using PythonWin, we won’t bore you with a repeat for IDLE.
However, you may still want to open the same sample script used for PythonWin
and test the features using IDLE.</p>

<p>If a traceback is printed to the Python shell window, you can move the
cursor to one of the error lines and select the Go to file/line option (from
the Debug or right-click menus) to open the file.</p>

<h4>4.2.6 The Debugger</h4>

<p>As you expect of an IDE, IDLE contains a built-in debugger. To use the
debugger, it must first be enabled via the Debug <img border=0 width=20
height=16 src="images\image008.gif"
alt="figs/U2192.gif">Debugger command from the Python shell window. The
debugger dialog appears, and the shell window responds with:</p>

<pre>[DEBUG ON]</pre><pre>&gt;&gt;&gt;</pre>

<p>IDLE is now ready to debug. To start the debugger, open the script to debug
and run (or import) it. For the purposes of this example, let’s debug the same
script you used for PythonWin (<i>C:\Scripts\pywindemo.py</i> in the example).
Once the file is open, select Edit <img border=0 width=20 height=16
src="images\image008.gif" alt="figs/U2192.gif">Run
script (or press Ctrl-F5). The debugger dialog becomes active, and the
debugging session begins. <a href="6.htm#_Figure_4.7._IDLE's_debugger">Figure
4.7</a> shows you stopped inside your main function.</p>

<p>The stack leading to the current call is shown. Selecting an entry displays
the local and global variables and the source code for the stack entry,
depending on the options selected at the top of the dialog.</p>

<p>At the time of writing, there are a few limitations in the IDLE debugger
worth mentioning:</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>When debugging the top-level of a module, the Go and Over commands
function like the Step command. Go and Over don’t function correctly until the
top-level script calls a function.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>The Python shell window is effectively disabled during the debugging
session. You can’t use normal Python commands to view and change variables
while the debugger is active.</p>

<h5 align=center style='text-align:center'><a
name="_Figure_4.7._IDLE's_debugger"></a>Figure 4.7. IDLE's debugger</h5>

<p class=MsoNormal align=center style='text-align:center'><span
style='font-family:Arial'><img border=0 width=502 height=225
src="images\image015.gif" alt="figs/ppw.0407.gif"></span></p>

<p>It’s quite possible that these and other limitations will be removed by the
time you install IDLE.</p>

<h5>4.2.6.1 Postmortem debugging</h5>

<p>IDLE supports postmortem debugging, which allows you to capture the state of
a Python program after an exception. Unlike PythonWin, where postmortem
debugging must be explicitly enabled when running a script, IDLE allows you to
perform this analysis at any time directly after an unhandled exception has
occurred. To perform postmortem debugging, select Debug <img border=0 width=20
height=16 src="images\image008.gif"
alt="figs/U2192.gif">Stack Viewer after the traceback has been printed. The
debugger dialog is then activated, allowing you to view the state of each stack
entry in the traceback.</p>

<h3><a name="_4.3_Conclusion"></a>4.3 Conclusion</h3>

<p>This chapter provided a look at two IDEs available for Python on Windows.
Both IDLE and PythonWin allow you to develop, run, and debug Python programs,
and provide unique Python-based features you won’t find in other environments.</p>

<p>PythonWin and IDLE are not competitors; in fact, they can be viewed as
partners. The developers of both packages have gone to considerable effort to
ensure that the best features of each are available in the other. As we have
seen, the primary difference is the GUI environment in which they run.
PythonWin runs only under Windows, and it takes full advantage of Windows
features: excellent if you use only Windows. IDLE provides the one key feature
PythonWin will almost certainly never have: its runs on all popular, modern
operating systems.</p>

<p>Hopefully this chapter has allowed you to see how each development
environment operates and encouraged you to try both. Although most examples in
this book use PythonWin to run sample programs, they all work perfectly under
IDLE, so feel free to use the environment of your choice.</p>

<p class=footnote style='margin:0in;margin-bottom:.0001pt'>&nbsp;<a name="_ftn3"></a><a
href="6.htm#_ftnref3" title=""><span
class=MsoFootnoteReference><span style='font-size:7.5pt;vertical-align:baseline'>[1]</span></span></a><span
style='font-size:7.5pt'> And truth be told, PythonWin stole most of these
features after IDLE had already implemented them. No point reinventing the
wheel!</span></p>

<p class=MsoNormal>&nbsp;</p>

<div align=center>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 width="90%"
 style='width:90.0%;background:#ECECD9;border-collapse:collapse;border:none'>
 <tr>
  <td width="33%" style='width:33.0%;border:inset #111111 1.0pt;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><a href="5.htm"><span style='text-decoration:none'><img
  border=0 width=37 height=34 src="leftarrw.gif"></span></a></p>
  </td>
  <td width="33%" style='width:33.0%;border:inset #111111 1.0pt;border-left:
  none;padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><a href="0.htm"><span
  style='font-size:13.5pt'>Table of Contents</span></a></p>
  </td>
  <td width="34%" style='width:34.0%;border:inset #111111 1.0pt;border-left:
  none;padding:.75pt .75pt .75pt .75pt'>
  <p align=right style='text-align:right'><a href="7.htm"><span
  style='text-decoration:none'><img border=0 width=37 height=34
  src="rightarrw.gif"></span></a></p>
  </td>
 </tr>
</table>

</div>

<p class=MsoNormal>&nbsp;</p>

</div>

</body>

</html>
