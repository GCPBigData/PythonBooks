<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=utf-8">
<meta name=Generator content="Microsoft Word 10 (filtered)">
<title> </title>

<link rel=Stylesheet type="text/css" media=all href="1.css">
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Tahoma;
	panose-1:2 11 6 4 3 5 4 4 2 4;}
@font-face
	{font-family:Verdana;
	panose-1:2 11 6 4 3 5 4 4 2 4;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;}
h1
	{margin-top:1.0in;
	margin-right:0in;
	margin-bottom:.5in;
	margin-left:0in;
	text-align:center;
	page-break-before:always;
	font-size:24.0pt;
	font-weight:bold;}
h2
	{page-break-before:always;
	font-size:18.0pt;
	font-weight:bold;}
h3
	{font-size:13.5pt;
	font-weight:bold;}
h4
	{font-size:12.0pt;
	font-weight:bold;}
h5
	{font-size:10.0pt;
	font-weight:bold;}
p.MsoFootnoteText, li.MsoFootnoteText, div.MsoFootnoteText
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;}
p.MsoTitle, li.MsoTitle, div.MsoTitle
	{font-size:12.0pt;
	font-weight:bold;}
p.MsoBodyText3, li.MsoBodyText3, div.MsoBodyText3
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:0in;
	font-size:8.0pt;}
p.MsoDocumentMap, li.MsoDocumentMap, div.MsoDocumentMap
	{margin:0in;
	margin-bottom:.0001pt;
	background:navy;
	font-size:12.0pt;}
p
	{font-size:12.0pt;}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;}
p.footnote, li.footnote, div.footnote
	{font-size:12.0pt;}
p.monofont, li.monofont, div.monofont
	{font-size:12.0pt;}
p.romanfont, li.romanfont, div.romanfont
	{font-size:12.0pt;}
p.atitle, li.atitle, div.atitle
	{font-size:9.0pt;
	font-weight:bold;}
p.chaptertitle, li.chaptertitle, div.chaptertitle
	{margin-top:0in;
	margin-right:7.5pt;
	margin-bottom:0in;
	margin-left:7.5pt;
	margin-bottom:.0001pt;
	font-size:12.0pt;}
p.sectiontitle, li.sectiontitle, div.sectiontitle
	{margin-top:0in;
	margin-right:15.0pt;
	margin-bottom:0in;
	margin-left:15.0pt;
	margin-bottom:.0001pt;
	font-size:12.0pt;}
p.itable, li.itable, div.itable
	{font-size:12.0pt;}
p.tiny, li.tiny, div.tiny
	{font-size:7.0pt;}
p.multiselect, li.multiselect, div.multiselect
	{font-size:7.5pt;}
p.safnavoff, li.safnavoff, div.safnavoff
	{font-size:8.5pt;}
p.safnavon, li.safnavon, div.safnavon
	{font-size:8.5pt;
	font-weight:bold;}
p.navtopbg, li.navtopbg, div.navtopbg
	{background:#990000;
	font-size:12.0pt;}
p.navleftbg, li.navleftbg, div.navleftbg
	{background:#666666;
	font-size:12.0pt;}
p.navleftbgalt, li.navleftbgalt, div.navleftbgalt
	{background:#666666;
	font-size:12.0pt;}
p.navtitle, li.navtitle, div.navtitle
	{font-size:9.0pt;
	font-weight:bold;}
p.nonavtitle, li.nonavtitle, div.nonavtitle
	{font-size:9.0pt;
	font-weight:bold;}
p.bimodoff, li.bimodoff, div.bimodoff
	{font-size:12.0pt;}
p.bimodon, li.bimodon, div.bimodon
	{font-size:12.0pt;}
p.btblinks, li.btblinks, div.btblinks
	{font-size:8.5pt;}
p.btlinksactive, li.btlinksactive, div.btlinksactive
	{font-size:12.0pt;
	font-weight:bold;}
p.inputtext, li.inputtext, div.inputtext
	{font-size:12.0pt;}
p.inputbutton, li.inputbutton, div.inputbutton
	{font-size:12.0pt;
	font-weight:bold;}
p.endsearch, li.endsearch, div.endsearch
	{font-size:12.0pt;
	font-weight:bold;}
p.dropdown, li.dropdown, div.dropdown
	{font-size:12.0pt;}
p.navtoptoolbg, li.navtoptoolbg, div.navtoptoolbg
	{background:black;
	font-size:12.0pt;}
p.headingbarbg, li.headingbarbg, div.headingbarbg
	{background:#333333;
	font-size:12.0pt;}
p.headingsubbarbg, li.headingsubbarbg, div.headingsubbarbg
	{background:#CCCCCC;
	font-size:12.0pt;}
p.headingbartitle, li.headingbartitle, div.headingbartitle
	{font-size:10.5pt;
	font-weight:bold;}
p.headingsubbartitle, li.headingsubbartitle, div.headingsubbartitle
	{font-size:9.0pt;
	font-weight:bold;}
p.tablestripe, li.tablestripe, div.tablestripe
	{background:#EEEEEE;
	font-size:12.0pt;}
p.pgtitle, li.pgtitle, div.pgtitle
	{font-size:12.0pt;
	font-weight:bold;}
p.buyprint, li.buyprint, div.buyprint
	{font-size:7.5pt;}
p.resulthighlight, li.resulthighlight, div.resulthighlight
	{background:lightblue;
	font-size:12.0pt;}
p.pgsubtitle, li.pgsubtitle, div.pgsubtitle
	{font-size:12.0pt;
	font-weight:bold;}
p.helphead, li.helphead, div.helphead
	{font-size:12.0pt;
	font-weight:bold;}
p.helpsubhead, li.helpsubhead, div.helpsubhead
	{font-size:10.0pt;}
p.helpcaption, li.helpcaption, div.helpcaption
	{font-size:10.0pt;}
p.helptab, li.helptab, div.helptab
	{font-size:10.0pt;}
p.sm, li.sm, div.sm
	{font-size:6.0pt;}
p.gowild, li.gowild, div.gowild
	{font-size:13.5pt;
	font-weight:bold;
	font-style:italic;}
p.getstarted, li.getstarted, div.getstarted
	{font-size:10.0pt;
	font-weight:bold;
	font-style:italic;}
@page Section1
	{size:8.5in 11.0in;
	margin:1.0in 1.25in 1.0in 1.25in;}
div.Section1
	{page:Section1;}
-->
</style>

</head>

<body lang=EN-US link="#990000" vlink=purple>

<div class=Section1>

<div align=center>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 width="90%"
 style='width:90.0%;background:#ECECD9;border-collapse:collapse'>
 <tr>
  <td width="33%" style='width:33.0%;border:inset #111111 1.0pt;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><a href="20.htm"><span style='text-decoration:none'><img
  border=0 width=37 height=34 src="leftarrw.gif"></span></a></p>
  </td>
  <td width="33%" style='width:33.0%;border:inset #111111 1.0pt;border-left:
  none;padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><a href="0.htm"><span
  style='font-size:13.5pt'>Table of Contents</span></a></p>
  </td>
  <td width="34%" style='width:34.0%;border:inset #111111 1.0pt;border-left:
  none;padding:.75pt .75pt .75pt .75pt'>
  <p align=right style='text-align:right'><a href="22.htm"><span
  style='text-decoration:none'><img border=0 width=37 height=34
  src="rightarrw.gif"></span></a></p>
  </td>
 </tr>
</table>

</div>

<p class=MsoNormal style='margin-bottom:12.0pt'>&nbsp;</p>

<h2><a name="_Chapter_17._Processes_and_Files"></a>Chapter 17. Processes and
Files</h2>

<p>This chapter covers techniques for working with files and processes. We
first look at the facilities Python has for portably working with both files
and processes, then we’ll look at Windows-specific techniques. If you’re an
experienced Python developer, you may wish to skip to the later sections; if
you’re new to Python, this is essential groundwork.</p>

<p>We cover techniques for finding, moving, and rearranging files, look at file
objects themselves, and then cover some of the standard Python idioms for
reading and writing them. Then we look at techniques for starting, stopping,
and generally working with processes.</p>

<h3><a name="_17.1_Portable_File_Manipulation"></a>17.1 Portable File
Manipulation</h3>

<p>Python has excellent built-in file support that works on all platforms
supported by Python.</p>

<h4>17.1.1 Working with Files on Disk</h4>

<p>Most of the key file-manipulation functions live in the <tt><span
style='font-size:10.0pt'>os</span></tt> module and an associated module called <tt><span
style='font-size:10.0pt'>os.path</span></tt> . To provide a degree of platform
independence, <tt><span style='font-size:10.0pt'>os</span></tt> loads in the
right module for your platform. <tt><span style='font-size:10.0pt'>os</span></tt>
provides basic file-handling functions, and <tt><span style='font-size:10.0pt'>os.path</span></tt>
handles operations on paths and filenames. On Windows, these modules are called
<tt><span style='font-size:10.0pt'>nt</span></tt> and <tt><span
style='font-size:10.0pt'>ntpath</span></tt> respectively, although they should
always be referred to as <tt><span style='font-size:10.0pt'>os</span></tt> and <tt><span
style='font-size:10.0pt'>os.path</span></tt>. The functions in the <tt><span
style='font-size:10.0pt'>os</span></tt> module generally accept the same
arguments as their corresponding MS-DOS commands. <a
href="#_Table_17.1._File_and_Directory_Func">Table 17.1</a> depicts the <tt><span
style='font-size:10.0pt'>os</span></tt> module’s file and directory functions.</p>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 width="100%"
 style='width:100.0%'>
 <tr>
  <td colspan=2 style='border:none;padding:.75pt .75pt .75pt .75pt'>
  <h5 align=center style='text-align:center'><a
  name="_Table_17.1._File_and_Directory_Func"></a>Table&nbsp;17.1. File and
  Directory Functions</h5>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><b><span style='font-size:10.0pt'>Module
  and Function</span></b></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><b><span style='font-size:10.0pt'>Description</span></b></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre>os.getcwd()</pre></td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Gets the current working directory.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre>os.chdir(<tt><i>newdir</i></tt>)</pre></td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Changes the current working directory.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre>os.rmdir(<tt><i>dir</i></tt>)</pre></td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Removes a directory, if allowed.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre>os.mkdir(<tt><i>newdir</i></tt>)</pre></td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Creates a directory, supplies either an absolute
  path or a subdirectory name to go under the current directory.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre>os.exists(<tt><i>name</i></tt>)</pre></td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Says if something exists, but doesn’t say
  if it’s a file or directory.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre>os.isdir(<tt><i>dirname</i></tt>)</pre></td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Says that a directory exists.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre>os.isfile(<tt><i>filename</i></tt>)</pre></td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Says that a file exists. </span><tt><i><span
  style='font-size:10.0pt'>filename</span></i></tt><span style='font-size:10.0pt'>
  may include a path; if not, it looks in the current directory.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre>os.listdir(<tt><i>dirname</i></tt>)</pre></td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Returns a list of the files and directories
  within the given directory.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre>glob.glob(<tt><i>pattern</i></tt>)</pre></td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Returns a list of files matching the given
  pattern (using expressions such as </span><tt><span style='font-size:10.0pt'>dir</span></tt><span
  style='font-size:10.0pt'> </span><tt><span style='font-size:10.0pt'>*.doc</span></tt><span
  style='font-size:10.0pt'> is known as <i>file</i> <i>globbing</i> on Unix,
  hence the name). Just like the command prompt and most other Windows tools,
  the pattern accepts the ? character to match a single character or the *
  character to match any number of characters. If you need to use true regular
  expressions</span><a name="_ftnref16"></a><a href="#_ftn16"><span
  class=atitlechar><sup><span style='font-size:9.0pt'>[1]</span></sup></span></a><span
  style='font-size:10.0pt'> to match filenames, use </span><tt><span
  style='font-size:10.0pt'>os.listdir()</span></tt><span style='font-size:10.0pt'>
  and the </span><tt><span style='font-size:10.0pt'>re</span></tt><span
  style='font-size:10.0pt'> module.</span></p>
  </td>
 </tr>
</table>

<p>Here are some quick examples:</p>

<pre>&gt;&gt;&gt; import os</pre><pre>&gt;&gt;&gt; os.getcwd()</pre><pre>'C:\\Program Files\\Python'</pre><pre>&gt;&gt;&gt; os.chdir('C:\\temp')</pre><pre>&gt;&gt;&gt; os.mkdir('subdirectory1')</pre><pre>&gt;&gt;&gt; os.rmdir('subdirectory1')</pre><pre>&gt;&gt;&gt;</pre>

<p>What’s with the <tt><span style='font-size:10.0pt'>\\</span></tt>? This is
Python’s literal string syntax. Python lets you directly enter special
characters at the interactive prompt or in strings embedded in your code. For
example, <tt><span style='font-size:10.0pt'>\n</span></tt> means a newline, <tt><span
style='font-size:10.0pt'>\t</span></tt> is a tab, and <tt><span
style='font-size:10.0pt'>\123</span></tt> is the octal number 123. If you just
want a plain old slash, you have to type <tt><span style='font-size:10.0pt'>\\</span></tt>.
The only place where this feels slightly weird is in manipulating filenames.
Remember to double all your slashes. An alternative is to use a forward slash
(like <i>c:/temp</i>); but Python always gives backslashes when you ask for
directory lists on Windows:</p>

<pre>&gt;&gt;&gt; mydir = 'c:\\data\\project\\oreilly\\text'</pre><pre>&gt;&gt;&gt; os.path.exists(mydir)</pre><pre>1</pre><pre>&gt;&gt;&gt; os.path.isdir(mydir)</pre><pre>1</pre><pre>&gt;&gt;&gt; os.path.isfile(mydir)&nbsp;&nbsp; #hope not</pre><pre>0</pre><pre>&gt;&gt;&gt; os.listdir(mydir)</pre><pre>['ChapterXX.doc', '00index.txt', ...]</pre><pre>&nbsp;</pre><pre>&gt;&gt;&gt; import glob</pre><pre>&gt;&gt;&gt; glob.glob(mydir + '\\' + '*files*.doc')</pre><pre>['c:\\data\\project\\oreilly\\text\\Chapter_-_Processes_and_Files1.doc', 'c:\\</pre><pre>data\\project\\oreilly\\text\\files.doc', 'c:\\data\\project\\oreilly\\text\\</pre><pre>Chapter_-_PythonFiles.doc']</pre><pre>&gt;&gt;&gt;</pre>

<p>Note that if you don’t want full paths from <tt><span style='font-size:10.0pt'>glob</span></tt>,
<tt><span style='font-size:10.0pt'>chdir</span></tt> into the directory first.</p>

<h5>17.1.1.1 Working with paths and filenames</h5>

<p>The <tt><span style='font-size:10.0pt'>os.path</span></tt> module provides
platform-independent routines for chopping up and putting together filenames. <tt><span
style='font-size:10.0pt'>os.path.split(path)</span></tt> separates a full path
into the directory and filename components; <tt><span style='font-size:10.0pt'>os.path.splitext(filename)</span></tt>
separates the filename (and path, if present) from the extension.</p>

<p>As discussed, DOS and Windows use a backslash to separate directories. We
shouldn’t have used the line <tt><span style='font-size:10.0pt'>glob.glob(mydir</span></tt>
<tt><span style='font-size:10.0pt'>+</span></tt> <tt><span style='font-size:
10.0pt'>'\\'</span></tt> <tt><span style='font-size:10.0pt'>+</span></tt> <tt><span
style='font-size:10.0pt'>'*files*.doc')</span></tt> in the previous example; use
the variable <tt><span style='font-size:10.0pt'>os.sep</span></tt> instead. On
a Unix platform, this is a forward slash:</p>

<pre>&gt;&gt;&gt; os.path.split('c:\\windows\\system\\gdi.exe')</pre><pre>('c:\\windows\\system', 'gdi.exe')</pre><pre>&gt;&gt;&gt; os.path.splitext('gdi.exe')</pre><pre>('gdi', '.exe')</pre><pre>&gt;&gt;&gt; os.path.splitext('c:\\windows\\system\\gdi.exe')</pre><pre>('c:\\windows\\system\\gdi', '.exe')</pre><pre>&gt;&gt;&gt; (root, ext) = os.path.splitext('c:\\mydata\\myfile.txt')</pre><pre>&gt;&gt;&gt; newname = root + '.out'</pre><pre>&gt;&gt;&gt; newname</pre><pre>'c:\\mydata\\myfile.out'</pre><pre>&gt;&gt;&gt;</pre>

<h5>17.1.1.2 Names for temporary files</h5>

<p>The function <tt><span style='font-size:10.0pt'>tempfile.mktemp()</span></tt>
returns a filename suitable for temporary use; this function is available on
every platform, but it’s smart enough to know where your <i>\temp</i> directory
is on Windows:</p>

<pre>&gt;&gt;&gt; import tempfile</pre><pre>&gt;&gt;&gt; tempfile.mktemp()</pre><pre>'C:\\WINDOWS\\TEMP\\~-304621-1'</pre><pre>&gt;&gt;&gt;</pre>

<p>When the file is closed, it’s automatically deleted, assisting in the
housekeeping that often goes with working with temporary files.</p>

<h5>17.1.1.3 Getting information about files</h5>

<p>The function <tt><span style='font-size:10.0pt'>os.stat(</span></tt> <tt><i><span
style='font-size:10.0pt'>filename</span></i></tt><tt><span style='font-size:
10.0pt'>)</span></tt> returns information about files or directories without
opening them. It returns a tuple of ten items. With a tuple of this size, it
can be hard to recall what each element is for, so the standard Python module <tt><span
style='font-size:10.0pt'>stat</span></tt> contains a number of constants and
functions to assist in working with these entries. <a
href="#_Table_17.2._os.stat()_Return_Values">Table 17.2</a> lists the entries
returned by <tt><span style='font-size:10.0pt'>os.stat()</span></tt>.</p>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 width="100%"
 style='width:100.0%'>
 <tr>
  <td colspan=3 style='border:none;padding:.75pt .75pt .75pt .75pt'>
  <h5 align=center style='text-align:center'><a
  name="_Table_17.2._os.stat()_Return_Values"></a>Table&nbsp;17.2. os.stat()
  Return Values</h5>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><b><span style='font-size:10.0pt'>Index</span></b></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><b><span style='font-size:10.0pt'>Constant</span></b></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><b><span style='font-size:10.0pt'>Description</span></b></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>0</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>stat.ST_MODE</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Bit mask for file-mode information. The </span><tt><span
  style='font-size:10.0pt'>stat.S_IFDIR</span></tt><span style='font-size:10.0pt'>
  bit is set if </span><tt><span style='font-size:10.0pt'>path</span></tt><span
  style='font-size:10.0pt'> specifies a directory; the </span><tt><span
  style='font-size:10.0pt'>stat.S_IFREG</span></tt><span style='font-size:10.0pt'>
  bit is set if </span><tt><span style='font-size:10.0pt'>path</span></tt><span
  style='font-size:10.0pt'> specifies an ordinary file or a device.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>1</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>stat.ST_INO</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Not used on Windows filesystems.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>2</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>stat.ST_DEV</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Drive number of the disk containing the
  file.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>3</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>stat.ST_NLINK</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>The Visual C++ documentation is not very
  helpful on this one. It simply states “Always 1 on non-NTFS filesystems.”</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>4</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>stat.ST_UID</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Not used on Windows.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>5</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>stat.ST_GID</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Not used on Windows.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>6</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>stat.ST_SIZE</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Size of the file in bytes. This is limited
  to 64 bits, so for large files you should use the </span><tt><span
  style='font-size:10.0pt'>win32file.GetFileSize()</span></tt><span
  style='font-size:10.0pt'> function, which returns large file sizes as a long
  integer.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>7</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>stat.ST_ATIME</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>The time the file was last accessed or zero
  if the filesystem doesn’t support this information.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>8</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>stat.ST_MTIME</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>The time the file was last modified or zero
  if the filesystem doesn’t support this information.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>9</span></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><tt><span style='font-size:10.0pt'>stat.ST_CTIME</span></tt></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>The time the file was created or zero if the
  filesystem doesn’t support this information.</span></p>
  </td>
 </tr>
</table>

<p>Some of these aren’t used on Windows, but contain useful information when
used on other operating systems. Also, note that all dates are returned as
integers compatible with the Python <tt><span style='font-size:10.0pt'>time</span></tt>
module. Depending on the format of the disk holding the file, some of these
time values may not be available.</p>

<p>Let’s see an example of using the <tt><span style='font-size:10.0pt'>stat()</span></tt>
function:</p>

<pre>&gt;&gt;&gt; os.stat('c:\\autoexec.bat')</pre><pre>(33279, 0, 2, 1, 0, 0, 640, 916444800, 915484932, 915484930)</pre><pre>&gt;&gt;&gt;</pre>

<p>Here’s a function to decode it:</p>

<pre>import os, stat, time</pre><pre>&nbsp;</pre><pre>def getfileinfo(filename):</pre><pre>&nbsp;&nbsp;&nbsp; stats = os.stat(filename)</pre><pre>&nbsp;&nbsp;&nbsp; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;size = stats[stat.ST_SIZE]</pre><pre>&nbsp;&nbsp;&nbsp; print 'File size is %d bytes' % size</pre><pre>&nbsp;&nbsp;&nbsp; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;accessed = stats[stat.ST_ATIME]</pre><pre>&nbsp;&nbsp;&nbsp; modified = stats[stat.ST_MTIME]</pre><pre>&nbsp;&nbsp;&nbsp; </pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;print 'Last accessed: ' + time.ctime(accessed)</pre><pre>&nbsp;&nbsp;&nbsp; print 'Last modified: ' + time.ctime(modified)</pre>

<p>And the output:</p>

<pre>&gt;&gt;&gt; decode_stat.getfileinfo('c:\\autoexec.bat')</pre><pre>File size is 640 bytes</pre><pre>Last accessed: Sat Jan 16 00:00:00 1999</pre><pre>Last modified: Mon Jan 04 21:22:12 1999</pre><pre>&gt;&gt;&gt;</pre>

<p>Unfortunately, there’s no portable Python module for working with file
permissions. Modules exist for working with permissions on various operating
systems, including Windows and Unix, but the differences between the various
schemes make a simple and unified model difficult. Windows NT permissions are
themselves complex and beyond the scope of this book; indeed, it would require
a book of this size to cover them in detail. There is a brief example of working
with permissions in <a href="20.htm#_Chapter_16._Windows_NT_Administrati">Chapter
16</a>.</p>

<h5 style='page-break-after:avoid'>17.1.1.4 Walking through a directory tree</h5>

<p>Often you need to move through a directory tree looking at all the
subdirectories or files in turn. The Python library provides a powerful generic
routine to do this: <tt><span style='font-size:10.0pt'>os.path.walk()</span></tt>
.</p>

<p>The general idea is that you specify a directory, and <tt><span
style='font-size:10.0pt'>os.path.walk()</span></tt> calls a function (that you
write) once for each subdirectory of the main directory. Each time your
function is called, it’s passed a list of all filenames in that directory.
Thus, your function can examine every file in every directory under the
starting point you specify.</p>

<p>The function you write to perform the desired operation on the file is of
the form <tt><span style='font-size:10.0pt'>myfunc(arg,</span></tt> <tt><span
style='font-size:10.0pt'>dirname,</span></tt> <tt><span style='font-size:10.0pt'>filenames)</span></tt>.
The first argument can be anything you want; we will see examples later. The
second argument contains the name of the current directory being examined,
starting with the directory you specify in the argument to <tt><span
style='font-size:10.0pt'>os.path.walk()</span></tt>; the third is the list of
filenames in the directory.</p>

<p>Once you have written the function, call <tt><span style='font-size:10.0pt'>os.path.walk()</span></tt>
with three parameters: the name of the directory in which to begin the walking,
your callback function, and any third parameter you choose. This third parameter
is passed unchanged in your callback function’s first parameter, as described
previously.</p>

<p>This first example lists the directories examined and how many files are
present in each. This makes the callback function simple: you print the <tt><span
style='font-size:10.0pt'>dirname</span></tt> parameter, and the length of the <tt><span
style='font-size:10.0pt'>filenames</span></tt> parameter. Then call <tt><span
style='font-size:10.0pt'>os.path.walk()</span></tt>, passing a directory from
the Python installation and the simple function as the callback:</p>

<pre>&gt;&gt;&gt; def walker1(arg, dirname, filenames):</pre><pre>...&nbsp;&nbsp;&nbsp;&nbsp; #List directories and numbers of files</pre><pre>...&nbsp;&nbsp;&nbsp;&nbsp; print dirname,' contains', len(filenames), 'files'</pre><pre>...&nbsp;&nbsp;&nbsp;&nbsp; </pre><pre>&gt;&gt;&gt; os.path.walk('c:\\program files\\python\\win32', walker1, None)</pre><pre>c:\program files\python\win32&nbsp; contains 24 files</pre><pre>c:\program files\python\win32\lib&nbsp; contains 39 files</pre><pre>c:\program files\python\win32\Help&nbsp; contains 3 files</pre><pre>c:\program files\python\win32\demos&nbsp; contains 19 files</pre><pre>c:\program files\python\win32\demos\service&nbsp; contains 8 files</pre><pre>c:\program files\python\win32\demos\service\install&nbsp; contains 3 files</pre><pre>&gt;&gt;&gt;</pre>

<p>That was easy! Note that you don’t need the extra argument and so use the
value <tt><span style='font-size:10.0pt'>None</span></tt>. Now let’s try
something a bit more practical and write a program to scan for recent changes.
This is useful for archiving or for trying to figure out which new application
just ate your registry. The callback function becomes slightly more complex as
you loop over the list of files. The example then checks the Windows system
directory for all files changed in the last 30 days:</p>

<pre>&gt;&gt;&gt; import time</pre><pre>&gt;&gt;&gt; def walker2(arg, dirname, filenames):</pre><pre>...&nbsp;&nbsp;&nbsp;&nbsp; &quot;Lists files modified in last ARG days&quot;</pre><pre>...&nbsp;&nbsp;&nbsp;&nbsp; cutoff = time.time() - (arg * 24 * 60 * 60)</pre><pre>...&nbsp;&nbsp;&nbsp;&nbsp; for filename in filenames:</pre><pre>...&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; stats = os.stat(dirname + os.sep + filename)&nbsp;&nbsp;&nbsp;&nbsp; </pre><pre>...&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; modified = stats[8]</pre><pre>...&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if modified &gt;= cutoff:</pre><pre>...&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print dirname + os.sep + filename</pre><pre>... </pre><pre>&gt;&gt;&gt; os.path.walk('c:\\windows\\system', walker2, 30)</pre><pre>c:\windows\system\FFASTLOG.TXT</pre><pre>c:\windows\system\MSISYS.VXD</pre><pre>c:\windows\system\HwInfoD.vxd</pre><pre>c:\windows\system\ws552689.ocx</pre><pre>&gt;&gt;&gt;</pre>

<p>So far you haven’t returned anything; indeed, if <tt><span style='font-size:
10.0pt'>walker2</span></tt><i> </i>returned a value, you’d have no easy way to
grab it. This is another common use for the “extra argument.” Let’s imagine you
want to total the size of all files in a directory. It’s tempting to try this:</p>

<pre>def walker3(arg, dirname, filenames):</pre><pre>&nbsp;&nbsp;&nbsp; &quot;Adds up total size of all files&quot;</pre><pre>&nbsp;&nbsp;&nbsp; for filename in filenames:</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; stats = os.stat(dirname + os.sep + filename)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; size = stats[6]</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; arg = arg + size</pre><pre>&nbsp;</pre><pre>def compute_size(rootdir):</pre><pre>&nbsp;&nbsp;&nbsp; &quot;uses walker3 to compute the size&quot;</pre><pre>&nbsp;&nbsp;&nbsp; total = 0</pre><pre>&nbsp;&nbsp;&nbsp; os.path.walk(rootdir, walker3, total)</pre><pre>&nbsp;&nbsp;&nbsp; return total</pre>

<p>Here, a <tt><span style='font-size:10.0pt'>walker</span></tt> function does
the work, and a controlling function sets up the arguments and returns the
results. This is a common pattern when dealing with recursive functions.</p>

<p>Unfortunately this returns zero. You can’t modify a simple numeric argument
in this way, since <tt><span style='font-size:10.0pt'>arg</span></tt><i> </i>within
the function <tt><span style='font-size:10.0pt'>walker3()</span></tt> is a
local variable. However, if <tt><span style='font-size:10.0pt'>arg</span></tt>
was an object, you could modify its properties. One of the simplest answers is
to use a list; it’s passed around, and the <tt><span style='font-size:10.0pt'>walker</span></tt>
function is free to modify its contents. Let’s rewrite the function to generate
a list of sizes:</p>

<pre># these two work...</pre><pre>def walker4(arg, dirname, filenames):</pre><pre>&nbsp;&nbsp;&nbsp; &quot;Adds up total size of all files&quot;</pre><pre>&nbsp;&nbsp;&nbsp; for filename in filenames:</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; stats = os.stat(dirname + os.sep + filename)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; size = stats[6]</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; arg.append(size)</pre><pre>&nbsp;</pre><pre>def compute_size(rootdir):</pre><pre>&nbsp;&nbsp;&nbsp; &quot;uses walker3 to compute the size&quot;</pre><pre>&nbsp;&nbsp;&nbsp; sizes = []</pre><pre>&nbsp;&nbsp;&nbsp; os.path.walk(rootdir, walker4, sizes)</pre><pre>&nbsp;</pre><pre>&nbsp;&nbsp;&nbsp; # now add them up</pre><pre>&nbsp;&nbsp;&nbsp; total = 0</pre><pre>&nbsp;&nbsp;&nbsp; for size in sizes:</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; total = total + size</pre><pre>&nbsp;&nbsp;&nbsp; return total</pre>

<p>When run, this code behaves as desired:</p>

<pre>&gt;&gt;&gt; compute_size('c:\\program files\\python')</pre><pre>26386305</pre><pre>&gt;&gt;&gt; # well, I do have a lot of extensions installed</pre>

<p>There are numerous uses for this function, and it can save a lot of lines of
code. Some possibilities include:</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Archiving all files older than a certain date</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Building a list of filenames meeting certain criteria for further
processing</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Synchronizing two file trees efficiently across a network, copying only
the changes</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Keeping an eye on users’ storage requirements</p>

<p>We’ve started to see what makes Python so powerful for manipulating
filesystems. It’s not just the <tt><span style='font-size:10.0pt'>walk</span></tt>
function: that could have been done in many languages. The key point is how <tt><span
style='font-size:10.0pt'>walk</span></tt> interacts with Python’s higher-level
data structures, such as lists, to make these examples simple and
straightforward.</p>

<h4>17.1.2 Working with Python File Objects</h4>

<p>Now we’ve had a good look at moving files around; it’s time to look inside
them.</p>

<p>Python has a built-in file object, which is available on all Python
platforms. Any Python program you hope to run on platforms other than Windows
should use the standard file objects. Once you have a Python file object, you
can use the methods to read data from the file, write data to the file, and
perform various other operations.</p>

<h5>17.1.2.1 Opening a file</h5>

<p>The function <tt><span style='font-size:10.0pt'>open(<i>filename</i>,</span></tt>
<tt><span style='font-size:10.0pt'>mode=&quot;r&quot;)</span></tt> returns a
file object. If <tt><span style='font-size:10.0pt'>mode</span></tt> is omitted,
the file is opened read-only. <tt><span style='font-size:10.0pt'>Mode</span></tt>
is a string, and can be <tt><span style='font-size:10.0pt'>r</span></tt> for
reading, <tt><span style='font-size:10.0pt'>w</span></tt> for writing, or <tt><span
style='font-size:10.0pt'>a</span></tt> for appending. Add the letter <tt><span
style='font-size:10.0pt'>b</span></tt> for binary (as discussed in <a
href="5.htm">Chapter 3</a>), and <tt><span style='font-size:10.0pt'>w+</span></tt>
opens it for updating. See the Python Library Reference (included in HTML
format in the standard Python distribution) for further details.</p>

<p><a href="21.htm#_Table_17.3._Methods_of_File_Objects">Table 17.3</a> shows
the most important methods for file objects. C programmers will note the
similarity to the STDIO routines; this should be no surprise, as they are
implemented using the C STDIO routines of the same names.</p>

<p>Every language has functions, such as <tt><span style='font-size:10.0pt'>read</span></tt>
and <tt><span style='font-size:10.0pt'>write</span></tt>, and many have <tt><span
style='font-size:10.0pt'>readline</span></tt>. Python’s ability to handle lists
and strings is what really makes file processing a joy. Let’s run through a few
common idioms.</p>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 width="100%"
 style='width:100.0%'>
 <tr>
  <td colspan=2 style='border:none;padding:.75pt .75pt .75pt .75pt'>
  <h5 align=center style='text-align:center'><a
  name="_Table_17.3._Methods_of_File_Objects"></a>Table&nbsp;17.3. Methods of
  File Objects</h5>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><b><span style='font-size:10.0pt'>Method</span></b></p>
  </td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><b><span style='font-size:10.0pt'>Description</span></b></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre>close()</pre></td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Closes the file.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre>flush()</pre></td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Flushes to disk. Windows caches disk
  activity; if you write a file, you can hear the lag between writing a file
  and the disk clicking. This ensures it’s written immediately.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre>isatty()</pre></td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Nonzero if the input is a terminal-type
  device (e.g., standard input when using Python from the console).</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre>read([<tt><i>size</i></tt>])</pre></td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Reads up to </span><tt><span
  style='font-size:10.0pt'>[<i>size</i>]</span></tt><span style='font-size:
  10.0pt'> bytes and returns a string. Omit </span><tt><span style='font-size:
  10.0pt'>[<i>size</i>]</span></tt><span style='font-size:10.0pt'>, and the
  whole file is read into memory. When end of file is reached, returns an empty
  string.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre>readline()</pre></td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Returns a string up to and including the
  next newline character.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre>readlines()</pre></td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Returns a list of strings containing all
  lines in the file. Each string includes the trailing newline character.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre>seek(<tt><i>offset</i></tt>, [whence])</pre></td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Jumps to the location </span><tt><i><span
  style='font-size:10.0pt'>offset</span></i></tt><span style='font-size:10.0pt'>
  in the file. </span><tt><span style='font-size:10.0pt'>whence</span></tt><span
  style='font-size:10.0pt'> is optional and specifies a mode: if zero, </span><tt><i><span
  style='font-size:10.0pt'>offset</span></i></tt><span style='font-size:10.0pt'>
  is an absolute position, if 1, relative to the current position, and if 2,
  relative to the end of the file.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre>tell()</pre></td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Returns the current location in the file.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre>truncate([<tt><i>size</i></tt>])</pre></td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Truncates the file at the current position
  or at </span><tt><i><span style='font-size:10.0pt'>size</span></i></tt><span
  style='font-size:10.0pt'> if it’s provided.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre>write(<tt><i>str</i></tt>)</pre></td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Writes the string to the file.</span></p>
  </td>
 </tr>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'><pre>writelines(<tt><i>list</i></tt>)</pre></td>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:10.0pt'>Writes a list of strings to the file. It
  doesn’t insert any newlines or other delimiters.</span></p>
  </td>
 </tr>
</table>

<h5>17.1.2.2 Reading a text file into a list</h5>

<p>Here <tt><span style='font-size:10.0pt'>readlines</span></tt> loads the
entire file into a list of strings in memory:</p>

<pre>&gt;&gt;&gt; f = open('c:\\config.sys','r')</pre><pre>&gt;&gt;&gt; lines = f.readlines()</pre><pre>&gt;&gt;&gt; f.close()</pre><pre>&gt;&gt;&gt; from pprint import pprint</pre><pre>&gt;&gt;&gt; pprint(lines[0:3])</pre><pre>['DEVICEHIGH = A:\\CDROM\\CDROM.SYS /D:CD001\012',</pre><pre> 'device=C:\\WINDOWS\\COMMAND\\display.sys con=(ega,,1)\012',</pre><pre> 'Country=044,850,C:\\WINDOWS\\COMMAND\\country.sys\012']</pre><pre>&gt;&gt;&gt;</pre>

<p>The <tt><span style='font-size:10.0pt'>pprint</span></tt> function (short
for pretty-print) lets you display large data structures on several lines. Note
also that each line still ends in a newline character (octal 012, decimal 10).
Because the file is opened in text mode (by omitting the binary specification),
you see a single newline character terminating each line, even if the actual
file is terminated with carriage-return/linefeed pairs.</p>

<p>You can follow this with a call to <tt><span style='font-size:10.0pt'>string.split()</span></tt>
to parse each line. Here’s a generic function to parse tab-delimited data:</p>

<pre>def read_tab_delimited_file(filename):</pre><pre>&nbsp;&nbsp;&nbsp; &quot;returns a list of tuples&quot;</pre><pre>&nbsp;&nbsp;&nbsp; # we can compress the file opening down to a one-liner -</pre><pre>&nbsp;&nbsp;&nbsp; # the file will be closed automatically</pre><pre>&nbsp;&nbsp;&nbsp; lines = open(filename).readlines()</pre><pre>&nbsp;&nbsp;&nbsp; table = []</pre><pre>&nbsp;&nbsp;&nbsp; for line in lines:</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #chop off the final newline</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; line = line[:-1]</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # split up the row on tab characters</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; row = string.split(line, '\t')</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; table.append(row)</pre><pre>&nbsp;&nbsp;&nbsp; return table</pre>

<p>And here’s what it can do:</p>

<pre>&gt;&gt;&gt; data = read_tab_delimited_file('c:\\temp\\sales.txt')</pre><pre>&gt;&gt;&gt; pprint(data)</pre><pre>[['Sales', '1996', '1997', '1998'],</pre><pre> ['North', '100', '115', '122'],</pre><pre> ['South', '176', '154', '180'],</pre><pre> ['East', '130', '150', '190']]</pre><pre>&gt;&gt;&gt;</pre>

<p>Note once again how useful <tt><span style='font-size:10.0pt'>pprint</span></tt>
is! This is another of Python’s key strengths: you can work at the interactive
prompt, looking at your raw data, which helps you to get your code right early
in the development process.</p>

<h5>17.1.2.3 Reading a line at a time</h5>

<p>The previous example is suitable only for files that definitely fit into
memory. If they might get bigger, you should loop a line at a time. Here is the
common idiom for doing this:</p>

<pre>f = open(filename,'r')</pre><pre>&nbsp;&nbsp;&nbsp; s = f.readline()</pre><pre>&nbsp;&nbsp;&nbsp; while s &lt;&gt; '':</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # do something with string 's'</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; s = f.readline()</pre><pre>&nbsp;&nbsp;&nbsp; f.close()</pre>

<h5>17.1.2.4 The fileinput module</h5>

<p>A number of people have complained about having to type <tt><span
style='font-size:10.0pt'>readline()</span></tt> twice, while Perl has a
one-line construction to loop over files. The standard library now includes a
module called <tt><span style='font-size:10.0pt'>fileinput</span></tt> to save
you this minimal amount of extra typing. The module lets you do the following:</p>

<pre>import fileinput</pre><pre>for line in fileinput.input([filename]):</pre><pre>&nbsp;&nbsp;&nbsp; process(line)</pre>

<p>If no filename is provided, the module loops over standard input, useful in
script processing. Pass the <tt><span style='font-size:10.0pt'>filename</span></tt>
parameter in single item list; <tt><span style='font-size:10.0pt'>fileinput</span></tt>
iterates automatically over any number of files simply by including more items
in this parameter. <tt><span style='font-size:10.0pt'>fileinput</span></tt>
also lets you access the name of the file and the current line number and
provides a mechanism to modify files in place (with a backup) in case something
goes wrong.</p>

<h5>17.1.2.5 Reading binary data</h5>

<p>The <tt><span style='font-size:10.0pt'>read()</span></tt> command loads an
entire file into memory if you don’t specify a size. You often see the one
liner:</p>

<pre>&gt;&gt;&gt; mystring = open('c:\\temp\\sales.txt').read()</pre><pre>&gt;&gt;&gt;</pre>

<p>This code uses the fact that file objects are closed just before they get
garbage-collected. You didn’t assign the file object to a variable, so Python
closes it and deletes the object (but not the file!) after the line executes.
You can slurp an entire file into a string in one line.</p>

<p>Python strings are eight-bit safe and are the easiest means to manipulate
binary data. In addition to this, the <tt><span style='font-size:10.0pt'>struct</span></tt>
module lets you create C-compatible structures and convert them to and from
strings; and the <tt><span style='font-size:10.0pt'>array</span></tt> module
efficiently handles arrays of data, which it can convert to and from strings
and files.</p>

<p>More information on working with files and the other various Python modules
we discussed here can be found in either of these fine O’Reilly Python books
we’ve mentioned before: <i>Programming Python</i> and <i>Learning Python</i> .</p>

<h3><a name="_17.2_Native_File_Manipulation:_The_"></a>17.2 Native File
Manipulation: The win32file Module</h3>

<p>There are times when the standard Python file objects can’t meet your
requirements, and you need to use the Windows API to manipulate files. This can
happen in a number of situations, such as:</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>You need to read or write data to or from a Windows pipe.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>You need to set custom Windows security on a file you are creating.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>You need to perform advanced techniques for performance reasons, such as
“Overlapped” operations or using completion ports.</p>

<div align=center>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 width="90%"
 style='width:90.0%;background:black'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 width="100%"
   style='width:100.0%;background:white'>
   <tr>
    <td width=60 valign=top style='width:45.0pt;padding:4.5pt 4.5pt 4.5pt 4.5pt'>
    <p class=MsoNormal><span style='font-family:Arial'><img border=0 width=50
    height=54 src="images\image002.gif"></span></p>
    </td>
    <td valign=top style='padding:4.5pt 4.5pt 4.5pt 4.5pt'>
    <p>Python file objects are integrated closely with Python. You should use
    the <tt><span style='font-size:10.0pt'>win32file</span></tt> module only
    when standard Python file objects can’t meet your requirements. Using the <tt><span
    style='font-size:10.0pt'>win32file</span></tt> module is a good deal more
    complex than using native Python files.</p>
    </td>
   </tr>
  </table>
  <p class=MsoNormal></p>
  </td>
 </tr>
</table>

</div>

<h4>17.2.1 Opening and Creating Files</h4>

<p>The <tt><span style='font-size:10.0pt'>win32file.CreateFile()</span></tt>
function opens or creates standard files, returning a handle to the file.
Standard files come in many flavors, including synchronous files (where read or
write operations don’t return until the operation has completed); asynchronous
(or overlapped I/O) files, where read and write operations return immediately;
and temporary files that are automatically deleted when the handle is closed.
Files may also be opened requesting that Windows not cache any file operations,
that no buffering is performed, etc. All the variations that <tt><span
style='font-size:10.0pt'>CreateFile()</span></tt> can use are too numerous to
list here. For full details, please see the Windows API documentation for <tt><span
style='font-size:10.0pt'>CreateFile()</span></tt>.</p>

<p>The <tt><span style='font-size:10.0pt'>CreateFile()</span></tt> function
takes the following parameters:</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Name of the file</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Integer indicating the type of access requested on the file</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Integer-sharing options for the file</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Security attributes for the new file or <tt><span style='font-size:10.0pt'>None</span></tt></p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>A flag, indicating what action to take depending on if the file exists</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>A set of flags and attributes for the file itself</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Another file to act as a template or <tt><span style='font-size:10.0pt'>None</span></tt></p>

<p>This function returns a <tt><span style='font-size:10.0pt'>PyHANDLE</span></tt>
object. <tt><span style='font-size:10.0pt'>PyHANDLE</span></tt>s are simply
objects that wrap standard Win32 <tt><span style='font-size:10.0pt'>HANDLE</span></tt>s.
When a <tt><span style='font-size:10.0pt'>PyHANDLE</span></tt> object goes out
of scope, it’s automatically closed; thus, it’s generally not necessary to
close these <tt><span style='font-size:10.0pt'>HANDLE</span></tt>s as it is
necessary when using these from C or C++.</p>

<p>Let’s see how these parameters interact and test out some of the documented
semantics. Here’s a small script that uses the <tt><span style='font-size:10.0pt'>win32file</span></tt>
module to work with Win32 file handles. The code creates a file, then checks that
other attempts to open the file either succeed or fail, based on the flags
passed to <tt><span style='font-size:10.0pt'>CreateFile()</span></tt>. You will
also find that auto-delete files behave as expected; i.e., after the last
handle is closed, the file no longer exists on disk:</p>

<pre># CheckFileSemantics.py</pre><pre>#&nbsp;&nbsp;&nbsp; Demonstrate the semantics of CreateFile.</pre><pre>&nbsp;</pre><pre># To keep the source code small, </pre><pre># we import all win32file objects.</pre><pre>from win32file import *</pre><pre>&nbsp;</pre><pre>import win32api</pre><pre>import os</pre><pre>&nbsp;</pre><pre># First, lets create a normal file</pre><pre>h1 = CreateFile( \</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;\\file1.tst&quot;, # The file name \</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GENERIC_WRITE, # we want write access. \</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FILE_SHARE_READ, # others can open for read \</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; None, # No special security requirements \</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CREATE_ALWAYS, # File to be created. \</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FILE_ATTRIBUTE_NORMAL, # Normal attributes \</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; None ) # No template file.</pre><pre>&nbsp;</pre><pre># now we will print the handle, </pre><pre># just to prove we have one!</pre><pre>print &quot;The first handle is&quot;, h1</pre><pre>&nbsp;</pre><pre># Now attempt to open the file again, </pre><pre># this time for read access</pre><pre>h2 = CreateFile( \</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;\\file1.tst&quot;, # The same file name. \</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GENERIC_READ, # read access \</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FILE_SHARE_WRITE | FILE_SHARE_READ, \</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; None, # No special security requirements \</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OPEN_EXISTING, # expect the file to exist. \</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0, # Not creating, so attributes dont matter. \</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; None ) # No template file</pre><pre>&nbsp;</pre><pre># Prove we have another handle</pre><pre>print &quot;The second handle is&quot;, h2</pre><pre>&nbsp;</pre><pre># Now attempt yet again, but for write access.</pre><pre># We expect this to fail.</pre><pre>try:</pre><pre>&nbsp; h3 = CreateFile( \</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;\\file1.tst&quot;, # The same file name. \</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GENERIC_WRITE, # write access \</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0, # No special sharing \</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; None, # No special security requirements \</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CREATE_ALWAYS, # attempting to recreate it! \</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0, # Not creating file, so no attributes&nbsp; \</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; None ) # No template file</pre><pre>&nbsp;</pre><pre>except win32api.error, (code, function, message):</pre><pre>&nbsp; print &quot;The file could not be opened for write mode.&quot;</pre><pre>&nbsp; print &quot;Error&quot;, code, &quot;with message&quot;, message</pre><pre>&nbsp;</pre><pre># Close the handles.</pre><pre>h1.Close()</pre><pre>h2.Close()</pre><pre>&nbsp;</pre><pre># Now lets check out the FILE_FLAG_DELETE_ON_CLOSE</pre><pre>fileAttributes = FILE_ATTRIBUTE_NORMAL | \</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FILE_FLAG_DELETE_ON_CLOSE</pre><pre>&nbsp;</pre><pre>h1 = CreateFile( \</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;\\file1.tst&quot;, # The file name \</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GENERIC_WRITE, # we want write access. \</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FILE_SHARE_READ, # others can open for read \</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; None, # no special security requirements \</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CREATE_ALWAYS, # file to be created. \</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fileAttributes, \</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; None ) # No template file.</pre><pre>&nbsp;</pre><pre># Do a stat of the file to ensure it exists.</pre><pre>print &quot;File stats are&quot;, os.stat(&quot;\\file1.tst&quot;)</pre><pre>&nbsp;</pre><pre># Close the handle</pre><pre>h1.Close()</pre><pre>&nbsp;</pre><pre>try:</pre><pre> &nbsp;&nbsp;&nbsp;os.stat(&quot;\\file1.tst&quot;)</pre><pre>except os.error:</pre><pre>&nbsp;&nbsp;&nbsp; print &quot;Could not stat the file - file does not exist&quot;</pre>

<p>When you run this script, you see the following output:</p>

<pre>The first handle is &lt;PyHANDLE at 8344464 (80)&gt;</pre><pre>The second handle is &lt;PyHANDLE at 8344400 (112)&gt;</pre><pre>The file could not be opened for write mode.</pre><pre>Error 32 with message The process cannot access the file because</pre><pre>it is being used by another process.</pre><pre>File stats are (33206, 0, 11, 1, 0, 0, 0, 916111892, 916111892, 916111892)</pre><pre>Could not stat the file - file does not exist</pre>

<p>Thus, the semantics are what you’d expect:</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>A file opened to allow reading can be opened this way.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>A file opened to disallow writing can’t be opened this way.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>A file opened for automatic delete is indeed deleted when the handle is
closed. </p>

<h4>17.2.2 Reading and Writing Files</h4>

<p>The <tt><span style='font-size:10.0pt'>win32file</span></tt> module has
functions for reading and writing files. Not surprisingly, <tt><span
style='font-size:10.0pt'>win32file.ReadFile()</span></tt> reads files, and <tt><span
style='font-size:10.0pt'>win32file.WriteFile()</span></tt> writes files.</p>

<p><tt><span style='font-size:10.0pt'>win32file.ReadFile()</span></tt> takes
the following parameters:</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>The file handle to read from</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>The size of the data to read (see the reference for further details)</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Optionally, an <tt><span style='font-size:10.0pt'>OVERLAPPED</span></tt>
or <tt><span style='font-size:10.0pt'>None</span></tt></p>

<p><tt><span style='font-size:10.0pt'>win32file.ReadFile()</span></tt> returns
two pieces of information in a Python tuple: the error code for <tt><span
style='font-size:10.0pt'>ReadFile</span></tt> and the data itself. The error
code is either zero or the value <tt><span style='font-size:10.0pt'>winerror.ERROR_IO_PENDING</span></tt>
if overlapped I/O is being performed. All other error codes are trapped and
raises a Python exception.</p>

<p><tt><span style='font-size:10.0pt'>win32file.WriteFile()</span></tt> takes
the following parameters:</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>A file handle opened to allow reading</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>The data to write</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Optionally, an <tt><span style='font-size:10.0pt'>OVERLAPPED</span></tt>
or <tt><span style='font-size:10.0pt'>None</span></tt></p>

<p><tt><span style='font-size:10.0pt'>win32file.WriteFile()</span></tt> returns
the error code from the operation. This is either zero or <tt><span
style='font-size:10.0pt'>win32error.ERROR_IO_PENDING</span></tt> if overlapped
I/O is used. All other error codes are converted to a Python exception.</p>

<h4>17.2.3 Overlapped I/O</h4>

<p>Windows provides a number of techniques for high-performance file I/O. The
most common is overlapped I/O. Using overlapped I/O, the <tt><span
style='font-size:10.0pt'>win32file.ReadFile()</span></tt> and <tt><span
style='font-size:10.0pt'>win32file.WriteFile()</span></tt> operations are
asynchronous and return before the actual I/O operation has completed. When the
I/O operation finally completes, a Windows event is signaled.</p>

<p>Overlapped I/O does have some requirements normal I/O operations don’t:</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>The operating system doesn’t automatically advance the file pointer.
When not using overlapped I/O, a <tt><span style='font-size:10.0pt'>ReadFile</span></tt>
or <tt><span style='font-size:10.0pt'>WriteFile</span></tt> operation
automatically advances the file pointer, so the next operation automatically
reads the subsequent data in the file. When using overlapped I/O, you must
manage the location in the file manually.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>The standard technique of returning a Python string object from <tt><span
style='font-size:10.0pt'>win32file.ReadFile()</span></tt> doesn’t work. Because
the I/O operation has not completed when the call returns, a Python string
can’t be used.</p>

<p>As you can imagine, the code for performing overlapped I/O is more complex
than when performing synchronous I/O. <a href="22.htm">Chapter 18</a>, contains
some sample code that uses basic overlapped I/O on a Windows-named pipe.</p>

<h3><a name="_17.3_Pipes"></a>17.3 Pipes</h3>

<p>Pipes are a concept available in most modern operating systems. Typically,
these are a block of shared memory set up much like a file. Typically, one
process writes information to a pipe, and another process reads it. They are
often used as a form of interprocess communication or as a simple queue
implementation. Windows has two flavors of pipes: anonymous pipes and named
pipes. Python supports both via the <tt><span style='font-size:10.0pt'>win32pipe</span></tt>
module.</p>

<h4>17.3.1 Anonymous Pipes</h4>

<p>Anonymous pipes are simple and lightweight pipes, designed to use between
the process that creates it and its child processes. Since they are unnamed,
the only way to use anonymous pipes is to communicate its handle; there’s no
name for the pipe that processes use to obtain access to the pipe. This
typically makes anonymous pipes unsuitable for interprocess communication
between unrelated processes (for example, between a client and a server
process).</p>

<p>Anonymous pipes are simple to create and use. The function <tt><span
style='font-size:10.0pt'>win32pipe.CreatePipe()</span></tt> creates an
anonymous pipe and returns two handles: one for reading from the pipe, and one
for writing to the pipe. The <tt><span style='font-size:10.0pt'>win32pipe.Create-Pipe()</span></tt>
function takes the following parameters:</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>The security attributes for the pipe or <tt><span style='font-size:10.0pt'>None</span></tt>
for the default.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>The buffer size or zero for the default.</p>

<p>It then returns a tuple of (<tt><span style='font-size:10.0pt'>readHandle</span></tt>,
<tt><span style='font-size:10.0pt'>writeHandle</span></tt>).</p>

<p>A demonstration of anonymous pipes is quite simple. Let’s create an
anonymous pipe (obtaining the two handles), then write some data to the pipe,
and read the same data back:</p>

<pre>&gt;&gt;&gt; import win32pipe</pre><pre>&gt;&gt;&gt; # Create the pipe</pre><pre>&gt;&gt;&gt; readHandle, writeHandle = win32pipe.CreatePipe(None, 0)</pre><pre>&gt;&gt;&gt; import win32file # This module contains the ReadFile/WriteFile functions.</pre><pre>&gt;&gt;&gt; # Write a string to the pipe</pre><pre>&gt;&gt;&gt; win32file.WriteFile(writeHandle, &quot;Hi from the pipe&quot;)</pre><pre>(0, 16)</pre><pre>&gt;&gt;&gt; # Now read data from it</pre><pre>&gt;&gt;&gt; win32file.ReadFile(readHandle, 16)</pre><pre>(0, 'Hi from the pipe')</pre><pre>&gt;&gt;&gt;</pre>

<h4>17.3.2 Named Pipes</h4>

<p>Named pipes are similar to anonymous pipes, except they have a unique name.
Typically, a server process creates a named pipe with a known name, and other
client processes connect to this pipe simply by specifying the name. The key
benefit of named pipes is that unrelated processes can use them, even from over
the network. All a process needs is the name of the pipe, possibly the name of
the host server, and sufficient security to open it. This makes named pipes
suitable for simple communication between a server and many clients.</p>

<p>Named pipes can be created only by Windows NT. Windows 95/98 can create a
client connection to an existing named pipe, but can’t create a new named pipe.</p>

<p>Creating and using named pipes is a complex subject and beyond the scope of
this book. However, an example using named pipes can be found in <a
href="22.htm">Chapter 18</a>. The <tt><span style='font-size:10.0pt'>win32pipe</span></tt>
module supports all pipe operations supported by Windows. For further
information on named pipes, please see the Windows SDK documentation or one of
the pipe samples that comes with the Python for Windows Extensions.</p>

<h3><a name="_17.4_Processes"></a>17.4 Processes</h3>

<p>Every program running under Windows runs in the context of a process. A
process is an executing application and has a single virtual address space, a
list of valid handles, and other Windows resources. A process consists of at
least one thread, but may contain a large number of threads.</p>

<p>Python has the ability to manage processes from a fairly high level, right
down to the low level defined by the Win32 API. This section discusses some of
these capabilities.</p>

<h4>17.4.1 Portable Process Control: The os Module</h4>

<p>Python itself defines a few process-manipulation functions that are portable
across all platforms, including Windows. As they are portable to Unix and other
operating systems, they operate at a high level and don’t cover the range of
functionality provided natively. The Python <tt><span style='font-size:10.0pt'>os</span></tt>
module provides a number of techniques for starting new processes.</p>

<h5>17.4.1.1 os.system</h5>

<p><tt><span style='font-size:10.0pt'>os.system</span></tt> provides the most
rudimentary support for new processes. It takes a single argument (the command
line of the process to execute) and returns an integer “error code.” For
example:</p>

<pre>&gt;&gt;&gt; import os</pre><pre>&gt;&gt;&gt; os.system(&quot;notepad.exe C:\\autoexec.bat&quot;)</pre><pre>0</pre><pre>&gt;&gt;&gt;</pre>

<p>starts an instance of <i>notepad</i>, editing your <i>autoexec.bat</i> file.
The exit code from the program is zero. Unfortunately, the result of zero is
often misleading; the Windows command processor responsible for executing these
commands usually refuses to pass the actual error code on, always reporting a
success code of zero.</p>

<p>The single parameter can be anything that typically works from a Windows
command prompt. Thus, the system <tt><span style='font-size:10.0pt'>path</span></tt>
is searched for the program.</p>

<p>There are, however, a number of other limitations to this approach. First,
if you execute this code from PythonWin (or any other GUI Python environment)
you will notice that an empty command prompt opens. Windows knows you are
running from a GUI, but isn’t smart enough to look at the program to execute to
determine if it too is a GUI program; so it creates a new console for the
program. This works well when executing command-line tools, but not so well for
GUI programs such as <i>notepad</i>.</p>

<p>Second, notice that Python waits until the new process has terminated before
returning. Depending on your requirements, this may or may not be appropriate.</p>

<h5>17.4.1.2 os.execv</h5>

<p><tt><span style='font-size:10.0pt'>os.execv</span></tt> provides an
interesting (although often useless) way to create new processes. The program
you specify effectively replaces the calling process. Technically, the process
to be created is a new process (i.e., it has a different process ID), so the
new process doesn’t replace the old process; the old process simply terminates
immediately after the call to <tt><span style='font-size:10.0pt'>os.execv</span></tt>.
In effect, the new process executed appears to overwrite the current process,
almost as if the old process becomes the new process; therefore, it’s rarely
used.</p>

<p><tt><span style='font-size:10.0pt'>os.execv</span></tt> takes two arguments:
a string containing the program to execute, and a tuple containing the program
arguments. For example, if you execute the following code:</p>

<pre>&gt;&gt;&gt; import os</pre><pre>&gt;&gt;&gt; os.execv(&quot;c:\\Winnt\\notepad.exe&quot;, (&quot;c:\\autoexec.bat&quot;,) )</pre>

<p>Notice that your existing Python or PythonWin implementation immediately
terminates (no chance to save anything!) and is replaced by an instance of <i>notepad</i>.</p>

<p>Also notice that <tt><span style='font-size:10.0pt'>os.execv</span></tt>
doesn’t search your system path. Therefore, you need to specify the full path
to <i>notepad</i>. You will probably need to change the example to reflect your
Windows installation.</p>

<p>Another function, <tt><span style='font-size:10.0pt'>os.execve</span></tt>,
is similar but allows a custom environment for the new process to be defined.</p>

<h5>17.4.1.3 os.popen</h5>

<p><tt><span style='font-size:10.0pt'>os.popen</span></tt> is also supposed to
be a portable technique for creating new processes and capturing their output. <tt><span
style='font-size:10.0pt'>os.popen</span></tt> takes three parameters: the
command to execute, the default mode for the pipe, and the buffer size. Only
the first parameter is required; the others have reasonable defaults (see the
Python Library Reference for details). The following code shows that the
function returns a Python file object, which can be read to receive the data:</p>

<pre>&gt;&gt;&gt; import os</pre><pre>&gt;&gt;&gt; file = os.popen(&quot;echo Hello from Python&quot;)</pre><pre>&gt;&gt;&gt; file.read()</pre><pre>'Hello from Python\012'</pre><pre>&gt;&gt;&gt;</pre>

<p>If you try this code from <i>Python.exe</i>, you will notice it works as
expected. However, if you attempt to execute this code from a GUI environment,
such as PythonWin, you receive this error:</p>

<pre>&gt;&gt;&gt; os.popen(&quot;echo Hello from Python&quot;)</pre><pre>Traceback (innermost last):</pre><pre>&nbsp; File &quot;&lt;interactive input&gt;&quot;, line 0, in ?</pre><pre>error: (0, 'No error')</pre><pre>&gt;&gt;&gt;</pre>

<p>Unfortunately, a bug in the Windows <tt><span style='font-size:10.0pt'>popen</span></tt>
function prevents this working from a GUI environment.</p>

<p>Attempting to come to the rescue is the <tt><span style='font-size:10.0pt'>win32pipe</span></tt>
module, which provides a replacement <tt><span style='font-size:10.0pt'>popen</span></tt>
that works in a GUI environment under Windows NT; see the following code:</p>

<pre>&gt;&gt;&gt; import win32pipe</pre><pre>&gt;&gt;&gt; file=win32pipe.popen(&quot;echo Hello from Python&quot;)</pre><pre>&gt;&gt;&gt; file.read()</pre><pre>'Hello from Python\012'</pre><pre>&gt;&gt;&gt;</pre>

<h4>17.4.2 Better Process Control: The win32api Module</h4>

<p>The module <tt><span style='font-size:10.0pt'>win32api</span></tt> provides
some additional techniques for manipulating processes. These allow you to
perform many of the common requirements for starting new processes, but still
don’t provide the ultimate in low-level control.</p>

<h5>17.4.2.1 win32api.WinExec</h5>

<p>The <tt><span style='font-size:10.0pt'>WinExec</span></tt> function behaves
similarly to the <tt><span style='font-size:10.0pt'>os.system</span></tt>
function, as described previously, but it provides some concessions for GUI
programs; namely, no console is created, and the function doesn’t wait until
the new process has completed. The function takes two parameters:</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>The command to execute</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Optionally, the initial state for the application’s window</p>

<p>For example, to execute <i>notepad</i>, using the default window state, you
can execute the following code:</p>

<pre>&gt;&gt;&gt; import win32api</pre><pre>&gt;&gt;&gt; win32api.WinExec(&quot;notepad&quot;)</pre><pre>&gt;&gt;&gt;</pre>

<p><i>notepad</i> should appear in a normal window, and Python continues
executing commands before you close <i>notepad</i>.</p>

<p>To show <i>notepad</i> maximized:</p>

<pre>&gt;&gt;&gt; import win32api, win32con</pre><pre>&gt;&gt;&gt; win32api.WinExec(&quot;notepad&quot;, win32con.SW_SHOWMAXIMIZED)</pre><pre>&gt;&gt;&gt;</pre>

<h5>17.4.2.2 win32api.ShellExecute</h5>

<p>The <tt><span style='font-size:10.0pt'>win32api</span></tt> module also
provides another useful function for creating new processes. The <tt><span
style='font-size:10.0pt'>ShellExecute</span></tt> function is primarily used to
open documents, rather than start arbitrary processes. For example, you can
tell <tt><span style='font-size:10.0pt'>ShellExecute</span></tt> to “open <i>MyDocument.doc</i>.”
Windows itself determines which process to use to open <i>.doc</i> files and
start it on your behalf. This is the same function Windows Explorer uses when
you click (or double-click) on a <i>.doc</i> file: it calls <tt><span
style='font-size:10.0pt'>ShellExecute</span></tt>, and the correct program is
started. The <tt><span style='font-size:10.0pt'>ShellExecute</span></tt>
function takes these parameters:</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>The handle to the parent window or zero for no parent.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>The operation to perform on the file.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>The name of the file or program to execute.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Optional parameters for the new process.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>The initial directory for the application.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>A flag indicating if the application should be shown.</p>

<p>Let’s try this function. Start Python or PythonWin from a directory with a <i>.doc</i>
file in it, then execute the following commands:</p>

<pre>&gt;&gt;&gt; import win32api</pre><pre>&gt;&gt;&gt; win32api.ShellExecute(0, &quot;open&quot;, \</pre><pre>...&nbsp;&nbsp;&nbsp; &quot;MyDocument.doc&quot;, None, &quot;&quot;, 1)</pre><pre>33</pre><pre>&gt;&gt;&gt;</pre>

<p>Assuming Microsoft Word is installed, this code opens the document <i>MyDocument.doc</i>.
If you instead wish to print this document, execute this:</p>

<pre>&gt;&gt;&gt; import win32api</pre><pre>&gt;&gt;&gt; win32api.ShellExecute(0, &quot;print&quot;, \</pre><pre>...&nbsp;&nbsp;&nbsp; &quot;MyDocument.doc&quot;, None, &quot;&quot;, 1)</pre><pre>33</pre><pre>&gt;&gt;&gt;</pre>

<p>Microsoft Word then opens and prints the document. </p>

<h4>17.4.3 Ultimate Process Control: The win32process Module</h4>

<p>The <tt><span style='font-size:10.0pt'>win32process</span></tt> module
provides the ultimate in process level control; it exposes most of the native
Windows API for starting, stopping, controlling, and waiting for processes. But
before we delve into the <tt><span style='font-size:10.0pt'>win32process</span></tt>
module, some definitions are in order.</p>

<h5>17.4.3.1 Handles and IDs</h5>

<p>Every thread and process in the system can be identified by a Windows
handle, and by an integer ID. A process or thread ID is a unique number
allocated for the process or thread and is valid across the entire system. An
ID is invariant while the thread or process is running and serves no purpose
other than to uniquely identify the thread or process. IDs are reused, so while
two threads or processes will never share the same ID while running, the same
ID may be reused by the system once it has terminated. Further, IDs are not
secure. Any user can obtain the ID for a thread or process. This is not a security
problem, as the ID is not sufficient to control the thread or process.</p>

<p>A handle provides additional control capabilities for the thread or handle.
Using a handle, you can wait for a process to terminate, force the termination
of a process, or change the characteristics of a running process.</p>

<p>While a process can have only a single ID, there may be many handles to it.
The handle to a process determines the rights a user has to perform operations
on the process or thread.</p>

<p>Given a process ID, the function <tt><span style='font-size:10.0pt'>win32api.OpenProcess()</span></tt>
can obtain a handle. The ability to use this handle is determined by the
security settings for both the current user and the process itself.</p>

<h5>17.4.3.2 Creating processes</h5>

<p>The <tt><span style='font-size:10.0pt'>win32process</span></tt> module
contains two functions for creating new processes: <tt><span style='font-size:
10.0pt'>CreateProcess()</span></tt> and <tt><span style='font-size:10.0pt'>CreateProcessAsUser()</span></tt>
. These functions are identical, except <tt><span style='font-size:10.0pt'>CreateProcessAsUser()</span></tt>
accepts an additional parameter indicating the user under which the process
should be created.</p>

<p><tt><span style='font-size:10.0pt'>CreateProcess()</span></tt> accepts a large
number of arguments that allow very fine control over the new process:</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>The program to execute</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Optional command-line parameters</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Security attributes for the new process or <tt><span style='font-size:
10.0pt'>None</span></tt></p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Security attributes for the main thread of the new process or <tt><span
style='font-size:10.0pt'>None</span></tt></p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>A flag indicating if handles are inherited by the new process</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Flags indicating how the new process is to be created</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>A new environment for the new process or <tt><span style='font-size:
10.0pt'>None</span></tt> for the current environment</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>The current directory for the new process</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Information indicating how the new window is to be positioned and shown</p>

<p>And returns a tuple with four elements:</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>A handle to the new process</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>A handle to the main thread of the new process</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>An integer identifying the new process</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>An integer identifying the main thread of the new process</p>

<h5>17.4.3.3 Terminating processes</h5>

<p>To terminate a process, the <tt><span style='font-size:10.0pt'>win32process.TerminateProcess()</span></tt>
function is used. This function takes two parameters:</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>A handle to the process to be terminated</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>The exit code to associate with the process</p>

<p>If you initially created the new process, it’s quite easy to get the handle
to the process; you simply remember the result of the <tt><span
style='font-size:10.0pt'>win32process.CreateProcess()</span></tt> call.</p>

<p>But what happens if you didn’t create the process? If you know the process
ID, you can use the function <tt><span style='font-size:10.0pt'>win32api.OpenProcess()</span></tt>
to obtain a handle. But how do you find the process ID? There’s no easy answer
to that question. The file <tt><span style='font-size:10.0pt'>killProcName.py</span></tt>
that comes with the Python for Windows Extensions shows one method of obtaining
the process ID given the process name. It also shows how to use the <tt><span
style='font-size:10.0pt'>win32api.OpenProcess()</span></tt> function to obtain
a process handle suitable to terminate.</p>

<h5>17.4.3.4 Controlling processes</h5>

<p>Once a process is running, there are two process properties that can be set:
the <i>priority</i> and the <i>affinity mask</i> . The priority of the process
determines how the operating system schedules the threads in the process. The <tt><span
style='font-size:10.0pt'>win32process.SetPriorityClass()</span></tt> function
can set the priority.</p>

<p>A process’s affinity mask defines which processor the process runs on, which
obviously makes this useful only in a multiprocessor system. The <tt><span
style='font-size:10.0pt'>win32process.SetProcessAffinityMask()</span></tt>
function allows you to define this behavior.</p>

<h5>17.4.3.5 Putting it all together</h5>

<p>This section presents a simple example that demonstrates how to use the <tt><span
style='font-size:10.0pt'>CreateProcess</span></tt> API and process handles. In
the interests of allowing the salient points to come through, this example
won’t really do anything too useful; instead, it’s restricted to the following
functionality:</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Creates two instances of <i>notepad</i> with its window position
carefully laid out.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Waits 10 seconds for these instances to terminate.</p>

<p style='margin-left:.5in;text-indent:-.25in'><span style='font-size:10.0pt;
font-family:Symbol'>·</span><span style='font-size:7.0pt'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>If the instances haven’t terminated in that time, kills them.</p>

<p>This functionality demonstrates the <tt><span style='font-size:10.0pt'>win32process.CreateProcess()</span></tt>
function, how to use <tt><span style='font-size:10.0pt'>win32process.STARTUPINFO()</span></tt>
objects, and how to wait on process handles using the <tt><span
style='font-size:10.0pt'>win32event.WaitForMultipleObjects()</span></tt>
function.</p>

<p>Note that instead of waiting 10 seconds in one block, you actually wait for
one second 10 times. This is so you can print a message out once per second, so
it’s obvious the program is working correctly:</p>

<pre># CreateProcess.py</pre><pre>#</pre><pre># Demo of creating two processes using the CreateProcess API,</pre><pre># then waiting for the processes to terminate.</pre><pre>&nbsp;</pre><pre>import win32process</pre><pre>import win32event</pre><pre>import win32con</pre><pre>import win32api</pre><pre>&nbsp;</pre><pre># Create a process specified by commandLine, and</pre><pre># The process' window should be at position rect</pre><pre># Returns the handle to the new process.</pre><pre>def CreateMyProcess( commandLine, rect):</pre><pre>&nbsp;&nbsp;&nbsp; # Create a STARTUPINFO object</pre><pre>&nbsp;&nbsp;&nbsp; si = win32process.STARTUPINFO()</pre><pre>&nbsp;&nbsp;&nbsp; # Set the position in the startup info.</pre><pre>&nbsp;&nbsp;&nbsp; si.dwX, si.dwY, si.dwXSize, si.dwYSize = rect</pre><pre>&nbsp;&nbsp;&nbsp; # And indicate which of the items are valid.</pre><pre>&nbsp;&nbsp;&nbsp; si.dwFlags = win32process.STARTF_USEPOSITION | \</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; win32process.STARTF_USESIZE</pre><pre>&nbsp;&nbsp;&nbsp; # Rest of startup info is default, so we leave alone.</pre><pre>&nbsp;&nbsp;&nbsp; # Create the process.</pre><pre>&nbsp;&nbsp;&nbsp; info = win32process.CreateProcess(</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; None, # AppName</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;commandLine, # Command line</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; None, # Process Security</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; None, # ThreadSecurity</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0, # Inherit Handles?</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; win32process.NORMAL_PRIORITY_CLASS,</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;None, # New environment</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; None, # Current directory</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; si) # startup info.</pre><pre>&nbsp;&nbsp;&nbsp; # Return the handle to the process.</pre><pre>&nbsp;&nbsp;&nbsp; # Recall info is a tuple of (hProcess, hThread, processId, threadId)</pre><pre>&nbsp;&nbsp;&nbsp; return info[0]</pre><pre>&nbsp;</pre><pre>def RunEm():</pre><pre>&nbsp;&nbsp;&nbsp; handles = []</pre><pre>&nbsp;&nbsp;&nbsp; # First get the screen size to calculate layout.</pre><pre>&nbsp;&nbsp;&nbsp; screenX = win32api.GetSystemMetrics(win32con.SM_CXSCREEN)</pre><pre>&nbsp;&nbsp;&nbsp; screenY = win32api.GetSystemMetrics(win32con.SM_CYSCREEN)</pre><pre>&nbsp;&nbsp;&nbsp; # First instance will be on the left hand side of the screen.</pre><pre>&nbsp;&nbsp;&nbsp; rect = 0, 0, screenX/2, screenY</pre><pre>&nbsp;&nbsp;&nbsp; handle = CreateMyProcess(&quot;notepad&quot;, rect)</pre><pre>&nbsp;&nbsp;&nbsp; handles.append(handle)</pre><pre>&nbsp;&nbsp;&nbsp; # Second instance of notepad will be on the right hand side.</pre><pre>&nbsp;&nbsp;&nbsp; rect = screenX/2+1, 0, screenX/2, screenY</pre><pre>&nbsp;&nbsp;&nbsp; handle = CreateMyProcess(&quot;notepad&quot;, rect)</pre><pre>&nbsp;&nbsp;&nbsp; handles.append(handle)</pre><pre>&nbsp;</pre><pre>&nbsp;&nbsp;&nbsp; # Now we have the processes, wait for them both</pre><pre>&nbsp;&nbsp;&nbsp; # to terminate.</pre><pre>&nbsp;&nbsp;&nbsp; # Rather than waiting the whole time, we loop 10 times,</pre><pre>&nbsp;&nbsp;&nbsp; # waiting for one second each time, printing a message</pre><pre>&nbsp; &nbsp;&nbsp;# each time around the loop</pre><pre>&nbsp;&nbsp;&nbsp; countdown = range(1,10)</pre><pre>&nbsp;&nbsp;&nbsp; countdown.reverse()</pre><pre>&nbsp;&nbsp;&nbsp; for i in countdown:</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print &quot;Waiting %d seconds for apps to close&quot; % i</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rc = win32event.WaitForMultipleObjects(</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; handles, # Objects to wait for.</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1, # Wait for them all</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1000) # timeout in milli-seconds.</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if rc == win32event.WAIT_OBJECT_0:</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # Our processes closed!</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print &quot;Our processes closed in time.&quot;</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # else just continue around the loop.</pre><pre>&nbsp;&nbsp;&nbsp; else:</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # We didn't break out of the for loop!</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print &quot;Giving up waiting - killing processes&quot;</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for handle in handles:</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try:</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; win32process.TerminateProcess(handle, 0)</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; except win32process.error:</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # This one may have already stopped.</pre><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pass</pre><pre>&nbsp;</pre><pre>if __name__=='__main__':</pre><pre>&nbsp;&nbsp;&nbsp; RunEm()</pre>

<div align=center>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 width="90%"
 style='width:90.0%;background:black'>
 <tr>
  <td style='padding:.75pt .75pt .75pt .75pt'>
  <table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 width="100%"
   style='width:100.0%;background:white'>
   <tr>
    <td width=60 valign=top style='width:45.0pt;padding:4.5pt 4.5pt 4.5pt 4.5pt'>
    <p class=MsoNormal><span style='font-family:Arial'><img border=0 width=50
    height=54 src="images\image002.gif"></span></p>
    </td>
    <td valign=top style='padding:4.5pt 4.5pt 4.5pt 4.5pt'>
    <p>You should run this example from a command prompt rather than from PythonWin.
    Under PythonWin, the script works correctly, but due to the complications
    of running in a GUI environment, PythonWin appears to hang until either 10
    seconds expires or the applications close. Although PythonWin is printing
    the messages once per second, they can’t be seen until the script closes.</p>
    </td>
   </tr>
  </table>
  <p class=MsoNormal></p>
  </td>
 </tr>
</table>

</div>

<p>You run this example from a command prompt as you would any script. Running
the script creates two instances of <i>notepad</i> taking up the entire screen.
If you switch back to the command prompt, notice the following messages:</p>

<pre>C:\Scripts&gt;python CreateProcess.py</pre><pre>Waiting 9 seconds for apps to close</pre><pre>...</pre><pre>Waiting 2 seconds for apps to close</pre><pre>Waiting 1 seconds for apps to close</pre><pre>Giving up waiting - killing processes</pre><pre>C:\Scripts&gt;</pre>

<p>If instead of switching back to the command prompt, you simply close the new
instances of <i>notepad</i>, you’ll see the following:</p>

<pre>C:\Scripts&gt;python CreateProcess.py</pre><pre>Waiting 9 seconds for apps to close</pre><pre>Waiting 8 seconds for apps to close</pre><pre>Our processes closed in time.</pre><pre>C:\Scripts&gt;</pre>

<h3><a name="_17.5_Conclusion"></a>17.5 Conclusion</h3>

<p>In this chapter, we have looked that the various techniques we can use in
Python for working with files and processes. We discussed how Python’s standard
library has a number of modules for working with files and processes in a
portable way, and a few of the problems you may encounter when using these
modules.</p>

<p>We also discussed the native Windows API for dealing with these objects and
the Python interface to this API. We saw how Python can be used to work with
and exploit the Windows specific features of files and processes.</p>

<p class=MsoFootnoteText><a name="_ftn16"></a><a
href="21.htm#_ftnref16" title=""><span
class=MsoFootnoteReference>[1]</span></a> <span style='font-size:7.5pt'>A
regular expression uses patterns to match strings. The filename-matching
capabilities described are similar in concept to regular expressions, although
the regular expressions provided by the Python </span><tt>re</tt><span
style='font-size:7.5pt'> module provide a syntax similar to Perl and offer far
more matching capabilities than the simple filename-matching patterns described
here.</span></p>

<p class=MsoNormal>&nbsp;</p>

<div align=center>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 width="90%"
 style='width:90.0%;background:#ECECD9;border-collapse:collapse'>
 <tr>
  <td width="33%" style='width:33.0%;border:inset #111111 1.0pt;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal><a href="20.htm"><span style='text-decoration:none'><img
  border=0 width=37 height=34 src="leftarrw.gif"></span></a></p>
  </td>
  <td width="33%" style='width:33.0%;border:inset #111111 1.0pt;border-left:
  none;padding:.75pt .75pt .75pt .75pt'>
  <p align=center style='text-align:center'><a href="0.htm"><span
  style='font-size:13.5pt'>Table of Contents</span></a></p>
  </td>
  <td width="34%" style='width:34.0%;border:inset #111111 1.0pt;border-left:
  none;padding:.75pt .75pt .75pt .75pt'>
  <p align=right style='text-align:right'><a href="22.htm"><span
  style='text-decoration:none'><img border=0 width=37 height=34
  src="rightarrw.gif"></span></a></p>
  </td>
 </tr>
</table>

</div>

<p class=MsoNormal>&nbsp;</p>

</div>

</body>

</html>
